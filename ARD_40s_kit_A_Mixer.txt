{***********************************************
Abbey Road Vintage Drummer Kit A -Ebony-
Mixer Page 1
Author: Native Instruments
Written by: Adam Hanley
Modified by: Thanos Kazakos
Modified: July 16th, 2014
************************************************}

on init

{INIT NAVIGATION

0 -- SETUP
	0.0 -- SETUP - GENERAL SETUP, VARIABLES AND CONSTANTS
	0.1 -- SETUP - KIT INFORMATION
	0.2 -- SETUP - FX CONSTANTS AND VARIABLES
	0.3 -- SETUP - GUI SETUP

1 -- MIXER
	1.0 -- MIXER - CHANNEL BACKGROUNDS
	1.1 -- MIXER - REVERB SENDS
	1.2 -- MIXER - PAN & WIDTH
	1.3 -- MIXER - MUTE & SOLO
		1.3.1 - mute
		1.3.2 - solo
		1.3.3 - L/R swap
	1.4 -- MIXER - VOL FADERS & METERS
		1.4.1 - vol faders
		1.4.2 - meters
	1.5 -- MIXER - LABELS/SELECTORS
	1.6 -- MIXER - KIT/BUS DISPLAY
	1.7 -- MIXER - AUTOMATION IDs

2 -- FX
	2.0 -- FX - SELECT & ON/OFF
	2.1 -- FX - EQ
	2.2 -- FX - TRANSIENT DESIGNER
	2.3 -- FX - COMPRESSOR
	2.4 -- FX - TAPE SATURATOR
	2.5 -- FX - REVERB

3 -- CHANNEL CONTROLS
	3.1 -- CHAN - MIC BALANCE
	3.2 -- CHAN - FX ROUTING
	3.3 -- CHAN - OUTPUT & PURGING
	
4 -- FX PRESETS
	4.1 -- FX PRESETS - CONTROLS
	4.2 -- FX PRESETS - ARRAYS ETC...
	4.3 -- FX PRESETS - FUNCTIONALITY
	
5 -- MIXER PRESETS
	5.1 -- PRESETS - CONTROLS
	5.2 -- PRESETS - ARRAYS
	5.3 -- PRESETS - PGS

6 -- GROOVE REMOTE
	6.0 -- GROOVE CONTROLS
	
}

{0 -- SETUP}
{0.0 -- SETUP - GENERAL SETUP, VARIABLES AND CONSTANTS}

	{perfview}
	message("")
	declare $init_LOADED := 1

	set_script_title("Mixer")
	make_perfview
	set_ui_height_px(510)
	set_control_par_str($INST_WALLPAPER_ID,$CONTROL_PAR_PICTURE,"bg_vintage_drummer_kita")
	set_skin_offset(603*3)

	set_snapshot_type(1) {1: init callback is not executed upon snapshot loading}
	{when set to 0: init AND persistence_changed callbacks are executed (default case)
	 when set to 1: ONLY persistence_changed callback is executed
	 • Note: the persistence_changed callback is ALWAYS executed, thus it can be seen as an EXTENTION to the init callback.}

	{variables}
	declare %check_id[8]
	declare $init_flag := 1
	declare $count
	declare $count2
	declare $count3
	declare $count4
	declare $count5
	declare $n_counter
	declare $gui_count
	declare $helper
	declare $c_pointer
	declare $c_pointer2
	declare $c_pointer3
	declare $d_pointer
	declare $eq_fx_pointer
	declare $trans_fx_pointer
	declare $comp_fx_pointer
	declare $tape_fx_pointer
	
	{temp holder values}
	{declare $value}
	declare $send_value
	declare $pan_value
	declare $mute_value
	declare $vol_value
	declare $mic_value
	declare $ir_value
	{/temp holder values}
		
	declare $generic
	declare $solo_check
	declare $preset_pointer
	declare $purge_pointer
	declare $end_pointer
	declare $send_pointer
	declare $pan_pointer
	declare $mute_pointer
	declare $solo_pointer
	declare $vol_pointer
	declare $mic_pointer
	declare $active_snare
	declare $safety1 := 1
	declare $safety2 := 1
	declare $safety3 := 1
	declare $fx_view := 4 {0 = EQ, 1 = Trans, 2 = Comp, 3 = Tape, 4 = settings}
	make_persistent($fx_view)
	read_persistent_var($fx_view)

	make_instr_persistent($fx_view)
	
	declare $reset_flag		{for function reset_instrument}
	declare $rvb_reset_flag
	declare $load_ir_id
	
	declare $last_selection
	declare $cur_selection := 0
	make_persistent($cur_selection)
	read_persistent_var($cur_selection)
	$last_selection := $cur_selection

	make_instr_persistent($cur_selection)
	
	declare %selector_values[15]
	%selector_values[$cur_selection] := 1
	
	declare const $VIEW_EQ := 0
	declare const $VIEW_TRANS := 1
	declare const $VIEW_COMP := 2
	declare const $VIEW_TAPE := 3
	declare const $VIEW_SETTINGS := 4
	
	{--- AUTOMATION IDS ---}
	declare const $SET_AUTOMATION := 0	{Set to 1 to create Automation IDs, load/update script, save NKI and then set to 0}
	
	{behaviour}
	declare const $MAX_VOLUME := 399000
	declare const $MAX_VOLUME_VERB := 500000
	declare const $LOAD_WAIT := 150
	{mouse behaviour}
	declare const $MB_KNOB_SMALL := -500
	declare const $MB_KNOB_LARGE := -500
	declare const $MB_SLIDER_VERT := -1300
	declare const $MB_SLIDER_HOR := 1500
	
{0.1 -- SETUP - KIT INFORMATION}
	
	{--Channel Names--}
	declare !channel_names[15]
	{close}
	!channel_names[0]	:= "Kick"
	!channel_names[1]	:= "Snare"
	!channel_names[2]	:= "HiHat"
	!channel_names[3]	:= "Tom1"
	!channel_names[4]	:= "Tom2"
	!channel_names[5]	:= "Claps"
	!channel_names[6]	:= "Tambourine"
	!channel_names[7]	:= "Cowbell"
	!channel_names[8]	:= ""
	{oh}
	!channel_names[9]	:= "OH ST"
	!channel_names[10]	:= "OH M"
	!channel_names[11]	:= "RM ST"
	!channel_names[12]	:= "RM M"
	{buses}
	!channel_names[13]	:= "Rvrb"
	!channel_names[14]	:= "Mstr"
	
	{--General kit info--}
	
	declare const $KICK_SUB := 1 {enter 1 if there is a sub kick channel, 0 if not}
	
	declare const $NUM_OF_TOMS := 2
	declare const $NUM_OF_PERC := 3
	declare const $NUM_OF_OH := 4
	
	declare const $NUM_CLOSE_MICS := $NUM_OF_TOMS + $NUM_OF_PERC + 3
	
	declare const $OH_OFFSET := 15 {number of groups in one overhead channel}
	
	declare %oh_groups[5] := (18,33,48,63,78)
	{Enter the first group of each overhead. Enter the max group number in the last slot.}
	
	declare %oh_stereo[4] := (1, 0, 1, 0)
	{enter 1 if stereo, 0 if mono, -1 if not used}
	
	{--for purge functions--}
	
	declare const $KICK_ID := 0
	declare const $SNARE_ID := 1
	declare const $HH_ID := 2
	declare const $TOM1_ID := 3
	declare const $TOM2_ID := 4
	declare const $TOM3_ID := 5
	declare const $TOM4_ID := 6
	declare const $TOM5_ID := 7
	declare const $CYMB1_ID := 8
	declare const $CYMB2_ID := 9
	declare const $CYMB3_ID := 10
	declare const $CYMB4_ID := 11
	declare const $CYMB5_ID := 12
	declare const $CYMB6_ID := 13
	declare const $CYMB7_ID := 14
	declare const $PERC1_ID := 15
	declare const $PERC2_ID := 16
	declare const $PERC3_ID := 17
	declare const $PERC4_ID := 18
	declare const $PERC5_ID := 19
	declare const $END_ID := 20
	
	{Enter 1 if instrument is included in kit, enter 0 if not}
	declare %instrument_exist[23] := (...
	{0 - Kick}			1,...
	{1 - Snare 1}		1,...
	{2 - Snare 2}		1,...
	{3 - Snare 3}		1,...
	{4 - HiHat}			1,...
	{5 - Tom 1}			1,...
	{6 - Tom 2}			1,...
	{7 - Tom 3}			0,...
	{8 - Tom 4}			0,...
	{9 - Tom 5}			0,...
	{10 - Cymb 1}		1,...
	{11 - Cymb 2}		1,...
	{12 - Cymb 3}		1,...
	{13 - Cymb 4}		0,...
	{14 - Cymb 5}		0,...
	{15 - Cymb 6}		0,...
	{16 - Cymb 7}		0,...
	{17 - Perc 1}		1,...
	{18 - Perc 2}		1,...
	{19 - Perc 3}		1,...
	{20 - Perc 4}		1,...
	{21 - Perc 5}		1,...
	{22 - End}			1)
	
	{remaps the extended instrument array to the respective instrument id number}
	declare %instrument_id_remap[23] := (...
	{0 - Kick}			0,...
	{1 - Snare 1}		1,...
	{2 - Snare 2}		1,...
	{3 - Snare 3}		1,...
	{4 - HiHat}			2,...
	{5 - Tom 1}			3,...
	{6 - Tom 2}			4,...
	{7 - Tom 3}			5,...
	{8 - Tom 4}			6,...
	{9 - Tom 5}			7,...
	{10 - Cymb 1}		8,...
	{11 - Cymb 2}		9,...
	{12 - Cymb 3}		10,...
	{13 - Cymb 4}		11,...
	{14 - Cymb 5}		12,...
	{15 - Cymb 6}		13,...
	{16 - Cymb 7}		14,...
	{17 - Perc 1}		15,...
	{18 - Perc 2}		16,...
	{19 - Perc 3}		17,...
	{20 - Perc 4}		18,...
	{21 - Perc 5}		19,...
	{22 - End}			20)
	
	declare $hihat_close_start := 4	{first hihat close group}
	declare $hihat_close_end := 5		{last hihat group + 1}
	
	{Instrument ID of the generic close channels}
	declare %generic_inst_id[6] := (...
	$TOM1_ID, ...
	$TOM2_ID, ...
	$PERC2_ID, ...
	$PERC3_ID, ...
	$PERC4_ID, ...
	$END_ID)
	
	{Start groups of the generic channels, last slot is max}
	declare %generic_close_groups[7] := (5,6,7,8,9,10,10)
	
	declare %snare_purge_groups[10] := (...
	{0 - top 1}			1,...
	{1 - top 2}			2,...
	{2 - top 3}			3,...
	{3 - top end}		4,...
	{4 - bot 1}			11,...
	{5 - bot 2}			12,...
	{6 - bot 3}			13,...
	{7 - bot end}		14,...
	{8 - bleed start}	15,...
	{9 - bleed end}		18)
	
	declare %bleed_groups[7] := (...
	15,...
	16,...
	17,...
	18,...
	18,...
	18,...
	18)
	
	declare %oh_purge_groups[23*4]
{oh1}
	{0 - Kick}			%oh_purge_groups[0]  := 18
	{1 - Snare 1}		%oh_purge_groups[1]  := 19
	{2 - Snare 2}		%oh_purge_groups[2]  := 20
	{3 - Snare 3}		%oh_purge_groups[3]  := 21
	{4 - HiHat}			%oh_purge_groups[4]  := 22
	{5 - Tom 1}			%oh_purge_groups[5]  := 23
	{6 - Tom 2}			%oh_purge_groups[6]  := 24
	{7 - Tom 3}			%oh_purge_groups[7]  := 25
	{8 - Tom 4}			%oh_purge_groups[8]  := 25
	{9 - Tom 5}			%oh_purge_groups[9]  := 25
	{10 - Cymb 1}		%oh_purge_groups[10] := 25
	{11 - Cymb 2}		%oh_purge_groups[11] := 26
	{12 - Cymb 3}		%oh_purge_groups[12] := 27
	{13 - Cymb 4}		%oh_purge_groups[13] := 28
	{14 - Cymb 5}		%oh_purge_groups[14] := 28
	{15 - Cymb 6}		%oh_purge_groups[15] := 28
	{16 - Cymb 7}		%oh_purge_groups[16] := 28
	{17 - Perc 1}		%oh_purge_groups[17] := 28
	{18 - Perc 2}		%oh_purge_groups[18] := 29
	{19 - Perc 3}		%oh_purge_groups[19] := 30
	{20 - Perc 4}		%oh_purge_groups[20] := 31
	{21 - Perc 5}		%oh_purge_groups[21] := 32
	{22 - End}			%oh_purge_groups[22] := 33
	
	{automatic fill for OH2, 3 and 4}
	select ($NUM_OF_OH)
		case 2
			$count := 0
			while($count < 23)
				%oh_purge_groups[$count + 23] := %oh_purge_groups[$count] + $OH_OFFSET
				%oh_purge_groups[$count + 46] := -1
				%oh_purge_groups[$count + 69] := -1
				inc($count)
			end while
		case 3
			$count := 0
			while($count < 23)
				%oh_purge_groups[$count + 23] := %oh_purge_groups[$count] + $OH_OFFSET
				%oh_purge_groups[$count + 46] := %oh_purge_groups[$count + 23] + $OH_OFFSET
				%oh_purge_groups[$count + 69] := -1
				inc($count)
			end while
		case 4
			$count := 0
			while($count < 23)
				%oh_purge_groups[$count + 23] := %oh_purge_groups[$count] + $OH_OFFSET
				%oh_purge_groups[$count + 46] := %oh_purge_groups[$count + 23] + $OH_OFFSET
				%oh_purge_groups[$count + 69] := %oh_purge_groups[$count + 46] + $OH_OFFSET
				inc($count)
			end while
	end select
	
	{--for mic balance--}
	
	declare %kick_mic_arr[6] := (...
	{0 - In Start}	0, ...
	{1 - In End}	1, ...
	{2 - Out Start}	10, ...
	{3 - Out End}	11, ...
	{4 - Sub Start}	14, ...
	{5 - Sub End}	15)
	
	declare %snare_mic_arr[6]
	{0 - Top Start}		%snare_mic_arr[0] := %snare_purge_groups[0]
	{1 - Top End}		%snare_mic_arr[1] := %snare_purge_groups[3]
	{2 - Bot Start}		%snare_mic_arr[2] := %snare_purge_groups[4]
	{3 - Bot End}		%snare_mic_arr[3] := %snare_purge_groups[7]
	{4 - Bleed Start}	%snare_mic_arr[4] := %snare_purge_groups[8]
	{5 - Bleed End}		%snare_mic_arr[5] := %snare_purge_groups[9]

{0.2 -- SETUP - FX CONSTANTS AND VARIABLES}
	
	{fx slots}
	{group level}
	declare const $GAIN_SLOT := 2
	declare const $INVERT_SLOT := 5
	{insert level}
	declare const $EQ1_SLOT := 0
	declare const $EQ2_SLOT := 5
	declare const $TAPE_SLOT := 4
	declare const $COMP_SLOT := 2
	declare const $TRANS1_SLOT := 1
	declare const $TRANS2_SLOT := 3
	declare const $SPREAD_SLOT := 6
	declare const $SEND_SLOT := 7
	{send level}
	declare const $REVERB_SLOT := 0
	
	{IR Samples}
	declare !ir_category[7]
	!ir_category[0] := "Ambiences"
	!ir_category[1] := "Rooms"
	!ir_category[2] := "Studios"
	!ir_category[3] := "Chambers"
	!ir_category[4] := "Halls"
	!ir_category[5] := "Plates"
	!ir_category[6] := "Springs"
	
	declare %ir_offset[7]
	%ir_offset[0] := 0
	%ir_offset[1] := 16
	%ir_offset[2] := 24
	%ir_offset[3] := 2
	%ir_offset[4] := 5
	%ir_offset[5] := 11
	%ir_offset[6] := 20
	
	declare !ir_sample[30]
	!ir_sample[0] := "1.3s Clear Ambience"
	!ir_sample[1] := "2.1s Long Ambience"
	!ir_sample[2] := "1.2s Kick Chamber"
	!ir_sample[3] := "1.8s Mid Rich Chamber"
	!ir_sample[4] := "3.1s Vocal Chamber"
	!ir_sample[5] := "1.0s Club Speakers"
	!ir_sample[6] := "1.7s Boomy Club"
	!ir_sample[7] := "1.7s Jazz Club"
	!ir_sample[8] := "2.6s Boomy Low Ceiling"
	!ir_sample[9] := "3.2s Bright Concert Hall"
	!ir_sample[10] := "3.6s Concert Hall"
	!ir_sample[11] := "1.0s One Forty Plate K"
	!ir_sample[12] := "2.1s 80s Cold Plate"
	!ir_sample[13] := "2.8s Warm Plate"
	!ir_sample[14] := "3.3s Snare Plate"
	!ir_sample[15] := "3.5s One Forty Plate B"
	!ir_sample[16] := "0.6s Narrow Room"
	!ir_sample[17] := "1.0s Wood Room"
	!ir_sample[18] := "1.6s Reflective Room"
	!ir_sample[19] := "2.3s Sharp Room"
	!ir_sample[20] := "3.0s Dub Spring"
	!ir_sample[21] := "4.5s Amp Spring"
	!ir_sample[22] := "5.5s Dual Spring"
	!ir_sample[23] := "6.0s Studio Spring"
	!ir_sample[24] := "0.7s Studio C"
	!ir_sample[25] := "0.9s Studio I"
	!ir_sample[26] := "1.1s 70s Drum Room"
	!ir_sample[27] := "1.5s Wide Tracking Room"
	!ir_sample[28] := "1.6s Boomy Studio"
	!ir_sample[29] := "1.7s Loud Studio"
	
{0.3 -- SETUP - GUI SETUP}

	{picture variables}
	declare @send_picture
	declare @pan_picture
	declare @mute_picture
	declare @solo_picture
	declare @volfader_picture
	declare @balance_picture
	declare @fx_led
	declare @fx_knob_blk
	declare @fx_knob_blue
	declare @fx_knob_red
	declare @fx_knob_ylo
	declare @eq_btn
	declare @channel_bg
	declare !kitmic_bg[4]
	declare @reverb_bg
	declare @master_bg
	declare !chanlabel_pictures[15]
	
	@send_picture := "NID_mixer_knb_smallblue91"
	@pan_picture := "NID_mixer_knb_smallblack91"
	@mute_picture := "NID_mixer_btn_mute"
	@solo_picture := "NID_mixer_btn_solo"
	@volfader_picture := "NID_mixer_fdr_vol81"
	@balance_picture := "NID_mixer_fdr_mix81"
	@fx_led := "NID_mixer_btn_fxled"
	@fx_knob_blk := "NID_mixer_knb_black91"
	@fx_knob_blue := "NID_mixer_knb_blue91"
	@fx_knob_red := "NID_mixer_knb_red91"
	@fx_knob_ylo := "NID_mixer_knb_yellow91"
	@eq_btn := "NID_mixer_btn_eqbell"
	@channel_bg := "NID_mixer_lbl_bgchannel"
	!chanlabel_pictures[0] := "NID_mixer_tab_kick"
	!chanlabel_pictures[1] := "NID_mixer_tab_snare"
	!chanlabel_pictures[2] := "NID_mixer_tab_hat"
	!chanlabel_pictures[3] := "NID_mixer_tab_tom1"
	!chanlabel_pictures[4] := "NID_mixer_tab_tom2"
	!chanlabel_pictures[5] := "NID_mixer_tab_claps"
	!chanlabel_pictures[6] := "NID_mixer_tab_tamb"
	!chanlabel_pictures[7] := "NID_mixer_tab_cb"
	!chanlabel_pictures[8] := "NID_mixer_tab_chop"
	!chanlabel_pictures[9] := "mod_mixer_tab_oh_st"
	!chanlabel_pictures[10] := "mod_mixer_tab_oh_m"
	!chanlabel_pictures[11] := "mod_mixer_tab_st_rm"
	!chanlabel_pictures[12] := "mod_mixer_tab_m_rm"
	!chanlabel_pictures[13] := "NID_mixer_tab_reverb"
	!chanlabel_pictures[14] := "NID_mixer_tab_master"
	$count := 0
	while($count < $NUM_OF_OH)
		select(%oh_stereo[$count])
			case 0
				!kitmic_bg[$count] := "NID_mixer_lbl_bgkitmicpan" & $NUM_OF_OH
			case 1
				!kitmic_bg[$count] := "NID_mixer_lbl_bgkitmicwidth" & $NUM_OF_OH
		end select
		inc($count)
	end while
	
	{position constants and variables}
	declare const $CLOSE_CHAN_WIDTH := 47
	declare $KIT_CHAN_WIDTH
	declare const $MASTER_CHAN_WIDTH := 94
	declare $KIT_CHAN_OFFSET := 439
	declare const $MASTER_CHAN_OFFSET := 439
	declare $KIT_CHAN_CONTROL_OFFSET
	select ($NUM_OF_OH)
		case 1 to 2
			$KIT_CHAN_OFFSET := 440
			$KIT_CHAN_WIDTH := 94
			$KIT_CHAN_CONTROL_OFFSET := 454
		case 3
			$KIT_CHAN_OFFSET := 439
			$KIT_CHAN_WIDTH := 63
			$KIT_CHAN_CONTROL_OFFSET := 439
		case 4
			$KIT_CHAN_OFFSET := 440
			$KIT_CHAN_WIDTH := 47
			$KIT_CHAN_CONTROL_OFFSET := 431
	end select
	
	declare $x_offset
	declare $y_offset

	{fonts}
	declare const $FONT_ID1 := 12 {dark dropdowns}
	declare const $FONT_ID2 := 14 {light dropdowns}
	
	declare @empty_preset_text
	@empty_preset_text := "<new preset>"
	
{1 -- MIXER}
{1.0 -- MIXER - CHANNEL BACKGROUNDS}

	declare ui_label $chan_bg_kick (1,1)
	declare ui_label $chan_bg_snare (1,1)
	declare ui_label $chan_bg_hihat (1,1)
	declare ui_label $chan_bg_gen1 (1,1)
	declare ui_label $chan_bg_gen2 (1,1)
	declare ui_label $chan_bg_gen3 (1,1)
	declare ui_label $chan_bg_gen4 (1,1)
	declare ui_label $chan_bg_gen5 (1,1)
	declare ui_label $chan_bg_gen6 (1,1)
	declare ui_label $chan_bg_oh1 (1,1)
	declare ui_label $chan_bg_oh2 (1,1)
	declare ui_label $chan_bg_oh3 (1,1)
	declare ui_label $chan_bg_oh4 (1,1)
	declare ui_label $chan_bg_reverb (1,1)
	declare ui_label $chan_bg_master (1,1)
	
	declare %chan_bg_id[15]
	%chan_bg_id[0] := get_ui_id($chan_bg_kick)
	%chan_bg_id[1] := get_ui_id($chan_bg_snare)
	%chan_bg_id[2] := get_ui_id($chan_bg_hihat)
	%chan_bg_id[3] := get_ui_id($chan_bg_gen1)
	%chan_bg_id[4] := get_ui_id($chan_bg_gen2)
	%chan_bg_id[5] := get_ui_id($chan_bg_gen3)
	%chan_bg_id[6] := get_ui_id($chan_bg_gen4)
	%chan_bg_id[7] := get_ui_id($chan_bg_gen5)
	%chan_bg_id[8] := get_ui_id($chan_bg_gen6)
	%chan_bg_id[9] := get_ui_id($chan_bg_oh1)
	%chan_bg_id[10] := get_ui_id($chan_bg_oh2)
	%chan_bg_id[11] := get_ui_id($chan_bg_oh3)
	%chan_bg_id[12] := get_ui_id($chan_bg_oh4)
	%chan_bg_id[13] := get_ui_id($chan_bg_reverb)
	%chan_bg_id[14] := get_ui_id($chan_bg_master)
	
	$x_offset := 7
	$y_offset := 83
	
	$count := 0
	while ($count < $NUM_CLOSE_MICS)
		set_control_par_str(%chan_bg_id[$count], $CONTROL_PAR_PICTURE, @channel_bg)
		set_control_par_str(%chan_bg_id[$count], $CONTROL_PAR_TEXT, "")
		set_control_par(%chan_bg_id[$count], $CONTROL_PAR_POS_X, ($count*$CLOSE_CHAN_WIDTH)+$x_offset)
		set_control_par(%chan_bg_id[$count], $CONTROL_PAR_POS_Y, $y_offset)
		inc($count)
	end while
	
	if($NUM_CLOSE_MICS < 9)
		$count := $NUM_CLOSE_MICS
		while($count < 9)
			set_control_par(%chan_bg_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			inc($count)
		end while
	end if
	
	{oh}
	$count := 9
	while($count < ($NUM_OF_OH + 9))
		set_control_par_str(%chan_bg_id[$count], $CONTROL_PAR_PICTURE, !kitmic_bg[$count-9])
		set_control_par_str(%chan_bg_id[$count], $CONTROL_PAR_TEXT, "")
		set_control_par(%chan_bg_id[$count], $CONTROL_PAR_POS_X, (($count-9)*$KIT_CHAN_WIDTH)+$KIT_CHAN_OFFSET-1)
		set_control_par(%chan_bg_id[$count], $CONTROL_PAR_POS_Y, $y_offset)
		inc($count)
	end while
	
	if($NUM_OF_OH < 4)
		$count := $NUM_OF_OH + 9
		while($count < 13)
			set_control_par(%chan_bg_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			inc($count)
		end while
	end if

	set_control_par_str(%chan_bg_id[13], $CONTROL_PAR_PICTURE, "NID_mixer_lbl_bgreverb")
	set_control_par_str(%chan_bg_id[14], $CONTROL_PAR_PICTURE, "NID_mixer_lbl_bgmaster")
	
	$count := 13
	while($count < 15)
		set_control_par_str(%chan_bg_id[$count], $CONTROL_PAR_TEXT, "")
		set_control_par(%chan_bg_id[$count], $CONTROL_PAR_POS_X, (($count-13)*$MASTER_CHAN_WIDTH)+$MASTER_CHAN_OFFSET-1)
		set_control_par(%chan_bg_id[$count], $CONTROL_PAR_POS_Y, $y_offset)
		inc($count)
	end while
	
	set_control_par(%chan_bg_id[$cur_selection], $CONTROL_PAR_PICTURE_STATE, 1)
	
{1.1 -- MIXER - REVERB SENDS}

	declare ui_slider $send_kick (0,1000)
	declare ui_slider $send_snare (0,1000)
	declare ui_slider $send_hihat (0,1000)
	declare ui_slider $send_gen1 (0,1000)
	declare ui_slider $send_gen2 (0,1000)
	declare ui_slider $send_gen3 (0,1000)
	declare ui_slider $send_gen4 (0,1000)
	declare ui_slider $send_gen5 (0,1000)
	declare ui_slider $send_gen6 (0,1000)
	declare ui_slider $send_oh1 (0,1000)
	declare ui_slider $send_oh2 (0,1000)
	declare ui_slider $send_oh3 (0,1000)
	declare ui_slider $send_oh4 (0,1000)
	declare ui_slider $send_master (0,1000)
	
	declare %send_id[15]
	%send_id[0] := get_ui_id($send_kick)
	%send_id[1] := get_ui_id($send_snare)
	%send_id[2] := get_ui_id($send_hihat)
	%send_id[3] := get_ui_id($send_gen1)
	%send_id[4] := get_ui_id($send_gen2)
	%send_id[5] := get_ui_id($send_gen3)
	%send_id[6] := get_ui_id($send_gen4)
	%send_id[7] := get_ui_id($send_gen5)
	%send_id[8] := get_ui_id($send_gen6)
	%send_id[9] := get_ui_id($send_oh1)
	%send_id[10] := get_ui_id($send_oh2)
	%send_id[11] := get_ui_id($send_oh3)
	%send_id[12] := get_ui_id($send_oh4)
	{no send for reverb} %send_id[13] := -1
	%send_id[14] := get_ui_id($send_master)
	
	$x_offset := 11
	$y_offset := 94
	
	{close}
	$count := 0
	while($count < $NUM_CLOSE_MICS)
		set_control_par_str(%send_id[$count], $CONTROL_PAR_PICTURE, @send_picture)
		set_control_par_str(%send_id[$count], $CONTROL_PAR_HELP, !channel_names[$count] & " Reverb Send Amount: Controls the amount of signal sent from this channel to the reverb effect.")
		set_control_par_str(%send_id[$count], $CONTROL_PAR_AUTOMATION_NAME, !channel_names[$count] & " Verb Send")
		set_control_par(%send_id[$count], $CONTROL_PAR_MOUSE_BEHAVIOUR, $MB_KNOB_SMALL)
		set_control_par(%send_id[$count], $CONTROL_PAR_VALUE, 0)
		set_control_par(%send_id[$count], $CONTROL_PAR_DEFAULT_VALUE, 0)
		set_control_par(%send_id[$count], $CONTROL_PAR_POS_X, ($count*$CLOSE_CHAN_WIDTH)+$x_offset)
		set_control_par(%send_id[$count], $CONTROL_PAR_POS_Y, $y_offset)
		inc($count)
	end while
	
	if($NUM_CLOSE_MICS < 9)
		$count := $NUM_CLOSE_MICS
		while($count < 9)
			set_control_par(%send_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			set_control_par(%send_id[$count], $CONTROL_PAR_ALLOW_AUTOMATION, 0)
			inc($count)
		end while
	end if
	
	{oh}
	$count := 9
	while($count < ($NUM_OF_OH + 9))
		set_control_par_str(%send_id[$count], $CONTROL_PAR_PICTURE, @send_picture)
		set_control_par_str(%send_id[$count], $CONTROL_PAR_HELP, !channel_names[$count] & " Reverb Send Amount: Controls the amount of signal sent from this channel to the reverb effect.")
		set_control_par_str(%send_id[$count], $CONTROL_PAR_AUTOMATION_NAME, !channel_names[$count] & " Verb Send")
		set_control_par(%send_id[$count], $CONTROL_PAR_MOUSE_BEHAVIOUR, $MB_KNOB_SMALL)
		set_control_par(%send_id[$count], $CONTROL_PAR_VALUE, 0)
		set_control_par(%send_id[$count], $CONTROL_PAR_DEFAULT_VALUE, 0)
		set_control_par(%send_id[$count], $CONTROL_PAR_POS_X, (($count-9)*$KIT_CHAN_WIDTH)+$x_offset+$KIT_CHAN_CONTROL_OFFSET)
		set_control_par(%send_id[$count], $CONTROL_PAR_POS_Y, $y_offset)
		inc($count)
	end while
	
	if($NUM_OF_OH < 4)
		$count := $NUM_OF_OH + 9
		while($count < 13)
			set_control_par(%send_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			set_control_par(%send_id[$count], $CONTROL_PAR_ALLOW_AUTOMATION, 0)
			inc($count)
		end while
	end if
	
	$x_offset := 26
	
	{master}
	$count := 14
	set_control_par_str(%send_id[$count], $CONTROL_PAR_PICTURE, @send_picture)
	set_control_par_str(%send_id[$count], $CONTROL_PAR_HELP, "Master Reverb Send Amount: Controls the amount of signal sent from the master bus to the reverb effect.")
	set_control_par_str(%send_id[$count], $CONTROL_PAR_AUTOMATION_NAME, "Master Verb Send")
	set_control_par(%send_id[$count], $CONTROL_PAR_MOUSE_BEHAVIOUR, $MB_KNOB_SMALL)
	set_control_par(%send_id[$count], $CONTROL_PAR_VALUE, 0)
	set_control_par(%send_id[$count], $CONTROL_PAR_DEFAULT_VALUE, 0)
	move_control_px($send_master,$MASTER_CHAN_WIDTH+$x_offset+$MASTER_CHAN_OFFSET,$y_offset)
	
	make_persistent($send_kick)
	make_persistent($send_snare)
	make_persistent($send_hihat)
	make_persistent($send_gen1)
	make_persistent($send_gen2)
	make_persistent($send_gen3)
	make_persistent($send_gen4)
	make_persistent($send_gen5)
	make_persistent($send_gen6)
	make_persistent($send_oh1)
	make_persistent($send_oh2)
	make_persistent($send_oh3)
	make_persistent($send_oh4)
	make_persistent($send_master)

{1.2 -- MIXER - PAN & WIDTH}

	declare ui_slider $pan_kick (0,1000000)
	declare ui_slider $pan_snare (0,1000000)
	declare ui_slider $pan_hihat (0,1000000)
	declare ui_slider $pan_gen1 (0,1000000)
	declare ui_slider $pan_gen2 (0,1000000)
	declare ui_slider $pan_gen3 (0,1000000)
	declare ui_slider $pan_gen4 (0,1000000)
	declare ui_slider $pan_gen5 (0,1000000)
	declare ui_slider $pan_gen6 (0,1000000)
	declare ui_slider $pan_oh1 (0,1000000)
	declare ui_slider $pan_oh2 (0,1000000)
	declare ui_slider $pan_oh3 (0,1000000)
	declare ui_slider $pan_oh4 (0,1000000)
	declare ui_slider $width_master (0,1000000)
	
	declare %pan_id[15]
	%pan_id[0] := get_ui_id($pan_kick)
	%pan_id[1] := get_ui_id($pan_snare)
	%pan_id[2] := get_ui_id($pan_hihat)
	%pan_id[3] := get_ui_id($pan_gen1)
	%pan_id[4] := get_ui_id($pan_gen2)
	%pan_id[5] := get_ui_id($pan_gen3)
	%pan_id[6] := get_ui_id($pan_gen4)
	%pan_id[7] := get_ui_id($pan_gen5)
	%pan_id[8] := get_ui_id($pan_gen6)
	%pan_id[9] := get_ui_id($pan_oh1)
	%pan_id[10] := get_ui_id($pan_oh2)
	%pan_id[11] := get_ui_id($pan_oh3)
	%pan_id[12] := get_ui_id($pan_oh4)
	{no pan for reverb} %pan_id[13] := -1
	%pan_id[14] := get_ui_id($width_master)

	make_persistent($pan_kick)
	make_persistent($pan_snare)
	make_persistent($pan_hihat)
	make_persistent($pan_gen1)
	make_persistent($pan_gen2)
	make_persistent($pan_gen3)
	make_persistent($pan_gen4)
	make_persistent($pan_gen5)
	make_persistent($pan_gen6)
	make_persistent($pan_oh1)
	make_persistent($pan_oh2)
	make_persistent($pan_oh3)
	make_persistent($pan_oh4)
	make_persistent($width_master)
	
	$x_offset := 11
	$y_offset := 144
	
	{close}
	$count := 0
	while($count < $NUM_CLOSE_MICS)
		set_control_par_str(%pan_id[$count], $CONTROL_PAR_PICTURE, @pan_picture)
		set_control_par_str(%pan_id[$count], $CONTROL_PAR_HELP, !channel_names[$count] & " Pan: Controls the stereo panorama of the channel.")
		set_control_par_str(%pan_id[$count], $CONTROL_PAR_AUTOMATION_NAME, !channel_names[$count] & " Pan")
		set_control_par(%pan_id[$count], $CONTROL_PAR_MOUSE_BEHAVIOUR, $MB_KNOB_SMALL)
		set_control_par(%pan_id[$count], $CONTROL_PAR_VALUE, get_engine_par($ENGINE_PAR_STEREO_PAN,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$count))
		set_control_par(%pan_id[$count], $CONTROL_PAR_DEFAULT_VALUE, 500000)
		set_control_par(%pan_id[$count], $CONTROL_PAR_POS_X, ($count*$CLOSE_CHAN_WIDTH)+$x_offset)
		set_control_par(%pan_id[$count], $CONTROL_PAR_POS_Y, $y_offset)
		inc($count)
	end while
	
	if($NUM_CLOSE_MICS < 9)
		$count := $NUM_CLOSE_MICS
		while($count < 9)
			set_control_par(%pan_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			set_control_par(%pan_id[$count], $CONTROL_PAR_ALLOW_AUTOMATION, 0)
			inc($count)
		end while
	end if
	
	{oh}
	$count := 9
	while($count < ($NUM_OF_OH + 9))
		set_control_par_str(%pan_id[$count], $CONTROL_PAR_PICTURE, @pan_picture)
		set_control_par(%pan_id[$count], $CONTROL_PAR_MOUSE_BEHAVIOUR, $MB_KNOB_SMALL)
		set_control_par(%pan_id[$count], $CONTROL_PAR_POS_X, (($count-9)*$KIT_CHAN_WIDTH)+$x_offset+$KIT_CHAN_CONTROL_OFFSET)
		set_control_par(%pan_id[$count], $CONTROL_PAR_POS_Y, $y_offset)
		if(%oh_stereo[$count - 9] = 1)
			set_control_par(%pan_id[$count], $CONTROL_PAR_VALUE, get_engine_par($ENGINE_PAR_STEREO,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$count)*2)
			set_control_par_str(%pan_id[$count], $CONTROL_PAR_HELP, !channel_names[$count] & " Width: Controls the stereo width of the channel. Moving the knob fully to the right sets the channel to natural stereo, while moving it fully to the left sets the channel to mono.")
			set_control_par_str(%pan_id[$count], $CONTROL_PAR_AUTOMATION_NAME, !channel_names[$count] & " Width")
			set_control_par(%pan_id[$count], $CONTROL_PAR_DEFAULT_VALUE, 1000000)
		else
			set_control_par_str(%pan_id[$count], $CONTROL_PAR_HELP, !channel_names[$count] & " Pan: Controls the stereo panorama of the channel.")
			set_control_par_str(%pan_id[$count], $CONTROL_PAR_AUTOMATION_NAME, !channel_names[$count] & " Pan")
			set_control_par(%pan_id[$count], $CONTROL_PAR_VALUE, get_engine_par($ENGINE_PAR_STEREO_PAN,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$count))
			set_control_par(%pan_id[$count], $CONTROL_PAR_DEFAULT_VALUE, 500000)
		end if
		inc($count)
	end while
	
	if($NUM_OF_OH < 4)
		$count := $NUM_OF_OH + 9
		while($count < 13)
			set_control_par(%pan_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			set_control_par(%pan_id[$count], $CONTROL_PAR_ALLOW_AUTOMATION, 0)
			inc($count)
		end while
	end if
	
	$x_offset := 26
	
	{master}
	$count := 14
	set_control_par_str(%pan_id[$count], $CONTROL_PAR_PICTURE, @pan_picture)
	set_control_par_str(%pan_id[$count], $CONTROL_PAR_HELP, "Master Width: Controls the stereo width of the master bus. Moving the knob fully to the right sets the master to natural stereo, while moving it fully to the left sets the master to mono.")
	set_control_par_str(%pan_id[$count], $CONTROL_PAR_AUTOMATION_NAME, "Master Width")
	set_control_par(%pan_id[$count], $CONTROL_PAR_MOUSE_BEHAVIOUR, $MB_KNOB_SMALL)
	set_control_par(%pan_id[$count], $CONTROL_PAR_VALUE, get_engine_par($ENGINE_PAR_STEREO,-1,$SPREAD_SLOT,1)*2)
	set_control_par(%pan_id[$count], $CONTROL_PAR_DEFAULT_VALUE, 1000000)
	move_control_px($width_master,$MASTER_CHAN_WIDTH+$x_offset+$MASTER_CHAN_OFFSET,$y_offset)

{1.3 -- MIXER - MUTE & SOLO}

{1.3.1 - mute}
	
	declare ui_switch $mute_kick
	declare ui_switch $mute_snare
	declare ui_switch $mute_hihat
	declare ui_switch $mute_gen1
	declare ui_switch $mute_gen2
	declare ui_switch $mute_gen3
	declare ui_switch $mute_gen4
	declare ui_switch $mute_gen5
	declare ui_switch $mute_gen6
	declare ui_switch $mute_oh1
	declare ui_switch $mute_oh2
	declare ui_switch $mute_oh3
	declare ui_switch $mute_oh4
	declare ui_switch $mute_reverb
	
	declare %mute_id[15]
	%mute_id[0] := get_ui_id($mute_kick)
	%mute_id[1] := get_ui_id($mute_snare)
	%mute_id[2] := get_ui_id($mute_hihat)
	%mute_id[3] := get_ui_id($mute_gen1)
	%mute_id[4] := get_ui_id($mute_gen2)
	%mute_id[5] := get_ui_id($mute_gen3)
	%mute_id[6] := get_ui_id($mute_gen4)
	%mute_id[7] := get_ui_id($mute_gen5)
	%mute_id[8] := get_ui_id($mute_gen6)
	%mute_id[9] := get_ui_id($mute_oh1)
	%mute_id[10] := get_ui_id($mute_oh2)
	%mute_id[11] := get_ui_id($mute_oh3)
	%mute_id[12] := get_ui_id($mute_oh4)
	%mute_id[13] := get_ui_id($mute_reverb)
	{no mute for master} %mute_id[14] := -1

	make_persistent($mute_kick)
	make_persistent($mute_snare)
	make_persistent($mute_hihat)
	make_persistent($mute_gen1)
	make_persistent($mute_gen2)
	make_persistent($mute_gen3)
	make_persistent($mute_gen4)
	make_persistent($mute_gen5)
	make_persistent($mute_gen6)
	make_persistent($mute_oh1)
	make_persistent($mute_oh2)
	make_persistent($mute_oh3)
	make_persistent($mute_oh4)
	make_persistent($mute_reverb)
	
	$x_offset := 29
	$y_offset := 189
	
	{close}
	$count := 0
	while($count < $NUM_CLOSE_MICS)
		set_control_par_str(%mute_id[$count], $CONTROL_PAR_PICTURE, @mute_picture)
		set_control_par_str(%mute_id[$count], $CONTROL_PAR_HELP, !channel_names[$count] & " Mute: Blocks the signal of the channel from reaching it's output, effectively setting the volume to zero.")
		set_control_par_str(%mute_id[$count], $CONTROL_PAR_AUTOMATION_NAME, !channel_names[$count] & " Mute")
		set_control_par_str(%mute_id[$count], $CONTROL_PAR_TEXT, "")
		set_control_par(%mute_id[$count], $CONTROL_PAR_HEIGHT, 30)
		set_control_par(%mute_id[$count], $CONTROL_PAR_WIDTH, 30)
		set_control_par(%mute_id[$count], $CONTROL_PAR_POS_X, ($count*$CLOSE_CHAN_WIDTH)+$x_offset)
		set_control_par(%mute_id[$count], $CONTROL_PAR_POS_Y, $y_offset)
		inc($count)
	end while
	
	if($NUM_CLOSE_MICS < 9)
		$count := $NUM_CLOSE_MICS
		while($count < 9)
			set_control_par(%mute_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			set_control_par(%mute_id[$count], $CONTROL_PAR_ALLOW_AUTOMATION, 0)
			inc($count)
		end while
	end if
	
	{oh}
	$count := 9
	while($count < ($NUM_OF_OH + 9))
		set_control_par_str(%mute_id[$count], $CONTROL_PAR_PICTURE, @mute_picture)
		set_control_par_str(%mute_id[$count], $CONTROL_PAR_HELP, !channel_names[$count] & " Mute: Blocks the signal of the channel from reaching it's output, effectively setting the volume to zero.")
		set_control_par_str(%mute_id[$count], $CONTROL_PAR_AUTOMATION_NAME, !channel_names[$count] & " Mute")
		set_control_par_str(%mute_id[$count], $CONTROL_PAR_TEXT, "")
		set_control_par(%mute_id[$count], $CONTROL_PAR_HEIGHT, 30)
		set_control_par(%mute_id[$count], $CONTROL_PAR_WIDTH, 30)
		set_control_par(%mute_id[$count], $CONTROL_PAR_POS_X, (($count-9)*$KIT_CHAN_WIDTH)+$x_offset+$KIT_CHAN_CONTROL_OFFSET)
		set_control_par(%mute_id[$count], $CONTROL_PAR_POS_Y, $y_offset)
		inc($count)
	end while
	
	if($NUM_OF_OH < 4)
		$count := $NUM_OF_OH + 9
		while($count < 13)
			set_control_par(%mute_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			set_control_par(%mute_id[$count], $CONTROL_PAR_ALLOW_AUTOMATION, 0)
			inc($count)
		end while
	end if
	
	{reverb}
	$count := 13
	set_control_par_str(%mute_id[$count], $CONTROL_PAR_PICTURE, @mute_picture)
	set_control_par_str(%mute_id[$count], $CONTROL_PAR_HELP, "Reverb Mute: Blocks the signal of the reverb effect from reaching it's output, effectively setting the volume to zero. This also turns the effect off, reducing CPU load.")
	set_control_par_str(%mute_id[$count], $CONTROL_PAR_AUTOMATION_NAME, "Reverb Mute")
	set_control_par_str(%mute_id[$count], $CONTROL_PAR_TEXT, "")
	set_control_par(%mute_id[$count], $CONTROL_PAR_HEIGHT, 30)
	set_control_par(%mute_id[$count], $CONTROL_PAR_WIDTH, 30)
	move_control_px($mute_reverb,483,$y_offset)
	
	declare %mute_state[14] := (1,1,1,1,1,1,1,1,1,1,1,1,1,1)
	make_persistent(%mute_state)
	read_persistent_var(%mute_state)
	
	$count := 0
	while($count < 14)
		set_control_par(%mute_id[$count], $CONTROL_PAR_VALUE, (%mute_state[$count]+1) mod 2)
		inc($count)
	end while

{1.3.2 - solo}
	
	declare ui_switch $solo_kick
	declare ui_switch $solo_snare
	declare ui_switch $solo_hihat
	declare ui_switch $solo_gen1
	declare ui_switch $solo_gen2
	declare ui_switch $solo_gen3
	declare ui_switch $solo_gen4
	declare ui_switch $solo_gen5
	declare ui_switch $solo_gen6
	declare ui_switch $solo_oh1
	declare ui_switch $solo_oh2
	declare ui_switch $solo_oh3
	declare ui_switch $solo_oh4
	declare ui_switch $solo_reverb
	
	declare %solo_id[15]
	%solo_id[0] := get_ui_id($solo_kick)
	%solo_id[1] := get_ui_id($solo_snare)
	%solo_id[2] := get_ui_id($solo_hihat)
	%solo_id[3] := get_ui_id($solo_gen1)
	%solo_id[4] := get_ui_id($solo_gen2)
	%solo_id[5] := get_ui_id($solo_gen3)
	%solo_id[6] := get_ui_id($solo_gen4)
	%solo_id[7] := get_ui_id($solo_gen5)
	%solo_id[8] := get_ui_id($solo_gen6)
	%solo_id[9] := get_ui_id($solo_oh1)
	%solo_id[10] := get_ui_id($solo_oh2)
	%solo_id[11] := get_ui_id($solo_oh3)
	%solo_id[12] := get_ui_id($solo_oh4)
	%solo_id[13] := get_ui_id($solo_reverb)
	{no solo for master} %solo_id[14] := -1

	make_persistent($solo_kick)
	make_persistent($solo_snare)
	make_persistent($solo_hihat)
	make_persistent($solo_gen1)
	make_persistent($solo_gen2)
	make_persistent($solo_gen3)
	make_persistent($solo_gen4)
	make_persistent($solo_gen5)
	make_persistent($solo_gen6)
	make_persistent($solo_oh1)
	make_persistent($solo_oh2)
	make_persistent($solo_oh3)
	make_persistent($solo_oh4)
	make_persistent($solo_reverb)
	
	$x_offset := 9
	
	{close}
	$count := 0
	while($count < $NUM_CLOSE_MICS)
		set_control_par_str(%solo_id[$count], $CONTROL_PAR_PICTURE, @solo_picture)
		set_control_par_str(%solo_id[$count], $CONTROL_PAR_HELP, !channel_names[$count] & " Solo: Blocks the signal of all other channels that do not also have solo turned on from reaching their outputs, effectively setting their volumes to zero.")
		set_control_par_str(%solo_id[$count], $CONTROL_PAR_AUTOMATION_NAME, !channel_names[$count] & " Solo")
		set_control_par_str(%solo_id[$count], $CONTROL_PAR_TEXT, "")
		set_control_par(%solo_id[$count], $CONTROL_PAR_HEIGHT, 30)
		set_control_par(%solo_id[$count], $CONTROL_PAR_WIDTH, 30)
		set_control_par(%solo_id[$count], $CONTROL_PAR_POS_X, ($count*$CLOSE_CHAN_WIDTH)+$x_offset)
		set_control_par(%solo_id[$count], $CONTROL_PAR_POS_Y, $y_offset)
		inc($count)
	end while
	
	if($NUM_CLOSE_MICS < 9)
		$count := $NUM_CLOSE_MICS
		while($count < 9)
			set_control_par(%solo_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			set_control_par(%solo_id[$count], $CONTROL_PAR_ALLOW_AUTOMATION, 0)
			inc($count)
		end while
	end if
	
	{oh}
	$count := 9
	while($count < ($NUM_OF_OH + 9))
		set_control_par_str(%solo_id[$count], $CONTROL_PAR_PICTURE, @solo_picture)
		set_control_par_str(%solo_id[$count], $CONTROL_PAR_HELP, !channel_names[$count] & " Solo: Blocks the signal of all other channels that do not also have solo turned on from reaching their outputs, effectively setting their volumes to zero.")
		set_control_par_str(%solo_id[$count], $CONTROL_PAR_AUTOMATION_NAME, !channel_names[$count] & " Solo")
		set_control_par_str(%solo_id[$count], $CONTROL_PAR_TEXT, "")
		set_control_par(%solo_id[$count], $CONTROL_PAR_HEIGHT, 30)
		set_control_par(%solo_id[$count], $CONTROL_PAR_WIDTH, 30)
		set_control_par(%solo_id[$count], $CONTROL_PAR_POS_X, (($count-9)*$KIT_CHAN_WIDTH)+$x_offset+$KIT_CHAN_CONTROL_OFFSET)
		set_control_par(%solo_id[$count], $CONTROL_PAR_POS_Y, $y_offset)
		inc($count)
	end while
	
	if($NUM_OF_OH < 4)
		$count := $NUM_OF_OH + 9
		while($count < 13)
			set_control_par(%solo_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			set_control_par(%solo_id[$count], $CONTROL_PAR_ALLOW_AUTOMATION, 0)
			inc($count)
		end while
	end if
	
	{reverb}
	$count := 13
	set_control_par_str(%solo_id[$count], $CONTROL_PAR_PICTURE, @solo_picture)
	set_control_par_str(%solo_id[$count], $CONTROL_PAR_HELP, "Reverb Solo: Blocks the signal of the master bus, effectively setting it's volume to zero.")
	set_control_par_str(%solo_id[$count], $CONTROL_PAR_AUTOMATION_NAME, "Reverb Solo")
	set_control_par_str(%solo_id[$count], $CONTROL_PAR_TEXT, "")
	set_control_par(%solo_id[$count], $CONTROL_PAR_HEIGHT, 30)
	set_control_par(%solo_id[$count], $CONTROL_PAR_WIDTH, 30)
	move_control_px($solo_reverb,463,$y_offset)
	
	declare %solo_state[14] := (1,1,1,1,1,1,1,1,1,1,1,1,1,1)
	declare %solo_light[14]
	
	make_persistent(%solo_state)
	make_persistent(%solo_light)
	read_persistent_var(%solo_state)
	read_persistent_var(%solo_light)
	
	$count := 0
	while($count < 14)
		set_control_par(%solo_id[$count], $CONTROL_PAR_VALUE, %solo_light[$count])
		inc($count)
	end while

{1.3.3 - L/R swap}
	
	declare ui_button $lr_swap
	make_persistent($lr_swap)
	set_control_par_str(get_ui_id($lr_swap), $CONTROL_PAR_PICTURE, "NID_mixer_btn_l-r")
	set_control_par_str(get_ui_id($lr_swap), $CONTROL_PAR_HELP, "L/R Swap: changes the listener position, by switch the left and right channels. This will also change the panning positions of your mixer.")
	set_control_par_str(get_ui_id($lr_swap), $CONTROL_PAR_TEXT, "")
	set_control_par(get_ui_id($lr_swap), $CONTROL_PAR_HEIGHT, 26)
	set_control_par(get_ui_id($lr_swap), $CONTROL_PAR_WIDTH, 42)
	move_control_px($lr_swap,557,$y_offset)
	
{1.4 -- MIXER - VOL FADERS & METERS}
{1.4.1 - vol faders}

	declare %wurzel_zweidrittel[128] := (...
		0,1000,1587,2080,2520,2924,3302,3659,4000,4327,...
		4642,4946,5241,5529,5809,6082,6350,6611,6868,7120,...
		7368,7612,7851,8088,8320,8549,8776,9000,9221,9439,...
		9655,9868,10079,10288,10495,10700,10903,11103,11303,11500,...
		11696,11890,12083,12274,12463,12651,12838,13024,13208,13391,...
		13572,13752,13932,14110,14287,14462,14637,14811,14984,15155,...
		15326,15496,15664,15833,16000,16166,16332,16496,16660,16823,...
		16984,17146,17307,17467,17626,17784,17942,18099,18256,18411,...
		18566,18720,18875,19028,19180,19332,19483,19634,19784,19934,...
		20083,20231,20379,20527,20674,20820,20966,21111,21256,21400,...
		21544,21688,21831,21973,22115,22256,22397,22538,22679,22818,...
		22958,23097,23235,23373,23511,23648,23785,23921,24058,24193,...
		24329,24463,24598,24733,24866,25000,25133,25266)
	declare $cur_volume := ($MAX_VOLUME*1000)/21544
	declare $cur_volume_verb := ($MAX_VOLUME_VERB*1000)/21544

	declare ui_slider $vol_kick (0,100)
	declare ui_slider $vol_snare (0,100)
	declare ui_slider $vol_hihat (0,100)
	declare ui_slider $vol_gen1 (0,100)
	declare ui_slider $vol_gen2 (0,100)
	declare ui_slider $vol_gen3 (0,100)
	declare ui_slider $vol_gen4 (0,100)
	declare ui_slider $vol_gen5 (0,100)
	declare ui_slider $vol_gen6 (0,100)
	declare ui_slider $vol_oh1 (0,100)
	declare ui_slider $vol_oh2 (0,100)
	declare ui_slider $vol_oh3 (0,100)
	declare ui_slider $vol_oh4 (0,100)
	declare ui_slider $vol_reverb (0,100)
	declare ui_slider $vol_master (0,100)
	
	declare %volfader_id[15]
	%volfader_id[0] := get_ui_id($vol_kick)
	%volfader_id[1] := get_ui_id($vol_snare)
	%volfader_id[2] := get_ui_id($vol_hihat)
	%volfader_id[3] := get_ui_id($vol_gen1)
	%volfader_id[4] := get_ui_id($vol_gen2)
	%volfader_id[5] := get_ui_id($vol_gen3)
	%volfader_id[6] := get_ui_id($vol_gen4)
	%volfader_id[7] := get_ui_id($vol_gen5)
	%volfader_id[8] := get_ui_id($vol_gen6)
	%volfader_id[9] := get_ui_id($vol_oh1)
	%volfader_id[10] := get_ui_id($vol_oh2)
	%volfader_id[11] := get_ui_id($vol_oh3)
	%volfader_id[12] := get_ui_id($vol_oh4)
	%volfader_id[13] := get_ui_id($vol_reverb)
	%volfader_id[14] := get_ui_id($vol_master)
	
	$x_offset := 18
	$y_offset := 217
	
	{close}
	$count := 0
	while($count < $NUM_CLOSE_MICS)
		set_control_par_str(%volfader_id[$count], $CONTROL_PAR_PICTURE, @volfader_picture)
		set_control_par_str(%volfader_id[$count], $CONTROL_PAR_HELP, !channel_names[$count] & " Channel Volume: Controls the output volume of the channel.")
		set_control_par_str(%volfader_id[$count], $CONTROL_PAR_AUTOMATION_NAME, !channel_names[$count] & " Vol")
		set_control_par(%volfader_id[$count], $CONTROL_PAR_MOUSE_BEHAVIOUR, $MB_SLIDER_VERT)
		set_control_par(%volfader_id[$count], $CONTROL_PAR_VALUE, 71)
		set_control_par(%volfader_id[$count], $CONTROL_PAR_DEFAULT_VALUE, 71)
		set_control_par(%volfader_id[$count], $CONTROL_PAR_POS_X, ($count*$CLOSE_CHAN_WIDTH)+$x_offset)
		set_control_par(%volfader_id[$count], $CONTROL_PAR_POS_Y, $y_offset)
		inc($count)
	end while
	
	if($NUM_CLOSE_MICS < 9)
		$count := $NUM_CLOSE_MICS
		while($count < 9)
			set_control_par(%volfader_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			set_control_par(%volfader_id[$count], $CONTROL_PAR_ALLOW_AUTOMATION, 0)
			inc($count)
		end while
	end if
	
	{oh}
	$count := 9
	while($count < ($NUM_OF_OH + 9))
		set_control_par_str(%volfader_id[$count], $CONTROL_PAR_PICTURE, @volfader_picture)
		set_control_par_str(%volfader_id[$count], $CONTROL_PAR_HELP, !channel_names[$count] & " Channel Volume: Controls the output volume of the channel.")
		set_control_par_str(%volfader_id[$count], $CONTROL_PAR_AUTOMATION_NAME, !channel_names[$count] & " Vol")
		set_control_par(%volfader_id[$count], $CONTROL_PAR_MOUSE_BEHAVIOUR, $MB_SLIDER_VERT)
		set_control_par(%volfader_id[$count], $CONTROL_PAR_VALUE, 71)
		set_control_par(%volfader_id[$count], $CONTROL_PAR_DEFAULT_VALUE, 71)
		set_control_par(%volfader_id[$count], $CONTROL_PAR_POS_X, (($count-9)*$KIT_CHAN_WIDTH)+$x_offset+$KIT_CHAN_CONTROL_OFFSET)
		set_control_par(%volfader_id[$count], $CONTROL_PAR_POS_Y, $y_offset)
		inc($count)
	end while
	
	if($NUM_OF_OH < 4)
		$count := $NUM_OF_OH + 9
		while($count < 13)
			set_control_par(%volfader_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			set_control_par(%volfader_id[$count], $CONTROL_PAR_ALLOW_AUTOMATION, 0)
			inc($count)
		end while
	end if
	
	$x_offset := 33
	
	{master buses}
	$count := 13
	while($count < 15)
		set_control_par_str(%volfader_id[$count], $CONTROL_PAR_PICTURE, @volfader_picture)
		set_control_par_str(%volfader_id[$count], $CONTROL_PAR_HELP, !channel_names[$count] & " Channel Volume: Controls the output volume of the bus.")
		set_control_par_str(%volfader_id[$count], $CONTROL_PAR_AUTOMATION_NAME, !channel_names[$count] & " Vol")
		set_control_par(%volfader_id[$count], $CONTROL_PAR_MOUSE_BEHAVIOUR, $MB_SLIDER_VERT)
		set_control_par(%volfader_id[$count], $CONTROL_PAR_VALUE, 71)
		set_control_par(%volfader_id[$count], $CONTROL_PAR_DEFAULT_VALUE, 71)
		set_control_par(%volfader_id[$count], $CONTROL_PAR_POS_X, (($count-13)*$MASTER_CHAN_WIDTH)+$x_offset+$MASTER_CHAN_OFFSET)
		set_control_par(%volfader_id[$count], $CONTROL_PAR_POS_Y, $y_offset)
		inc($count)
	end while

	make_persistent($vol_kick)
	make_persistent($vol_snare)
	make_persistent($vol_hihat)
	make_persistent($vol_gen1)
	make_persistent($vol_gen2)
	make_persistent($vol_gen3)
	make_persistent($vol_gen4)
	make_persistent($vol_gen5)
	make_persistent($vol_gen6)
	make_persistent($vol_oh1)
	make_persistent($vol_oh2)
	make_persistent($vol_oh3)
	make_persistent($vol_oh4)
	make_persistent($vol_reverb)
	make_persistent($vol_master)
	
{1.4.2 - meters}

	declare ui_level_meter $meter_l_kick
	declare ui_level_meter $meter_l_snare
	declare ui_level_meter $meter_l_hihat
	declare ui_level_meter $meter_l_gen1
	declare ui_level_meter $meter_l_gen2
	declare ui_level_meter $meter_l_gen3
	declare ui_level_meter $meter_l_gen4
	declare ui_level_meter $meter_l_gen5
	declare ui_level_meter $meter_l_gen6
	declare ui_level_meter $meter_l_oh1
	declare ui_level_meter $meter_l_oh2
	declare ui_level_meter $meter_l_oh3
	declare ui_level_meter $meter_l_oh4
	declare ui_level_meter $meter_l_master
	
	declare %meter_l_id[15]
	%meter_l_id[0] := get_ui_id($meter_l_kick)
	%meter_l_id[1] := get_ui_id($meter_l_snare)
	%meter_l_id[2] := get_ui_id($meter_l_hihat)
	%meter_l_id[3] := get_ui_id($meter_l_gen1)
	%meter_l_id[4] := get_ui_id($meter_l_gen2)
	%meter_l_id[5] := get_ui_id($meter_l_gen3)
	%meter_l_id[6] := get_ui_id($meter_l_gen4)
	%meter_l_id[7] := get_ui_id($meter_l_gen5)
	%meter_l_id[8] := get_ui_id($meter_l_gen6)
	%meter_l_id[9] := get_ui_id($meter_l_oh1)
	%meter_l_id[10] := get_ui_id($meter_l_oh2)
	%meter_l_id[11] := get_ui_id($meter_l_oh3)
	%meter_l_id[12] := get_ui_id($meter_l_oh4)
	%meter_l_id[13] := -1 {no meter for reverb}
	%meter_l_id[14] := get_ui_id($meter_l_master)

	declare ui_level_meter $meter_r_kick
	declare ui_level_meter $meter_r_snare
	declare ui_level_meter $meter_r_hihat
	declare ui_level_meter $meter_r_gen1
	declare ui_level_meter $meter_r_gen2
	declare ui_level_meter $meter_r_gen3
	declare ui_level_meter $meter_r_gen4
	declare ui_level_meter $meter_r_gen5
	declare ui_level_meter $meter_r_gen6
	declare ui_level_meter $meter_r_oh1
	declare ui_level_meter $meter_r_oh2
	declare ui_level_meter $meter_r_oh3
	declare ui_level_meter $meter_r_oh4
	declare ui_level_meter $meter_r_master
	
	declare %meter_r_id[15]
	%meter_r_id[0] := get_ui_id($meter_r_kick)
	%meter_r_id[1] := get_ui_id($meter_r_snare)
	%meter_r_id[2] := get_ui_id($meter_r_hihat)
	%meter_r_id[3] := get_ui_id($meter_r_gen1)
	%meter_r_id[4] := get_ui_id($meter_r_gen2)
	%meter_r_id[5] := get_ui_id($meter_r_gen3)
	%meter_r_id[6] := get_ui_id($meter_r_gen4)
	%meter_r_id[7] := get_ui_id($meter_r_gen5)
	%meter_r_id[8] := get_ui_id($meter_r_gen6)
	%meter_r_id[9] := get_ui_id($meter_r_oh1)
	%meter_r_id[10] := get_ui_id($meter_r_oh2)
	%meter_r_id[11] := get_ui_id($meter_r_oh3)
	%meter_r_id[12] := get_ui_id($meter_r_oh4)
	%meter_r_id[13] := -1 {no meter for reverb}
	%meter_r_id[14] := get_ui_id($meter_r_master)

	declare ui_slider $meter_board_kick (0,1)
	declare ui_slider $meter_board_snare (0,1)
	declare ui_slider $meter_board_hihat (0,1)
	declare ui_slider $meter_board_gen1 (0,1)
	declare ui_slider $meter_board_gen2 (0,1)
	declare ui_slider $meter_board_gen3 (0,1)
	declare ui_slider $meter_board_gen4 (0,1)
	declare ui_slider $meter_board_gen5 (0,1)
	declare ui_slider $meter_board_gen6 (0,1)
	declare ui_slider $meter_board_oh1 (0,1)
	declare ui_slider $meter_board_oh2 (0,1)
	declare ui_slider $meter_board_oh3 (0,1)
	declare ui_slider $meter_board_oh4 (0,1)
	declare ui_slider $meter_board_master (0,1)
	
	declare %meter_board_id[15]
	%meter_board_id[0] := get_ui_id($meter_board_kick)
	%meter_board_id[1] := get_ui_id($meter_board_snare)
	%meter_board_id[2] := get_ui_id($meter_board_hihat)
	%meter_board_id[3] := get_ui_id($meter_board_gen1)
	%meter_board_id[4] := get_ui_id($meter_board_gen2)
	%meter_board_id[5] := get_ui_id($meter_board_gen3)
	%meter_board_id[6] := get_ui_id($meter_board_gen4)
	%meter_board_id[7] := get_ui_id($meter_board_gen5)
	%meter_board_id[8] := get_ui_id($meter_board_gen6)
	%meter_board_id[9] := get_ui_id($meter_board_oh1)
	%meter_board_id[10] := get_ui_id($meter_board_oh2)
	%meter_board_id[11] := get_ui_id($meter_board_oh3)
	%meter_board_id[12] := get_ui_id($meter_board_oh4)
	%meter_board_id[13] := -1 {no meter for reverb}
	%meter_board_id[14] := get_ui_id($meter_board_master)
	
	$x_offset := 45
	$y_offset := 237
	
	$count := 0
	while($count < $NUM_CLOSE_MICS)
		{left}
		attach_level_meter(%meter_l_id[$count],-1,-1,0,$count)
		set_control_par(%meter_l_id[$count],$CONTROL_PAR_VERTICAL,1)
		set_control_par(%meter_l_id[$count],$CONTROL_PAR_WIDTH,2)
		set_control_par(%meter_l_id[$count],$CONTROL_PAR_HEIGHT,81)
		set_control_par(%meter_l_id[$count],$CONTROL_PAR_POS_Y,$y_offset)
		set_control_par(%meter_l_id[$count],$CONTROL_PAR_POS_X,($count*$CLOSE_CHAN_WIDTH) + $x_offset)
		
		{right}
		attach_level_meter(%meter_r_id[$count],-1,-1,1,$count)
		set_control_par(%meter_r_id[$count],$CONTROL_PAR_VERTICAL,1)
		set_control_par(%meter_r_id[$count],$CONTROL_PAR_WIDTH,2)
		set_control_par(%meter_r_id[$count],$CONTROL_PAR_HEIGHT,81)
		set_control_par(%meter_r_id[$count],$CONTROL_PAR_POS_Y,$y_offset)
		set_control_par(%meter_r_id[$count],$CONTROL_PAR_POS_X,($count*$CLOSE_CHAN_WIDTH) + $x_offset + 2)
		
		{boarder}
		set_control_par_str(%meter_board_id[$count],$CONTROL_PAR_PICTURE,"NID_mixer_overlay_meter")
		set_control_par(%meter_board_id[$count],$CONTROL_PAR_POS_Y,$y_offset - 2)
		set_control_par(%meter_board_id[$count],$CONTROL_PAR_POS_X,($count*$CLOSE_CHAN_WIDTH) + $x_offset -2)
		inc($count)
	end while
	
	if($NUM_CLOSE_MICS < 9)
		$count := $NUM_CLOSE_MICS
		while($count < 9)
			set_control_par(%meter_r_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			set_control_par(%meter_l_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			set_control_par(%meter_board_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			inc($count)
		end while
	end if
	
	{oh}
	$count := 9
	while($count < ($NUM_OF_OH + 9))
		{left}
		attach_level_meter(%meter_l_id[$count],-1,-1,0,$count)
		set_control_par(%meter_l_id[$count],$CONTROL_PAR_VERTICAL,1)
		set_control_par(%meter_l_id[$count],$CONTROL_PAR_WIDTH,2)
		set_control_par(%meter_l_id[$count],$CONTROL_PAR_HEIGHT,81)
		set_control_par(%meter_l_id[$count],$CONTROL_PAR_POS_Y,$y_offset)
		set_control_par(%meter_l_id[$count],$CONTROL_PAR_POS_X,$KIT_CHAN_CONTROL_OFFSET + (($count-9)*$KIT_CHAN_WIDTH) + $x_offset)
		
		{right}
		attach_level_meter(%meter_r_id[$count],-1,-1,1,$count)
		set_control_par(%meter_r_id[$count],$CONTROL_PAR_VERTICAL,1)
		set_control_par(%meter_r_id[$count],$CONTROL_PAR_WIDTH,2)
		set_control_par(%meter_r_id[$count],$CONTROL_PAR_HEIGHT,81)
		set_control_par(%meter_r_id[$count],$CONTROL_PAR_POS_Y,$y_offset)
		set_control_par(%meter_r_id[$count],$CONTROL_PAR_POS_X,$KIT_CHAN_CONTROL_OFFSET + (($count-9)*$KIT_CHAN_WIDTH) + $x_offset + 2)
		
		{boarder}
		set_control_par_str(%meter_board_id[$count],$CONTROL_PAR_PICTURE,"NID_mixer_overlay_meter")
		set_control_par(%meter_board_id[$count],$CONTROL_PAR_POS_Y,$y_offset-2)
		set_control_par(%meter_board_id[$count],$CONTROL_PAR_POS_X,$KIT_CHAN_CONTROL_OFFSET + (($count-9)*$KIT_CHAN_WIDTH) + $x_offset -2)
		inc($count)
	end while
	
	if($NUM_OF_OH < 4)
		$count := $NUM_OF_OH + 9
		while($count < 13)
			set_control_par(%meter_r_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			set_control_par(%meter_l_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			set_control_par(%meter_board_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			inc($count)
		end while
	end if
	
	set_control_par(%meter_r_id[14], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
	set_control_par(%meter_l_id[14], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
	set_control_par(%meter_board_id[14], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)

{1.5 -- MIXER - LABELS/SELECTORS}

	declare ui_button $label_kick
	declare ui_button $label_snare
	declare ui_button $label_hihat
	declare ui_button $label_gen1
	declare ui_button $label_gen2
	declare ui_button $label_gen3
	declare ui_button $label_gen4
	declare ui_button $label_gen5
	declare ui_button $label_gen6
	declare ui_button $label_oh1
	declare ui_button $label_oh2
	declare ui_button $label_oh3
	declare ui_button $label_oh4
	declare ui_button $label_reverb
	declare ui_button $label_master
	
	declare %chanlabel_id[15]
	%chanlabel_id[0] := get_ui_id($label_kick)
	%chanlabel_id[1] := get_ui_id($label_snare)
	%chanlabel_id[2] := get_ui_id($label_hihat)
	%chanlabel_id[3] := get_ui_id($label_gen1)
	%chanlabel_id[4] := get_ui_id($label_gen2)
	%chanlabel_id[5] := get_ui_id($label_gen3)
	%chanlabel_id[6] := get_ui_id($label_gen4)
	%chanlabel_id[7] := get_ui_id($label_gen5)
	%chanlabel_id[8] := get_ui_id($label_gen6)
	%chanlabel_id[9] := get_ui_id($label_oh1)
	%chanlabel_id[10] := get_ui_id($label_oh2)
	%chanlabel_id[11] := get_ui_id($label_oh3)
	%chanlabel_id[12] := get_ui_id($label_oh4)
	%chanlabel_id[13] := get_ui_id($label_reverb)
	%chanlabel_id[14] := get_ui_id($label_master)
	
	$x_offset := 6
	$y_offset := 339
	
	{close}
	$count := 0
	while($count < $NUM_CLOSE_MICS)
		set_control_par_str(%chanlabel_id[$count], $CONTROL_PAR_PICTURE, !chanlabel_pictures[$count])
		set_control_par_str(%chanlabel_id[$count], $CONTROL_PAR_HELP, !channel_names[$count] & " Channel Settings Display: Shows the effect and settings controls for the channel.")
		set_control_par_str(%chanlabel_id[$count], $CONTROL_PAR_TEXT, "")
		set_control_par(%chanlabel_id[$count], $CONTROL_PAR_TEXT_ALIGNMENT, 1)
		set_control_par(%chanlabel_id[$count], $CONTROL_PAR_TEXTPOS_Y, 1)
		set_control_par(%chanlabel_id[$count], $CONTROL_PAR_HEIGHT, 27)
		set_control_par(%chanlabel_id[$count], $CONTROL_PAR_WIDTH, 48)
		set_control_par(%chanlabel_id[$count], $CONTROL_PAR_POS_X, ($count*$CLOSE_CHAN_WIDTH)+$x_offset)
		set_control_par(%chanlabel_id[$count], $CONTROL_PAR_POS_Y, $y_offset)
		inc($count)
	end while
	
	if($NUM_CLOSE_MICS < 9)
		$count := $NUM_CLOSE_MICS
		while($count < 9)
			set_control_par(%chanlabel_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			inc($count)
		end while
	end if
	
	declare %oh_select_width[5] := (-1,$MASTER_CHAN_WIDTH + 5,$MASTER_CHAN_WIDTH + 5,68,48)
	
	{oh}
	$count := 9
	while($count < ($NUM_OF_OH + 9))
		set_control_par_str(%chanlabel_id[$count], $CONTROL_PAR_PICTURE, !chanlabel_pictures[$count])
		set_control_par_str(%chanlabel_id[$count], $CONTROL_PAR_HELP, !channel_names[$count] & " Channel Settings Display: Shows the effect and settings controls for the channel.")
		set_control_par_str(%chanlabel_id[$count], $CONTROL_PAR_TEXT, "")
		set_control_par(%chanlabel_id[$count], $CONTROL_PAR_TEXT_ALIGNMENT, 1)
		set_control_par(%chanlabel_id[$count], $CONTROL_PAR_TEXTPOS_Y, 1)
		set_control_par(%chanlabel_id[$count], $CONTROL_PAR_HEIGHT, 27)
		set_control_par(%chanlabel_id[$count], $CONTROL_PAR_WIDTH, %oh_select_width[$NUM_OF_OH])
		if($NUM_OF_OH = 3)
			set_control_par(%chanlabel_id[$count], $CONTROL_PAR_POS_X, (($count-9)*$KIT_CHAN_WIDTH)+$KIT_CHAN_OFFSET-2)
		else
			set_control_par(%chanlabel_id[$count], $CONTROL_PAR_POS_X, (($count-9)*$KIT_CHAN_WIDTH)+$KIT_CHAN_OFFSET-3)
		end if
		set_control_par(%chanlabel_id[$count], $CONTROL_PAR_POS_Y, $y_offset)
		inc($count)
	end while
	
	if($NUM_OF_OH < 4)
		$count := $NUM_OF_OH + 9
		while($count < 13)
			set_control_par(%chanlabel_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			inc($count)
		end while
	end if
	
	{master buses}
	$count := 13
	while($count < 15)
		set_control_par_str(%chanlabel_id[$count], $CONTROL_PAR_PICTURE, !chanlabel_pictures[$count])
		set_control_par_str(%chanlabel_id[$count], $CONTROL_PAR_HELP, !channel_names[$count] & " Channel Settings Display: Shows the effect and settings controls for the bus.")
		set_control_par_str(%chanlabel_id[$count], $CONTROL_PAR_TEXT, "")
		set_control_par(%chanlabel_id[$count], $CONTROL_PAR_TEXT_ALIGNMENT, 1)
		set_control_par(%chanlabel_id[$count], $CONTROL_PAR_TEXTPOS_Y, 1)
		set_control_par(%chanlabel_id[$count], $CONTROL_PAR_HEIGHT, 27)
		set_control_par(%chanlabel_id[$count], $CONTROL_PAR_WIDTH, $MASTER_CHAN_WIDTH + 5)
		set_control_par(%chanlabel_id[$count], $CONTROL_PAR_POS_X, (($count-13)*$MASTER_CHAN_WIDTH)+$MASTER_CHAN_OFFSET-2)
		set_control_par(%chanlabel_id[$count], $CONTROL_PAR_POS_Y, $y_offset)
		inc($count)
	end while
	
	$count := 0
	while($count < 15)
		set_control_par(%chanlabel_id[$count], $CONTROL_PAR_VALUE, %selector_values[$count])
		inc($count)
	end while
	
{1.6 -- MIXER - KIT/BUS DISPLAY}

	{functionality}

	declare %kitmic_control_id[40]
	declare %bus_control_id[11]
	
	$count := 0
	$count2 := 0
	while($count2 < 40)
		%kitmic_control_id[$count2] := %send_id[9 + $count]
		%kitmic_control_id[$count2+1] := %pan_id[9 + $count]
		%kitmic_control_id[$count2+2] := %mute_id[9 + $count]
		%kitmic_control_id[$count2+3] := %solo_id[9 + $count]
		%kitmic_control_id[$count2+4] := %volfader_id[9 + $count]
		%kitmic_control_id[$count2+5] := %chanlabel_id[9 + $count]
		%kitmic_control_id[$count2+6] := %chan_bg_id[9 + $count]
		%kitmic_control_id[$count2+7] := %meter_l_id[9 + $count]
		%kitmic_control_id[$count2+8] := %meter_r_id[9 + $count]
		%kitmic_control_id[$count2+9] := %meter_board_id[9 + $count]
		$count2 := $count2 + 10
		inc($count)
	end while
	
	%bus_control_id[0] := get_ui_id($lr_swap)
	%bus_control_id[1] := get_ui_id($send_master)
	%bus_control_id[2] := get_ui_id($width_master)
	%bus_control_id[3] := get_ui_id($mute_reverb)
	%bus_control_id[4] := get_ui_id($solo_reverb)
	%bus_control_id[5] := get_ui_id($vol_reverb)
	%bus_control_id[6] := get_ui_id($vol_master)
	%bus_control_id[7] := get_ui_id($label_reverb)
	%bus_control_id[8] := get_ui_id($label_master)
	%bus_control_id[9] := %chan_bg_id[13]
	%bus_control_id[10] := %chan_bg_id[14]
	
	{GUI}
	
	declare ui_button $kitmic_view
	declare ui_button $buses_view
	
	$kitmic_view:= 1		
	$buses_view	:= 0
	make_instr_persistent($kitmic_view)
	make_instr_persistent($buses_view)
	{make_persistent($kitmic_view)
	make_persistent($buses_view)}
	{read_persistent_var($kitmic_view)
	read_persistent_var($buses_view)}

	declare $kitmic_view_value
	declare $buses_view_value

	set_text($kitmic_view,"")
	set_text($buses_view,"")
	
	move_control_px($kitmic_view,475,64)
	move_control_px($buses_view,531,64)
	
	set_control_par_str(get_ui_id($kitmic_view),$CONTROL_PAR_PICTURE,"NID_mixer_btn_kitmics")
	set_control_par_str(get_ui_id($buses_view),$CONTROL_PAR_PICTURE,"NID_mixer_btn_buses")
	set_control_par_str(get_ui_id($kitmic_view),$CONTROL_PAR_HELP,"Kit Mic View: Displays the mixer controls for the kit channels (e.g. overheads and room microphones)")
	set_control_par_str(get_ui_id($buses_view),$CONTROL_PAR_HELP,"Bus View: Displays the mixer controls for the Master and Reverb bus outputs")
	set_control_par(get_ui_id($kitmic_view),$CONTROL_PAR_WIDTH,56)
	set_control_par(get_ui_id($buses_view),$CONTROL_PAR_WIDTH,56)
	set_control_par(get_ui_id($kitmic_view),$CONTROL_PAR_HEIGHT,25)
	set_control_par(get_ui_id($buses_view),$CONTROL_PAR_HEIGHT,25)
	
	if($kitmic_view = 1)
		$count := 0
		while($count < num_elements(%bus_control_id))
			set_control_par(%bus_control_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			inc($count)
		end while
	else
		$count := 0
		while($count < $NUM_OF_OH*10)
			set_control_par(%kitmic_control_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			inc($count)
		end while	
	end if
	
	{1.7 -- AUTOMATION IDs}
	if($SET_AUTOMATION = 1)
		$count := 0
		while ($count < 15)
			select ($count)
				case (0)
					set_control_par(%volfader_id[$count],$CONTROL_PAR_AUTOMATION_ID,0)
					set_control_par(%pan_id[$count],$CONTROL_PAR_AUTOMATION_ID,1)
					set_control_par(%send_id[$count],$CONTROL_PAR_AUTOMATION_ID,2)
					set_control_par(%solo_id[$count],$CONTROL_PAR_AUTOMATION_ID,3)
					set_control_par(%mute_id[$count],$CONTROL_PAR_AUTOMATION_ID,4)
				case (1)
					set_control_par(%volfader_id[$count],$CONTROL_PAR_AUTOMATION_ID,5)
					set_control_par(%pan_id[$count],$CONTROL_PAR_AUTOMATION_ID,6)
					set_control_par(%send_id[$count],$CONTROL_PAR_AUTOMATION_ID,7)
					set_control_par(%solo_id[$count],$CONTROL_PAR_AUTOMATION_ID,8)
					set_control_par(%mute_id[$count],$CONTROL_PAR_AUTOMATION_ID,9)
				case (2)
					set_control_par(%volfader_id[$count],$CONTROL_PAR_AUTOMATION_ID,10)
					set_control_par(%pan_id[$count],$CONTROL_PAR_AUTOMATION_ID,11)
					set_control_par(%send_id[$count],$CONTROL_PAR_AUTOMATION_ID,12)
					set_control_par(%solo_id[$count],$CONTROL_PAR_AUTOMATION_ID,13)
					set_control_par(%mute_id[$count],$CONTROL_PAR_AUTOMATION_ID,14)
				case (3)
					set_control_par(%volfader_id[$count],$CONTROL_PAR_AUTOMATION_ID,15)
					set_control_par(%pan_id[$count],$CONTROL_PAR_AUTOMATION_ID,16)
					set_control_par(%send_id[$count],$CONTROL_PAR_AUTOMATION_ID,17)
					set_control_par(%solo_id[$count],$CONTROL_PAR_AUTOMATION_ID,18)
					set_control_par(%mute_id[$count],$CONTROL_PAR_AUTOMATION_ID,19)
				case (4)
					set_control_par(%volfader_id[$count],$CONTROL_PAR_AUTOMATION_ID,20)
					set_control_par(%pan_id[$count],$CONTROL_PAR_AUTOMATION_ID,21)
					set_control_par(%send_id[$count],$CONTROL_PAR_AUTOMATION_ID,22)
					set_control_par(%solo_id[$count],$CONTROL_PAR_AUTOMATION_ID,23)
					set_control_par(%mute_id[$count],$CONTROL_PAR_AUTOMATION_ID,24)
				case (5)
					set_control_par(%volfader_id[$count],$CONTROL_PAR_AUTOMATION_ID,25)
					set_control_par(%pan_id[$count],$CONTROL_PAR_AUTOMATION_ID,26)
					set_control_par(%send_id[$count],$CONTROL_PAR_AUTOMATION_ID,27)
					set_control_par(%solo_id[$count],$CONTROL_PAR_AUTOMATION_ID,28)
					set_control_par(%mute_id[$count],$CONTROL_PAR_AUTOMATION_ID,29)
				case (6)
					set_control_par(%volfader_id[$count],$CONTROL_PAR_AUTOMATION_ID,30)
					set_control_par(%pan_id[$count],$CONTROL_PAR_AUTOMATION_ID,31)
					set_control_par(%send_id[$count],$CONTROL_PAR_AUTOMATION_ID,32)
					set_control_par(%solo_id[$count],$CONTROL_PAR_AUTOMATION_ID,33)
					set_control_par(%mute_id[$count],$CONTROL_PAR_AUTOMATION_ID,34)
				case (7)
					set_control_par(%volfader_id[$count],$CONTROL_PAR_AUTOMATION_ID,35)
					set_control_par(%pan_id[$count],$CONTROL_PAR_AUTOMATION_ID,36)
					set_control_par(%send_id[$count],$CONTROL_PAR_AUTOMATION_ID,37)
					set_control_par(%solo_id[$count],$CONTROL_PAR_AUTOMATION_ID,38)
					set_control_par(%mute_id[$count],$CONTROL_PAR_AUTOMATION_ID,39)
				case (8)
					{set_control_par(%volfader_id[$count],$CONTROL_PAR_AUTOMATION_ID,40)
					set_control_par(%pan_id[$count],$CONTROL_PAR_AUTOMATION_ID,41)
					set_control_par(%send_id[$count],$CONTROL_PAR_AUTOMATION_ID,42)
					set_control_par(%solo_id[$count],$CONTROL_PAR_AUTOMATION_ID,43)
					set_control_par(%mute_id[$count],$CONTROL_PAR_AUTOMATION_ID,44)}
				case (9)
					set_control_par(%volfader_id[$count],$CONTROL_PAR_AUTOMATION_ID,40)
					set_control_par(%pan_id[$count],$CONTROL_PAR_AUTOMATION_ID,41)
					set_control_par(%send_id[$count],$CONTROL_PAR_AUTOMATION_ID,42)
					set_control_par(%solo_id[$count],$CONTROL_PAR_AUTOMATION_ID,43)
					set_control_par(%mute_id[$count],$CONTROL_PAR_AUTOMATION_ID,44)
				case (10)
					set_control_par(%volfader_id[$count],$CONTROL_PAR_AUTOMATION_ID,45)
					set_control_par(%pan_id[$count],$CONTROL_PAR_AUTOMATION_ID,46)
					set_control_par(%send_id[$count],$CONTROL_PAR_AUTOMATION_ID,47)
					set_control_par(%solo_id[$count],$CONTROL_PAR_AUTOMATION_ID,48)
					set_control_par(%mute_id[$count],$CONTROL_PAR_AUTOMATION_ID,49)
				case (11)
					set_control_par(%volfader_id[$count],$CONTROL_PAR_AUTOMATION_ID,50)
					set_control_par(%pan_id[$count],$CONTROL_PAR_AUTOMATION_ID,51)
					set_control_par(%send_id[$count],$CONTROL_PAR_AUTOMATION_ID,52)
					set_control_par(%solo_id[$count],$CONTROL_PAR_AUTOMATION_ID,53)
					set_control_par(%mute_id[$count],$CONTROL_PAR_AUTOMATION_ID,54)
				case (12)
					set_control_par(%volfader_id[$count],$CONTROL_PAR_AUTOMATION_ID,55)
					set_control_par(%pan_id[$count],$CONTROL_PAR_AUTOMATION_ID,56)
					set_control_par(%send_id[$count],$CONTROL_PAR_AUTOMATION_ID,57)
					set_control_par(%solo_id[$count],$CONTROL_PAR_AUTOMATION_ID,58)
					set_control_par(%mute_id[$count],$CONTROL_PAR_AUTOMATION_ID,59)
				case (13){verb}
					set_control_par(%volfader_id[$count],$CONTROL_PAR_AUTOMATION_ID,60)
					{set_control_par(%pan_id[$count],$CONTROL_PAR_AUTOMATION_ID,1)}
					{set_control_par(%send_id[$count],$CONTROL_PAR_AUTOMATION_ID,2)}
					set_control_par(%solo_id[$count],$CONTROL_PAR_AUTOMATION_ID,61)
					set_control_par(%mute_id[$count],$CONTROL_PAR_AUTOMATION_ID,62)
				case (14){master}
					set_control_par(%volfader_id[$count],$CONTROL_PAR_AUTOMATION_ID,63)
					set_control_par(%pan_id[$count],$CONTROL_PAR_AUTOMATION_ID,64)
					set_control_par(%send_id[$count],$CONTROL_PAR_AUTOMATION_ID,65)
					{set_control_par(%solo_id[$count],$CONTROL_PAR_AUTOMATION_ID,3)}
					{set_control_par(%mute_id[$count],$CONTROL_PAR_AUTOMATION_ID,4)}
			end select
			inc($count)
		end while
	end if
	
	
{2 -- FX}
{2.0 -- FX - SELECT & ON/OFF}

	declare ui_button $select_eq
	declare ui_button $select_trans
	declare ui_button $select_comp
	declare ui_button $select_tape
	declare ui_button $select_settings

	declare ui_button $onoff_eq
	declare ui_button $onoff_trans
	declare ui_button $onoff_comp
	declare ui_button $onoff_tape

	declare ui_button $select_overlay1
	declare ui_button $select_overlay2
	declare ui_button $select_overlay3
	declare ui_button $select_overlay4
	
	declare ui_label $fx_bg (1,1)
	
	declare %select_onoff_id[13]
	%select_onoff_id[0] := get_ui_id($select_eq)
	%select_onoff_id[1] := get_ui_id($select_trans)
	%select_onoff_id[2] := get_ui_id($select_comp)
	%select_onoff_id[3] := get_ui_id($select_tape)
	%select_onoff_id[4] := get_ui_id($select_settings)
	%select_onoff_id[5] := get_ui_id($onoff_eq)
	%select_onoff_id[6] := get_ui_id($onoff_trans)
	%select_onoff_id[7] := get_ui_id($onoff_comp)
	%select_onoff_id[8] := get_ui_id($onoff_tape)
	%select_onoff_id[9] := get_ui_id($select_overlay1)
	%select_onoff_id[10] := get_ui_id($select_overlay2)
	%select_onoff_id[11] := get_ui_id($select_overlay3)
	%select_onoff_id[12] := get_ui_id($select_overlay4)
	
	declare %onoff_arr[4*15]
	make_persistent(%onoff_arr)
	read_persistent_var(%onoff_arr)
	
	declare %routing_state[15]
	make_persistent(%routing_state)
	read_persistent_var(%routing_state)
	
	set_control_par(%select_onoff_id[$fx_view],$CONTROL_PAR_VALUE,1)
	
	set_control_par_str(%select_onoff_id[0],$CONTROL_PAR_PICTURE,"NID_mixer_btn_eqtab")
	set_control_par_str(%select_onoff_id[1],$CONTROL_PAR_PICTURE,"NID_mixer_btn_transtab")
	set_control_par_str(%select_onoff_id[2],$CONTROL_PAR_PICTURE,"NID_mixer_btn_comptab")
	set_control_par_str(%select_onoff_id[3],$CONTROL_PAR_PICTURE,"NID_mixer_btn_tapetab")
	set_control_par_str(%select_onoff_id[4],$CONTROL_PAR_PICTURE,"NID_mixer_btn_settingstab")
	
	set_control_par_str(%select_onoff_id[9],$CONTROL_PAR_PICTURE,"NID_mixer_overlay_fxtab0")
	set_control_par_str(%select_onoff_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_overlay_fxtab1")
	set_control_par_str(%select_onoff_id[11],$CONTROL_PAR_PICTURE,"NID_mixer_overlay_fxtab2")
	set_control_par_str(%select_onoff_id[12],$CONTROL_PAR_PICTURE,"NID_mixer_overlay_fxtab3")
	
	set_control_par_str(%select_onoff_id[0],$CONTROL_PAR_HELP,"EQ: Shows the EQ Controls for the channel.")
	set_control_par_str(%select_onoff_id[1],$CONTROL_PAR_HELP,"Trans: Shows the Transient Master controls for the channel.")
	set_control_par_str(%select_onoff_id[2],$CONTROL_PAR_HELP,"Comp: Shows the Compressor controls for the channel.")
	set_control_par_str(%select_onoff_id[3],$CONTROL_PAR_HELP,"Tape: Shows the Tape Saturator controls for the channel.")
	set_control_par_str(%select_onoff_id[4],$CONTROL_PAR_HELP,"Settings: Shows the settings controls for the chanenl.")
	
	set_control_par_str(%select_onoff_id[5],$CONTROL_PAR_HELP,"EQ on/off: Toggles the EQ effect for the channel.")
	set_control_par_str(%select_onoff_id[6],$CONTROL_PAR_HELP,"Trans on/off: Toggles the Transient Master effect for the channel.")
	set_control_par_str(%select_onoff_id[7],$CONTROL_PAR_HELP,"Comp on/off: Toggles the Compressor effect for the channel.")
	set_control_par_str(%select_onoff_id[8],$CONTROL_PAR_HELP,"Tape on/off: Toggles the Tape effect for the channel.")
	
	$x_offset := 15
	$y_offset := 487
	
	declare %tab_x_adjust[5] := (-8,0,0,0,0)
	declare %tab_order[5*4] := (...
	1,2,3,4,0, ...
	1,3,2,4,0, ...
	4,1,2,3,0, ...
	4,2,1,3,0)
	
	$count := 0
	while($count < 5)
		set_control_par_str(%select_onoff_id[$count],$CONTROL_PAR_TEXT,"")
		set_control_par(%select_onoff_id[$count],$CONTROL_PAR_HEIGHT,30)
		set_control_par(%select_onoff_id[$count],$CONTROL_PAR_WIDTH,80)
		set_control_par(%select_onoff_id[$count],$CONTROL_PAR_POS_X,$x_offset + (%tab_order[(%routing_state[$cur_selection]*5) + $count]*70) + %tab_x_adjust[%tab_order[(%routing_state[$cur_selection]*5) + $count]])
		set_control_par(%select_onoff_id[$count],$CONTROL_PAR_POS_Y,$y_offset)
		inc($count)
	end while
	
	$count := 5
	while($count < 9)
		set_control_par(%select_onoff_id[$count],$CONTROL_PAR_VALUE,%onoff_arr[($cur_selection*4) + ($count-5)])
		set_control_par_str(%select_onoff_id[$count],$CONTROL_PAR_TEXT,"")
		set_control_par_str(%select_onoff_id[$count],$CONTROL_PAR_PICTURE,@fx_led)
		set_control_par(%select_onoff_id[$count],$CONTROL_PAR_HEIGHT,25)
		set_control_par(%select_onoff_id[$count],$CONTROL_PAR_WIDTH,25)
		set_control_par(%select_onoff_id[$count],$CONTROL_PAR_POS_X,$x_offset + (%tab_order[(%routing_state[$cur_selection]*5) + $count - 5]*70) + %tab_x_adjust[%tab_order[(%routing_state[$cur_selection]*5) + $count - 5]] + 53)
		set_control_par(%select_onoff_id[$count],$CONTROL_PAR_POS_Y,$y_offset + 3)
		inc($count)
	end while
	
	$count := 9
	while($count < 13)
		set_control_par(%select_onoff_id[$count],$CONTROL_PAR_POS_X,$x_offset + (($count-8)*70))
		set_control_par(%select_onoff_id[$count],$CONTROL_PAR_POS_Y,$y_offset)
		set_control_par(%select_onoff_id[$count],$CONTROL_PAR_HEIGHT,30)
		set_control_par(%select_onoff_id[$count],$CONTROL_PAR_WIDTH,20)
		set_control_par_str(%select_onoff_id[$count],$CONTROL_PAR_TEXT,"")
		inc($count)
	end while
	
	if($cur_selection = 13)
		$count := 0
		while($count < num_elements(%select_onoff_id))
			set_control_par(%select_onoff_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			inc($count)
		end while
	end if

	set_control_par_str(get_ui_id($fx_bg),$CONTROL_PAR_TEXT,"")
	set_control_par_str(get_ui_id($fx_bg),$CONTROL_PAR_PICTURE,"NID_mixer_lbl_fxbg")
	move_control_px($fx_bg,1,365)
	
	declare %fx_bg_state[6] := (0,3,1,2,4,5)
	
	if($cur_selection = 13)
		set_control_par(get_ui_id($fx_bg),$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[5])
	else
		set_control_par(get_ui_id($fx_bg),$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[$fx_view])
	end if
		
{2.1 -- FX - EQ}

	declare ui_slider $eq_lf_freq (0,1000000)
	declare ui_slider $eq_lf_db (0,1000000)
	declare ui_slider $eq_lmf_q (0,1000000)
	declare ui_slider $eq_lmf_db (0,1000000)
	declare ui_slider $eq_lmf_freq (0,1000000)
	declare ui_slider $eq_hmf_q (0,1000000)
	declare ui_slider $eq_hmf_db (0,1000000)
	declare ui_slider $eq_hmf_freq (0,1000000)
	declare ui_slider $eq_hf_db (0,1000000)
	declare ui_slider $eq_hf_freq (0,1000000)
	declare ui_slider $eq_output (0,797000)
	declare ui_button $eq_lf_bell
	declare ui_button $eq_hf_bell
	
	declare %eq_control_id[13]
	%eq_control_id[0] := get_ui_id($eq_lf_freq)
	%eq_control_id[1] := get_ui_id($eq_lf_db)
	%eq_control_id[2] := get_ui_id($eq_lmf_q)
	%eq_control_id[3] := get_ui_id($eq_lmf_db)
	%eq_control_id[4] := get_ui_id($eq_lmf_freq)
	%eq_control_id[5] := get_ui_id($eq_hmf_q)
	%eq_control_id[6] := get_ui_id($eq_hmf_db)
	%eq_control_id[7] := get_ui_id($eq_hmf_freq)
	%eq_control_id[8] := get_ui_id($eq_hf_db)
	%eq_control_id[9] := get_ui_id($eq_hf_freq)
	%eq_control_id[10] := get_ui_id($eq_output)
	%eq_control_id[11] := get_ui_id($eq_lf_bell)
	%eq_control_id[12] := get_ui_id($eq_hf_bell)
	
	set_control_help($eq_lf_freq,"Low Band Freq: Sets the frequency of the low EQ band.")
	set_control_help($eq_lf_db,"Low Band Level: Sets the level of the low EQ band.")
	set_control_help($eq_lmf_q,"Low-Mid Band Q: Sets the bandwidth of the low-mid EQ band.")
	set_control_help($eq_lmf_db,"Low-Mid Band Level: Sets the level of the low-mid EQ band.")
	set_control_help($eq_lmf_freq,"Low-Mid Band Freq: Sets the frequency of the low-mid EQ band.")
	set_control_help($eq_hmf_q,"High-Mid Band Q: Sets the bandwidth of the high-mid EQ band.")
	set_control_help($eq_hmf_db,"High-Mid Band Level: Sets the level of the high-mid EQ band.")
	set_control_help($eq_hmf_freq,"High-Mid Band Freq: Sets the frequency of the high-mid EQ band.")
	set_control_help($eq_hf_db,"High Band Level: Sets the level of the high EQ band.")
	set_control_help($eq_hf_freq,"High Band Freq: Sets the frequency of the high EQ band.")
	set_control_help($eq_output,"Output Volume: Controls the output level of the effect.")
	set_control_help($eq_lf_bell,"Low Band Bell: Changes the shape of the low EQ band. Activating the control sets the response as a bell shape EQ, deactivating it sets the shape to a shelf.")
	set_control_help($eq_hf_bell,"High Band Bell: Changes the shape of the high EQ band. Activating the control sets the response as a bell shape EQ, deactivating it sets the shape to a shelf.")
	
	declare %eq_y_pos[11] := (1,0,1,0,1,1,0,1,0,1,1)
	declare %eq_x_pos[11] := (0 ,51,	103,154,205,	275,326,377,	429,480,	550)
	
	declare %eq_data[13*15]
	$count := 0
	while($count < num_elements(%eq_data))
		%eq_data[$count] := 500000
		inc($count)
	end while
	$count := 0
	while($count < 15)
		%eq_data[($count*13) + 11] := 0
		%eq_data[($count*13) + 12] := 0
		inc($count)
	end while
	
	make_persistent(%eq_data)
	read_persistent_var(%eq_data)
	
	$count := 0
	while($count < 11)
		set_control_par(%eq_control_id[$count],$CONTROL_PAR_VALUE,%eq_data[($cur_selection*13) + $count])
		set_control_par(%eq_control_id[$count],$CONTROL_PAR_DEFAULT_VALUE,500000)
		set_control_par(%eq_control_id[$count],$CONTROL_PAR_POS_X,21 + %eq_x_pos[$count])
		set_control_par(%eq_control_id[$count],$CONTROL_PAR_POS_Y,379 + (%eq_y_pos[$count]*50))
		set_control_par(%eq_control_id[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,$MB_KNOB_SMALL)
		set_control_par(%eq_control_id[$count],$CONTROL_PAR_ALLOW_AUTOMATION,0)
		select($count)
			case 0 to 1
				set_control_par_str(%eq_control_id[$count],$CONTROL_PAR_PICTURE,@fx_knob_blk)
			case 2 to 4
				set_control_par_str(%eq_control_id[$count],$CONTROL_PAR_PICTURE,@fx_knob_blue)
			case 5 to 7
				set_control_par_str(%eq_control_id[$count],$CONTROL_PAR_PICTURE,@fx_knob_red)
			case 8 to 9
				set_control_par_str(%eq_control_id[$count],$CONTROL_PAR_PICTURE,@fx_knob_ylo)
			case 10
				set_control_par_str(%eq_control_id[$count],$CONTROL_PAR_PICTURE,@fx_knob_blk)
		end select
		inc($count)
	end while
	
	set_control_par(%eq_control_id[10],$CONTROL_PAR_DEFAULT_VALUE,397000)
	
	$count := 11
	while($count < 13)
		set_control_par(%eq_control_id[$count],$CONTROL_PAR_VALUE,%eq_data[($cur_selection*13) + $count])
		set_control_par_str(%eq_control_id[$count],$CONTROL_PAR_PICTURE,@eq_btn)
		set_control_par_str(%eq_control_id[$count],$CONTROL_PAR_TEXT,"")
		set_control_par(%eq_control_id[$count],$CONTROL_PAR_POS_X,31+(($count-11)*480))
		set_control_par(%eq_control_id[$count],$CONTROL_PAR_POS_Y,388)
		set_control_par(%eq_control_id[$count],$CONTROL_PAR_HEIGHT,30)
		set_control_par(%eq_control_id[$count],$CONTROL_PAR_WIDTH,30)
		inc($count)
	end while
	
	if($cur_selection = 13 or $fx_view # $VIEW_EQ)
		$count := 0
		while($count < num_elements(%eq_control_id))
			set_control_par(%eq_control_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			inc($count)
		end while
	end if
	
{2.2 -- FX - TRANSIENT DESIGNER}

	declare ui_slider $trans_in (0,1000000)
	declare ui_slider $trans_attack (0,1000000)
	declare ui_slider $trans_sustain (0,1000000)
	declare ui_slider $trans_out (0,797000)
	
	declare %trans_control_id[4]
	%trans_control_id[0] := get_ui_id($trans_in)
	%trans_control_id[1] := get_ui_id($trans_attack)
	%trans_control_id[2] := get_ui_id($trans_sustain)
	%trans_control_id[3] := get_ui_id($trans_out)

	set_control_help($trans_in,"Input Level: Sets the gain or reduction at the effect input.")
	set_control_help($trans_attack,"Attack: Controls the level of the signal's attack.")
	set_control_help($trans_sustain,"Sustain: Controls the level of the signal's sustain.")
	set_control_help($trans_out,"Output Volume: Controls the output level of the effect.")
	
	declare %trans_data[15*4]
	$count := 0
	while($count < num_elements(%trans_data))
		%trans_data[$count] := 500000
		inc($count)
	end while
	
	make_persistent(%trans_data)
	read_persistent_var(%trans_data)
	
	$count := 0
	while($count < 4)
		set_control_par(%trans_control_id[$count],$CONTROL_PAR_POS_Y,404)
		set_control_par(%trans_control_id[$count],$CONTROL_PAR_DEFAULT_VALUE,500000)
		set_control_par(%trans_control_id[$count],$CONTROL_PAR_VALUE,%trans_data[($cur_selection*4) + $count])
		set_control_par(%trans_control_id[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,$MB_KNOB_SMALL)
		set_control_par(%trans_control_id[$count],$CONTROL_PAR_ALLOW_AUTOMATION,0)
		if($count mod 3 = 0)
			set_control_par_str(%trans_control_id[$count],$CONTROL_PAR_PICTURE,@fx_knob_blk)
		else
			set_control_par_str(%trans_control_id[$count],$CONTROL_PAR_PICTURE,@fx_knob_red)
		end if
		inc($count)
	end while
	
	set_control_par(%trans_control_id[3],$CONTROL_PAR_DEFAULT_VALUE,397000)
	
	set_control_par(%trans_control_id[0],$CONTROL_PAR_POS_X,230)
	set_control_par(%trans_control_id[1],$CONTROL_PAR_POS_X,341)
	set_control_par(%trans_control_id[2],$CONTROL_PAR_POS_X,422)
	move_control_px($trans_out,571,429)
	
	if($cur_selection = 13 or $fx_view # $VIEW_TRANS)
		$count := 0
		while($count < num_elements(%trans_control_id))
			set_control_par(%trans_control_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			inc($count)
		end while
	end if

{2.3 -- FX - COMPRESSOR}

	declare ui_slider $comp_thres (0,1000000)
	declare ui_slider $comp_makeup (0,1000000)
	declare ui_slider $comp_ratio (0,1000000)
	declare ui_slider $comp_attack (0,1000000)
	declare ui_slider $comp_release (0,1000000)
	declare ui_slider $comp_mix (0,1000000)
	declare ui_slider $comp_out (0,797000)
	
	declare %comp_control_id[7]
	%comp_control_id[0] := get_ui_id($comp_thres)
	%comp_control_id[1] := get_ui_id($comp_makeup)
	%comp_control_id[2] := get_ui_id($comp_ratio)
	%comp_control_id[3] := get_ui_id($comp_attack)
	%comp_control_id[4] := get_ui_id($comp_release)
	%comp_control_id[5] := get_ui_id($comp_mix)
	%comp_control_id[6] := get_ui_id($comp_out)

	set_control_help($comp_thres,"Threshold: Sets a level threshold above which the Compressor starts working. Only levels that rise above this threshold will be reduced by the compression; signals that stay below it will be left unprocessed.")
	set_control_help($comp_makeup,"Makeup: Controls the output gain of the compressed signal. Used to compensate for the gain reduction of the effect.")
	set_control_help($comp_ratio,"Ratio: Controls the amount of compression, expressed as a ratio of input level change against output level change. A Ratio of 1:1 means that no compression will be happening; a Ratio 4:1 means that for every 4 decibel increase of amplitude above the threshold, the output will increase by only 1 decibel.")
	set_control_help($comp_attack,"Attack: Adjusts the time the Compressor will take to reach the full Ratio value after an input signal exceeds the Threshold level.")
	set_control_help($comp_release,"Release: Adjusts the time the compressor will take to fall back to non-compression after the input signal falls below the threshold.")
	set_control_help($comp_mix,"Mix: Controls the dry / wet mix of the effect.")
	set_control_help($comp_out,"Output Volume: Controls the output level of the effect.")
	
	declare %comp_data[15*7]
	$count := 0
	while($count < num_elements(%comp_data))
		%comp_data[$count] := 500000
		inc($count)
	end while
	
	make_persistent(%comp_data)
	read_persistent_var(%comp_data)
	
	declare %comp_x_pos[7] := (0,0,1,1,1,1,30)
	
	$count := 0
	while($count < 7)
		set_control_par(%comp_control_id[$count],$CONTROL_PAR_POS_Y,429 - (($count mod 2)*51))
		set_control_par(%comp_control_id[$count],$CONTROL_PAR_POS_X,151 + ($count*65) + %comp_x_pos[$count])
		set_control_par(%comp_control_id[$count],$CONTROL_PAR_DEFAULT_VALUE,500000)
		set_control_par(%comp_control_id[$count],$CONTROL_PAR_VALUE,%comp_data[($cur_selection*7) + $count])
		set_control_par(%comp_control_id[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,$MB_KNOB_SMALL)
		set_control_par(%comp_control_id[$count],$CONTROL_PAR_ALLOW_AUTOMATION,0)
		inc($count)
	end while
	
	set_control_par(%comp_control_id[1],$CONTROL_PAR_DEFAULT_VALUE,200000)
	set_control_par(%comp_control_id[5],$CONTROL_PAR_DEFAULT_VALUE,1000000)
	set_control_par(%comp_control_id[6],$CONTROL_PAR_DEFAULT_VALUE,397000)
	
	set_control_par_str(%comp_control_id[0],$CONTROL_PAR_PICTURE,@fx_knob_blue)
	set_control_par_str(%comp_control_id[1],$CONTROL_PAR_PICTURE,@fx_knob_blue)
	set_control_par_str(%comp_control_id[2],$CONTROL_PAR_PICTURE,"NID_mixer_knb_blue6")
	set_control_par_str(%comp_control_id[3],$CONTROL_PAR_PICTURE,"NID_mixer_knb_blue6")
	set_control_par_str(%comp_control_id[4],$CONTROL_PAR_PICTURE,"NID_mixer_knb_blue6")
	set_control_par_str(%comp_control_id[5],$CONTROL_PAR_PICTURE,@fx_knob_blue)
	set_control_par_str(%comp_control_id[6],$CONTROL_PAR_PICTURE,@fx_knob_blk)
	
	if($cur_selection = 13 or $fx_view # $VIEW_COMP)
		$count := 0
		while($count < num_elements(%comp_control_id))
			set_control_par(%comp_control_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			inc($count)
		end while
	end if
	
{2.4 -- FX - TAPE SATURATOR}

	declare ui_slider $tape_gain (0,1000000)
	declare ui_slider $tape_warm (0,1000000)
	declare ui_slider $tape_hf (0,1000000)
	declare ui_slider $tape_out (0,797000)
	
	declare %tape_control_id[4]
	%tape_control_id[0] := get_ui_id($tape_gain)
	%tape_control_id[1] := get_ui_id($tape_warm)
	%tape_control_id[2] := get_ui_id($tape_hf)
	%tape_control_id[3] := get_ui_id($tape_out)

	set_control_help($tape_gain,"Gain: Controls the input gain of the effect. This will increase the amount of tape distortion and compression.")
	set_control_help($tape_warm,"Warmth: Controls the low frequency boost/cut of the effect.")
	set_control_help($tape_hf,"HF Rolloff: Controls the high frequency rolloff starting frequency. Frequencies above this point will be attenuated.")
	set_control_help($tape_out,"Output Volume: Controls the output level of the effect.")
	
	declare %tape_data[15*4]
	$count := 0
	while($count < num_elements(%tape_data))
		%tape_data[$count] := 500000
		inc($count)
	end while
	
	make_persistent(%tape_data)
	read_persistent_var(%tape_data)
	
	$count := 0
	while($count < 4)
		set_control_par(%tape_control_id[$count],$CONTROL_PAR_POS_Y,423 - (($count mod 2)*45))
		set_control_par(%tape_control_id[$count],$CONTROL_PAR_POS_X,253 + ($count*66))
		set_control_par(%tape_control_id[$count],$CONTROL_PAR_VALUE,%tape_data[($cur_selection*4) + $count])
		set_control_par(%tape_control_id[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,$MB_KNOB_SMALL)
		set_control_par(%tape_control_id[$count],$CONTROL_PAR_ALLOW_AUTOMATION,0)
		set_control_par_str(%tape_control_id[$count],$CONTROL_PAR_PICTURE,@fx_knob_ylo)
		inc($count)
	end while
	
	set_control_par(%tape_control_id[0],$CONTROL_PAR_DEFAULT_VALUE,0)
	set_control_par(%tape_control_id[1],$CONTROL_PAR_DEFAULT_VALUE,500000)
	set_control_par(%tape_control_id[2],$CONTROL_PAR_DEFAULT_VALUE,1000000)
	set_control_par(%tape_control_id[3],$CONTROL_PAR_DEFAULT_VALUE,397000)
	
	set_control_par_str(%tape_control_id[3],$CONTROL_PAR_PICTURE,@fx_knob_blk)
	move_control_px($tape_out,571,429)
	
	if($cur_selection = 13 or $fx_view # $VIEW_TAPE)
		$count := 0
		while($count < num_elements(%tape_control_id))
			set_control_par(%tape_control_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			inc($count)
		end while
	end if
	
{2.5 -- FX - REVERB}
	
	declare ui_label $reverb_pic1 (1,1)
	declare ui_label $reverb_pic2 (1,1)
	declare ui_label $reverb_pic3 (1,1)
	declare ui_label $reverb_pic4 (1,1)
	declare ui_label $reverb_picbig (1,1)

	declare ui_menu $ir_category
	
	declare ui_menu $ir_amb
	declare ui_menu $ir_rooms
	declare ui_menu $ir_studios
	declare ui_menu $ir_chamb
	declare ui_menu $ir_halls
	declare ui_menu $ir_plates
	declare ui_menu $ir_springs
	
	declare ui_button $reverb_sub2
	declare ui_button $reverb_sub1
	declare ui_button $reverb_plus1
	declare ui_button $reverb_plus2
	
	declare %reverb_controls[17]
	%reverb_controls[0] := get_ui_id($ir_amb)
	%reverb_controls[1] := get_ui_id($ir_rooms)
	%reverb_controls[2] := get_ui_id($ir_studios)
	%reverb_controls[3] := get_ui_id($ir_chamb)
	%reverb_controls[4] := get_ui_id($ir_halls)
	%reverb_controls[5] := get_ui_id($ir_plates)
	%reverb_controls[6] := get_ui_id($ir_springs)
	
	%reverb_controls[7] := get_ui_id($ir_category)
	
	%reverb_controls[8] := get_ui_id($reverb_pic1)
	%reverb_controls[9] := get_ui_id($reverb_pic2)
	%reverb_controls[10] := get_ui_id($reverb_pic3)
	%reverb_controls[11] := get_ui_id($reverb_pic4)
	%reverb_controls[12] := get_ui_id($reverb_picbig)
	%reverb_controls[13] := get_ui_id($reverb_sub2)
	%reverb_controls[14] := get_ui_id($reverb_sub1)
	%reverb_controls[15] := get_ui_id($reverb_plus1)
	%reverb_controls[16] := get_ui_id($reverb_plus2)
	
	make_persistent($ir_amb)
	make_persistent($ir_rooms)
	make_persistent($ir_studios)
	make_persistent($ir_chamb)
	make_persistent($ir_halls)
	make_persistent($ir_plates)
	make_persistent($ir_springs)
	make_persistent($ir_category)
	read_persistent_var($ir_category)

	{populate menus}
	
	$count := 0
	while($count < 7)
		add_menu_item($ir_category,!ir_category[$count],$count)
		inc($count)
	end while
	
	$count := 0
	while($count < 2)
		add_menu_item($ir_amb,!ir_sample[$count + %ir_offset[0]],$count)
		inc($count)
	end while
	
	$count := 0
	while($count < 3)
		add_menu_item($ir_chamb,!ir_sample[$count + %ir_offset[3]],$count)
		inc($count)
	end while
	
	$count := 0
	while($count < 4)
		add_menu_item($ir_rooms,!ir_sample[$count + %ir_offset[1]],$count)
		add_menu_item($ir_springs,!ir_sample[$count + %ir_offset[6]],$count)
		inc($count)
	end while
	
	$count := 0
	while($count < 5)
		add_menu_item($ir_plates,!ir_sample[$count + %ir_offset[5]],$count)
		inc($count)
	end while
	
	$count := 0
	while($count < 6)
		add_menu_item($ir_studios,!ir_sample[$count + %ir_offset[2]],$count)
		add_menu_item($ir_halls,!ir_sample[$count + %ir_offset[4]],$count)
		inc($count)
	end while
	
	{GUI}
	
	$count := 0
	while($count < 7)
		set_control_par_str(%reverb_controls[$count],$CONTROL_PAR_PICTURE,"NID_mixer_dropdown_reverbbot")
		set_control_par_str(%reverb_controls[$count],$CONTROL_PAR_HELP,"Reverb Select: Select the reverb you wish to use.")
			set_control_par(%reverb_controls[$count],$CONTROL_PAR_POS_X,241)
			set_control_par(%reverb_controls[$count],$CONTROL_PAR_POS_Y,486)
			set_control_par(%reverb_controls[$count],$CONTROL_PAR_FONT_TYPE,$FONT_ID1)
			set_control_par(%reverb_controls[$count],$CONTROL_PAR_TEXTPOS_Y,3)
		inc($count)
	end while
	
	$count := 7
	set_control_par_str(%reverb_controls[$count],$CONTROL_PAR_PICTURE,"NID_mixer_dropdown_reverbtop")
	set_control_par_str(%reverb_controls[$count],$CONTROL_PAR_HELP,"Reverb Category Select: Select the category of reverb types to select from.")
		set_control_par(%reverb_controls[$count],$CONTROL_PAR_POS_X,241)
		set_control_par(%reverb_controls[$count],$CONTROL_PAR_POS_Y,369)
		set_control_par(%reverb_controls[$count],$CONTROL_PAR_FONT_TYPE,$FONT_ID1)
		set_control_par(%reverb_controls[$count],$CONTROL_PAR_TEXTPOS_Y,3)
	
	declare %reverb_pic_help[4] := (5,6,1,2)
	declare %reverb_pic_pos[4] := (13,128,394,509)
	
	$count := 8
	while($count < 12)
		set_control_par_str(%reverb_controls[$count],$CONTROL_PAR_PICTURE,"NID_mixer_lbl_reverbsmall")
		set_control_par_str(%reverb_controls[$count],$CONTROL_PAR_TEXT,"")
			set_control_par(%reverb_controls[$count],$CONTROL_PAR_POS_X,%reverb_pic_pos[$count - 8])
			set_control_par(%reverb_controls[$count],$CONTROL_PAR_POS_Y,400)
			set_control_par(%reverb_controls[$count],$CONTROL_PAR_PICTURE_STATE,(($ir_category + %reverb_pic_help[$count - 8])) mod 7)
		inc($count)
	end while
	
	$count := 12
	set_control_par_str(%reverb_controls[$count],$CONTROL_PAR_PICTURE,"NID_mixer_lbl_reverbbig")
	set_control_par_str(%reverb_controls[$count],$CONTROL_PAR_TEXT,"")
		set_control_par(%reverb_controls[$count],$CONTROL_PAR_POS_X,243)
		set_control_par(%reverb_controls[$count],$CONTROL_PAR_POS_Y,387)
		set_control_par(%reverb_controls[$count],$CONTROL_PAR_PICTURE_STATE,$ir_category)
	
	$count := 13
	while($count < 17)
		set_control_par_str(%reverb_controls[$count],$CONTROL_PAR_PICTURE,"NID_mixer_btn_reverb")
		set_control_par_str(%reverb_controls[$count],$CONTROL_PAR_TEXT,"")
		set_control_par_str(%reverb_controls[$count],$CONTROL_PAR_HELP,"Reverb Category Select: Select the category of reverb types to select from.")
			set_control_par(%reverb_controls[$count],$CONTROL_PAR_POS_X,%reverb_pic_pos[$count - 13])
			set_control_par(%reverb_controls[$count],$CONTROL_PAR_POS_Y,399)
			set_control_par(%reverb_controls[$count],$CONTROL_PAR_WIDTH,116)
			set_control_par(%reverb_controls[$count],$CONTROL_PAR_HEIGHT,81)
		inc($count)
	end while
	
	
	if($cur_selection # 13)
		$count := 0
		while($count < num_elements(%reverb_controls))
			set_control_par(%reverb_controls[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			inc($count)
		end while
	else
		$count := 0
		while($count < 7)
			set_control_par(%reverb_controls[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			inc($count)
		end while
		set_control_par(%reverb_controls[$ir_category],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
	end if
	
{3 -- CHANNEL CONTROLS}
{3.1 -- CHAN - MIC BALANCE}

	declare %purge_state[13]	{0 = purged; 1 = loaded}
	$count := 0
	while($count < 13)
		%purge_state[$count] := 1
		inc($count)
	end while
	make_persistent(%purge_state)
	read_persistent_var(%purge_state)
	
	pgs_create_key(CHANNEL_PURGE_STATE, 13)
	$count := 0
	while ($count < 13)
		pgs_set_key_val(CHANNEL_PURGE_STATE, $count, %purge_state[$count])
		inc($count)
	end while
	
	pgs_create_key(CHANNEL_MUTE_STATE, 13)
	$count := 0
	while ($count < 13)
		pgs_set_key_val(CHANNEL_MUTE_STATE, $count, %mute_state[$count])
		inc($count)
	end while

	declare %mic_balance_state[6] := (1)
	make_persistent(%mic_balance_state)
	read_persistent_var(%mic_balance_state)
	
	pgs_create_key(MICBALANCE_STATE, 6)
	$count := 0
	while ($count < 6)
		pgs_set_key_val(MICBALANCE_STATE, $count, %mic_balance_state[$count])	
		inc($count)
	end while

	declare ui_slider $kickin_vol (0,100)
	declare ui_slider $kickout_vol (0,100)
	declare ui_slider $kicksub_vol (0,100)
	declare ui_slider $snaretop_vol (0,100)
	declare ui_slider $snarebot_vol (0,100)
	declare ui_slider $snarebleed_vol (0,100)
	declare ui_label $mic_bal_bg (1,1)
	
	declare %micbalance_id[7]
	%micbalance_id[0] := get_ui_id($kickin_vol)
	%micbalance_id[1] := get_ui_id($kickout_vol)
	%micbalance_id[2] := get_ui_id($kicksub_vol)
	%micbalance_id[3] := get_ui_id($snaretop_vol)
	%micbalance_id[4] := get_ui_id($snarebot_vol)
	%micbalance_id[5] := get_ui_id($snarebleed_vol)
	%micbalance_id[6] := get_ui_id($mic_bal_bg)
	
	$count := 0
	while($count < 6)
		set_control_par_str(%micbalance_id[$count],$CONTROL_PAR_PICTURE,@balance_picture)
			set_control_par(%micbalance_id[$count],$CONTROL_PAR_VALUE,71)
			set_control_par(%micbalance_id[$count],$CONTROL_PAR_DEFAULT_VALUE,71)
			set_control_par(%micbalance_id[$count],$CONTROL_PAR_MOUSE_BEHAVIOUR,$MB_SLIDER_HOR)
			set_control_par(%micbalance_id[$count],$CONTROL_PAR_POS_X,72)
			set_control_par(%micbalance_id[$count],$CONTROL_PAR_POS_Y,380 + (($count mod 3)*33))
		inc($count)
	end while
	
	if($KICK_SUB # 1)
		pgs_set_key_val(ACTION_TYPE,0,-1)
		pgs_set_key_val(MICBALANCE_STATE, 2, 0)	{Disable Voice for SubKick mic}
		set_control_par_str(%micbalance_id[2],$CONTROL_PAR_PICTURE,"NID_mixer_fdr_mix_disabled")
		move_control_px($kicksub_vol,19,438)
	else
		set_control_help($kicksub_vol,"Kick Sub: Controls the volume of the sub microphone, which only contains low frequencies.")
	end if
	
	set_control_par_str(%micbalance_id[6],$CONTROL_PAR_TEXT,"")
	set_control_par_str(%micbalance_id[6],$CONTROL_PAR_PICTURE,"NID_mixer_lbl_bgmicmix")
	set_control_par(%micbalance_id[6],$CONTROL_PAR_POS_X,7)
	set_control_par(%micbalance_id[6],$CONTROL_PAR_POS_Y,368)
	
	make_persistent($kickin_vol)
	make_persistent($kickout_vol)
	make_persistent($kicksub_vol)
	make_persistent($snaretop_vol)
	make_persistent($snarebot_vol)
	make_persistent($snarebleed_vol)
	
	read_persistent_var($kickin_vol)
		if ($kickin_vol < 5)
			pgs_set_key_val(ACTION_TYPE,0,-1)
			pgs_set_key_val(MICBALANCE_STATE, 0, 0)
			%mic_balance_state[0] := pgs_get_key_val(MICBALANCE_STATE, 0)
		else
			pgs_set_key_val(ACTION_TYPE,0,-1)
			pgs_set_key_val(MICBALANCE_STATE, 0, 1)
			%mic_balance_state[0] := pgs_get_key_val(MICBALANCE_STATE, 0)
		end if
	read_persistent_var($kickout_vol)
		if ($kickout_vol < 5)
			pgs_set_key_val(ACTION_TYPE,0,-1)
			pgs_set_key_val(MICBALANCE_STATE, 1, 0)
			%mic_balance_state[1] := pgs_get_key_val(MICBALANCE_STATE, 1)
		else
			pgs_set_key_val(ACTION_TYPE,0,-1)	
			pgs_set_key_val(MICBALANCE_STATE, 1, 1)
			%mic_balance_state[1] := pgs_get_key_val(MICBALANCE_STATE, 1)
		end if
	read_persistent_var($kicksub_vol)
		if ($KICK_SUB = 0)
			pgs_set_key_val(ACTION_TYPE,0,-1)
			pgs_set_key_val(MICBALANCE_STATE, 2, 0)
			%mic_balance_state[2] := pgs_get_key_val(MICBALANCE_STATE, 2)
		{else
			pgs_set_key_val(ACTION_TYPE,0,-1)
			pgs_set_key_val(MICBALANCE_STATE, 2, 1)
			%mic_balance_state[2] := pgs_get_key_val(MICBALANCE_STATE, 2)}
		end if
	read_persistent_var($snaretop_vol)
		if ($snaretop_vol < 5)
			pgs_set_key_val(ACTION_TYPE,0,-1)
			pgs_set_key_val(MICBALANCE_STATE, 3, 0)
			%mic_balance_state[3] := pgs_get_key_val(MICBALANCE_STATE, 3)
		else
			pgs_set_key_val(ACTION_TYPE,0,-1)
			pgs_set_key_val(MICBALANCE_STATE, 3, 1)
			%mic_balance_state[3] := pgs_get_key_val(MICBALANCE_STATE, 3)
		end if
	read_persistent_var($snarebot_vol)
		if ($snarebot_vol < 5)
			pgs_set_key_val(ACTION_TYPE,0,-1)
			pgs_set_key_val(MICBALANCE_STATE, 4, 0)
			%mic_balance_state[4] := pgs_get_key_val(MICBALANCE_STATE, 4)
		else
			pgs_set_key_val(ACTION_TYPE,0,-1)	
			pgs_set_key_val(MICBALANCE_STATE, 4, 1)
			%mic_balance_state[4] := pgs_get_key_val(MICBALANCE_STATE, 4)
		end if
	read_persistent_var($snarebleed_vol)
		if ($snarebleed_vol < 5)
			pgs_set_key_val(ACTION_TYPE,0,-1)
			pgs_set_key_val(MICBALANCE_STATE, 5, 0)
			%mic_balance_state[5] := pgs_get_key_val(MICBALANCE_STATE, 5)
		else
			pgs_set_key_val(ACTION_TYPE,0,-1)
			pgs_set_key_val(MICBALANCE_STATE, 5, 1)
			%mic_balance_state[5] := pgs_get_key_val(MICBALANCE_STATE, 5)
		end if
	
	set_control_help($kickin_vol,"Kick In: Controls the volume of the microphone inside the kick drum.")
	set_control_help($kickout_vol,"Kick Out: Controls the volume of the microphone outside the kick drum.")
	set_control_help($snaretop_vol,"Snare Top: Controls the volume of the microphone set above the snare.")
	set_control_help($snarebot_vol,"Snare Bottom: Controls the volume of the microphone set below the snare.")
	set_control_help($snarebleed_vol,"Snare Bleed: Controls the amount of kick and tom leaking into the snare channel.")
	
	if($fx_view = $VIEW_SETTINGS)
		select($cur_selection)
		case 0
			$count := 3
			while($count < 6)
				set_control_par(%micbalance_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				inc($count)
			end while
			set_control_par(%micbalance_id[6],$CONTROL_PAR_PICTURE_STATE,0)
		case 1
			$count := 0
			while($count < 3)
				set_control_par(%micbalance_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				inc($count)
			end while
			set_control_par(%micbalance_id[6],$CONTROL_PAR_PICTURE_STATE,1)
		case 2 to 12
			$count := 0
			while($count < 6)
				set_control_par(%micbalance_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				inc($count)
			end while
			set_control_par(%micbalance_id[6],$CONTROL_PAR_PICTURE_STATE,2)
		case 13
			$count := 0
			while($count < num_elements(%micbalance_id))
				set_control_par(%micbalance_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				inc($count)
			end while
		case 14
			$count := 0
			while($count < 6)
				set_control_par(%micbalance_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				inc($count)
			end while
			set_control_par(%micbalance_id[6],$CONTROL_PAR_PICTURE_STATE,2)
		end select
	else
		$count := 0
		while($count < num_elements(%micbalance_id))
			set_control_par(%micbalance_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			inc($count)
		end while
	end if

{3.2 -- CHAN - FX ROUTING}

	declare ui_button $fx_plus1
	declare ui_button $fx_sub1
	declare ui_label $fx_pic (1,1)
	
	declare %routing_id[3]
	%routing_id[0] := get_ui_id($fx_plus1)
	%routing_id[1] := get_ui_id($fx_sub1)
	%routing_id[2] := get_ui_id($fx_pic)
	
	set_text($fx_plus1,"")
	set_text($fx_sub1,"")
	
	set_control_help($fx_plus1,"Changes the FX routing to one of four preset configurations.")
	set_control_help($fx_sub1,"Changes the FX routing to one of four preset configurations.")
	
	set_control_par_str(%routing_id[0],$CONTROL_PAR_PICTURE,"NID_mixer_btn_routingnext")
	set_control_par_str(%routing_id[1],$CONTROL_PAR_PICTURE,"NID_mixer_btn_routingprev")
	
	set_control_par(%routing_id[0],$CONTROL_PAR_HEIGHT,89)
	set_control_par(%routing_id[0],$CONTROL_PAR_WIDTH,20)
	set_control_par(%routing_id[1],$CONTROL_PAR_HEIGHT,89)
	set_control_par(%routing_id[1],$CONTROL_PAR_WIDTH,20)
	
	set_control_par_str(%routing_id[2],$CONTROL_PAR_PICTURE,"NID_mixer_lbl_routing")
	set_control_par(%routing_id[2],$CONTROL_PAR_PICTURE_STATE,%routing_state[$cur_selection])
	set_text($fx_pic,"")
	
	move_control_px($fx_sub1,210,380)
	move_control_px($fx_pic,234,387)
	move_control_px($fx_plus1,434,380)
	
	if($fx_view # $VIEW_SETTINGS or $cur_selection = 13)
		$count := 0
		while($count < num_elements(%routing_id))
			set_control_par(%routing_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			inc($count)
		end while
	end if

	{4.1 -- FX PRESETS - CONTROLS}	{Moved up section so by order of declaration the controls are on top of the overlay}

	declare ui_menu $fx_preset_kick
	declare ui_menu $fx_preset_snare
	declare ui_menu $fx_preset_hihat
	declare ui_menu $fx_preset_toms
	declare ui_menu $fx_preset_perc
	declare ui_menu $fx_preset_oh
	declare ui_menu $fx_preset_master

	make_persistent($fx_preset_kick)
	make_persistent($fx_preset_snare)
	make_persistent($fx_preset_hihat)
	make_persistent($fx_preset_toms)
	make_persistent($fx_preset_perc)
	make_persistent($fx_preset_oh)
	make_persistent($fx_preset_master)
	
	declare ui_button $fx_preset_next
	declare ui_button $fx_preset_prev
	declare ui_button $fx_preset_save
	declare ui_button $fx_preset_delete
	declare ui_text_edit @fx_preset_name
	
	declare %fx_preset_id[12]
	%fx_preset_id[0] := get_ui_id($fx_preset_kick)
	%fx_preset_id[1] := get_ui_id($fx_preset_snare)
	%fx_preset_id[2] := get_ui_id($fx_preset_hihat)
	%fx_preset_id[3] := get_ui_id($fx_preset_toms)
	%fx_preset_id[4] := get_ui_id($fx_preset_perc)
	%fx_preset_id[5] := get_ui_id($fx_preset_oh)
	%fx_preset_id[6] := get_ui_id($fx_preset_master)
	%fx_preset_id[7] := get_ui_id($fx_preset_next)
	%fx_preset_id[8] := get_ui_id($fx_preset_prev)
	%fx_preset_id[9] := get_ui_id($fx_preset_save)
	%fx_preset_id[10] := get_ui_id($fx_preset_delete)
	%fx_preset_id[11] := get_ui_id(@fx_preset_name)
	
	$count := 0
	while($count < 7)
		set_control_par_str(%fx_preset_id[$count],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxpreset")
		set_control_par(%fx_preset_id[$count],$CONTROL_PAR_POS_X,498)
		set_control_par(%fx_preset_id[$count],$CONTROL_PAR_POS_Y,487)
		set_control_par(%fx_preset_id[$count],$CONTROL_PAR_TEXTPOS_Y,30)
		set_control_par(%fx_preset_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($count)
	end while
	
	set_control_par_str(%fx_preset_id[7],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxnext")
	set_control_par(%fx_preset_id[7],$CONTROL_PAR_WIDTH,18)
	set_control_par(%fx_preset_id[7],$CONTROL_PAR_HEIGHT,26)
	move_control_px($fx_preset_next,477,487)
	set_text($fx_preset_next,"")
	
	set_control_par_str(%fx_preset_id[8],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxprev")
	set_control_par(%fx_preset_id[8],$CONTROL_PAR_WIDTH,18)
	set_control_par(%fx_preset_id[8],$CONTROL_PAR_HEIGHT,26)
	move_control_px($fx_preset_prev,462,487)
	set_text($fx_preset_prev,"")
	
	set_control_par_str(%fx_preset_id[9],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxsave")
	set_control_par(%fx_preset_id[9],$CONTROL_PAR_WIDTH,15)
	set_control_par(%fx_preset_id[9],$CONTROL_PAR_HEIGHT,15)
	move_control_px($fx_preset_save,599,489)
	set_text($fx_preset_save,"")
	
	set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
	set_control_par(%fx_preset_id[10],$CONTROL_PAR_WIDTH,15)
	set_control_par(%fx_preset_id[10],$CONTROL_PAR_HEIGHT,15)
	move_control_px($fx_preset_delete,616,491)
	set_text($fx_preset_delete,"")
	
	set_control_par(%fx_preset_id[11],$CONTROL_PAR_WIDTH,77)
	set_control_par(%fx_preset_id[11],$CONTROL_PAR_HEIGHT,14)
	set_control_par(%fx_preset_id[11],$CONTROL_PAR_FONT_TYPE,$FONT_ID1)
	move_control_px(@fx_preset_name,503,491)
	
	set_control_help($fx_preset_kick,"FX Preset: Selects and loads effect settings for the whole channel.")
	set_control_help($fx_preset_snare,"FX Preset: Selects and loads effect settings for the whole channel.")
	set_control_help($fx_preset_hihat,"FX Preset: Selects and loads effect settings for the whole channel.")
	set_control_help($fx_preset_toms,"FX Preset: Selects and loads effect settings for the whole channel.")
	set_control_help($fx_preset_perc,"FX Preset: Selects and loads effect settings for the whole channel.")
	set_control_help($fx_preset_oh,"FX Preset: Selects and loads effect settings for the whole channel.")
	set_control_help($fx_preset_master,"FX Preset: Selects and loads effect settings for the whole channel.")
	set_control_help($fx_preset_next,"Next FX Preset: Selects and loads effect settings for the whole channel from the preset that is located after the currently selected one in the FX Preset menu.")
	set_control_help($fx_preset_prev,"Previous FX Preset: Selects and loads effect settings for the whole channel from the preset that is located before the currently selected one in the FX Preset menu.")
	set_control_help($fx_preset_save,"Save FX Preset: Saves your current effect settings for the whole channel. You cannot save over factory presets, if you click save while you have a factory preset selected, a new preset will be generated with the same name at the end of the FX Preset menu.")
	set_control_help($fx_preset_delete,"Delete FX Preset: Deletes the currently selected FX Preset. You cannot delete factory presets.")
	set_control_help(@fx_preset_name,"FX Preset: Selects and loads effect settings for the whole channel.")

	{4.2 -- FX PRESETS - ARRAYS ETC...}

	{declare shit}
	declare %fxpreset_change_flag[15] := (0)
	declare $fx_preset_helper

	declare const $USER_FX_PRESETS	 := 30
	declare const $KICK_FX_PRESETS	 := 4
	declare const $SNARE_FX_PRESETS	 := 4
	declare const $HIHAT_FX_PRESETS	 := 4
	declare const $TOM_FX_PRESETS	 := 4
	declare const $PERC_FX_PRESETS	 := 4
	declare const $OH_FX_PRESETS	 := 4
	declare const $MASTER_FX_PRESETS := 4

	declare %kick_fact_presets[36*$KICK_FX_PRESETS] := (...
{PRESET 0}...
	{eq}		214286, 720238, 0, 297619, 291666, 1000000, 720238, 571430, 732142, 398809, 449186, 0, 0, ...
	{trans}		500000, 601192, 375001, 397000, ...
	{comp}		291666, 313095, 500000, 1000000, 0, 333333, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		1, 1, 0, 0, ...
	{settings}	71, 71, 71, 3, ...
{PRESET 1}...
	{eq}		375000, 547620, 500000, 500000, 500000, 500000, 696428, 732143, 500000, 500000, 397000, 0, 0, ...
	{trans}		500000, 500000, 500000, 397000, ...
	{comp}		500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		1, 0, 0, 0, ...
	{settings}	100, 71, 59, 0, ...
{PRESET 2}...
	{eq}		214286, 500001, 910714, 291668, 71428, 500000, 500000, 500000, 500000, 500000, 648435, 1, 0, ...
	{trans}		500000, 500000, 255953, 397000, ...
	{comp}		500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		1, 1, 0, 0, ...
	{settings}	76, 0, 53, 0, ...
{PRESET 3}...
	{eq}		500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	{trans}		500000, 500000, 500000, 397000, ...
	{comp}		500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		0, 0, 0, 0, ...
	{settings}	71, 71, 71, 0)

	declare %snare_fact_presets[36*$SNARE_FX_PRESETS] := (...
{PRESET 0}...
	{eq}		416667, 583333, 0, 357143, 0, 500000, 565476, 1000000, 696428, 279762, 468160, 1, 0, ...
	{trans}		500000, 589286, 636905, 397000, ...
	{comp}		101190, 503572, 500000, 803571, 452381, 375000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		1, 1, 1, 0, ...
	{settings}	75, 10, 46, 3, ...
{PRESET 1}...
	{eq}		476191, 196428, 1000000, 238095, 345238, 815476, 678571, 547619, 666667, 642857, 453929, 0, 0, ...
	{trans}		500000, 500000, 500000, 397000, ...
	{comp}		0, 378572, 375000, 791667, 1000000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		1, 0, 1, 0, ...
	{settings}	71, 69, 67, 0, ...
{PRESET 2}...
	{eq}		619048, 553572, 0, 339285, 0, 500000, 565476, 1000000, 577380, 369048, 316351, 0, 0, ...
	{trans}		500000, 500000, 500000, 397000, ...
	{comp}		500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		1, 0, 0, 0, ...
	{settings}	71, 57, 63, 3, ...
{PRESET 3}...
	{eq}		500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	{trans}		500000, 500000, 500000, 397000, ...
	{comp}		500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		0, 0, 0, 0, ...
	{settings}	71, 71, 71, 0)

	declare %hihat_fact_presets[36*$HIHAT_FX_PRESETS] := (...
{PRESET 0}...
	{eq}		500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 666667, 500000, 397000, 0, 0, ...
	{trans}		500000, 500000, 500000, 397000, ...
	{comp}		500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		1, 0, 0, 0, ...
	{settings}	0, 0, 0, 0, ...
{PRESET 1}...
	{eq}		500000, 154762, 732143, 238095, 398810, 500000, 601190, 702381, 500000, 500000, 397000, 0, 0, ...
	{trans}		500000, 500000, 500000, 397000, ...
	{comp}		500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		1, 0, 0, 0, ...
	{settings}	0, 0, 0, 0, ...
{PRESET 2}...
	{eq}		500000, 220238, 500000, 500000, 500000, 500000, 404762, 702381, 380952, 500000, 397000, 0, 0, ...
	{trans}		500000, 500000, 500000, 397000, ...
	{comp}		589285, 247619, 1000000, 0, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		1, 0, 1, 0, ...
	{settings}	0, 0, 0, 0, ...
{PRESET 3}...
	{eq}		500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	{trans}		500000, 500000, 500000, 397000, ...
	{comp}		500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		0, 0, 0, 0, ...
	{settings}	0, 0, 0, 0)

	declare %tom_fact_presets[36*$TOM_FX_PRESETS] := (...
{PRESET 0}...
	{eq}		660714, 613095, 636905, 577381, 369048, 1000000, 309524, 0, 428571, 500000, 397000, 0, 0, ...
	{trans}		500000, 500000, 500000, 397000, ...
	{comp}		500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		1, 0, 0, 0, ...
	{settings}	0, 0, 0, 0, ...
{PRESET 1}...
	{eq}		333333, 744048, 500000, 500000, 500000, 1000000, 827381, 1000000, 500000, 500000, 306863, 1, 0, ...
	{trans}		500000, 500000, 500000, 397000, ...
	{comp}		500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		1, 0, 0, 0, ...
	{settings}	0, 0, 0, 3, ...
{PRESET 2}...
	{eq}		660714, 613095, 636905, 577381, 369048, 1000000, 309524, 0, 428571, 500000, 397000, 0, 0, ...
	{trans}		500000, 500000, 392857, 397000, ...
	{comp}		500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		1, 1, 0, 0, ...
	{settings}	0, 0, 0, 0, ...
{PRESET 3}...
	{eq}		500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	{trans}		500000, 500000, 500000, 397000, ...
	{comp}		500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		0, 0, 0, 0, ...
	{settings}	0, 0, 0, 0)

	declare %perc_fact_presets[36*$PERC_FX_PRESETS] := (...
{PRESET 0}...
	{eq}		500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 613095, 500000, 397000, 0, 0, ...
	{trans}		500000, 500000, 500000, 397000, ...
	{comp}		500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		1, 0, 0, 0, ...
	{settings}	0, 0, 0, 0, ...
{PRESET 1}...
	{eq}		500000, 369048, 500000, 500000, 500000, 500000, 500000, 500000, 613095, 279762, 397000, 0, 0, ...
	{trans}		500000, 571428, 392857, 397000, ...
	{comp}		500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		1, 1, 0, 0, ...
	{settings}	0, 0, 0, 0, ...
{PRESET 2}...
	{eq}		500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	{trans}		500000, 571428, 392857, 397000, ...
	{comp}		101190, 503572, 500000, 803571, 452381, 375000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		1, 1, 1, 0, ...
	{settings}	0, 0, 0, 0, ...
{PRESET 3}...
	{eq}		500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	{trans}		500000, 500000, 500000, 397000, ...
	{comp}		500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		0, 0, 0, 0, ...
	{settings}	0, 0, 0, 0)

	declare %oh_fact_presets[36*$OH_FX_PRESETS] := (...
{PRESET 0}...
	{eq}		226190, 607143, 1000000, 410714, 226191, 1000000, 613095, 642857, 601190, 375000, 491881, 1, 0, ...
	{trans}		500000, 386904, 595238, 397000, ...
	{comp}		500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		1, 1, 0, 0, ...
	{settings}	0, 0, 0, 3, ...
{PRESET 1}...
	{eq}		500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 613095, 803571, 397000, 0, 0, ...
	{trans}		500000, 500000, 500000, 397000, ...
	{comp}		500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		1, 0, 0, 0, ...
	{settings}	0, 0, 0, 0, ...
{PRESET 2}...
	{eq}		226190, 607143, 1000000, 410714, 226191, 1000000, 547619, 630952, 476190, 500000, 373280, 1, 0, ...
	{trans}		500000, 434523, 547619, 397000, ...
	{comp}		500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		1, 1, 0, 1, ...
	{settings}	0, 0, 0, 3, ...
{PRESET 3}...
	{eq}		500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	{trans}		500000, 500000, 500000, 397000, ...
	{comp}		500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		0, 0, 0, 0, ...
	{settings}	0, 0, 0, 0)

	declare %master_fact_presets[36*$MASTER_FX_PRESETS] := (...
{PRESET 0}...
	{eq}		166667, 601190, 500000, 404762, 35714, 1000000, 565476, 1000000, 500000, 500000, 776523, 1, 0, ...
	{trans}		500000, 500000, 500000, 397000, ...
	{comp}		660714, 319048, 500000, 732143, 1000000, 279762, 397000, ...
	{tape}		0, 500000, 1000000, 368536, ...
	{onoff}		1, 0, 1, 1, ...
	{settings}	0, 0, 0, 3, ...
{PRESET 1}...
	{eq}		500000, 500000, 500000, 428571, 89286, 500000, 500000, 500000, 577381, 500000, 397000, 0, 0, ...
	{trans}		500000, 500000, 500000, 397000, ...
	{comp}		815476, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 797000, ...
	{onoff}		1, 0, 1, 1, ...
	{settings}	0, 0, 0, 0, ...
{PRESET 2}...
	{eq}		500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 602495, 0, 0, ...
	{trans}		500000, 500000, 500000, 397000, ...
	{comp}		0, 414286, 130952, 1000000, 0, 517857, 397001, ...
	{tape}		0, 500000, 1000000, 544065, ...
	{onoff}		1, 0, 1, 1, ...
	{settings}	0, 0, 0, 3, ...
{PRESET 3}...
	{eq}		500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	{trans}		500000, 500000, 500000, 397000, ...
	{comp}		500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	{tape}		0, 500000, 1000000, 397000, ...
	{onoff}		0, 0, 0, 0, ...
	{settings}	0, 0, 0, 0)

	declare !kick_fact_preset_names[$KICK_FX_PRESETS]
	declare !snare_fact_preset_names[$SNARE_FX_PRESETS]
	declare !hihat_fact_preset_names[$HIHAT_FX_PRESETS]
	declare !tom_fact_preset_names[$TOM_FX_PRESETS]
	declare !perc_fact_preset_names[$PERC_FX_PRESETS]
	declare !oh_fact_preset_names[$OH_FX_PRESETS]
	declare !master_fact_preset_names[$MASTER_FX_PRESETS]

	!kick_fact_preset_names[0] := "Kick A"
	!kick_fact_preset_names[1] := "Kick B"
	!kick_fact_preset_names[2] := "Kick C"
	!kick_fact_preset_names[3] := "INIT"

	!snare_fact_preset_names[0] := "Snare A"
	!snare_fact_preset_names[1] := "Snare B"
	!snare_fact_preset_names[2] := "Snare C"
	!snare_fact_preset_names[3] := "INIT"

	!hihat_fact_preset_names[0] := "Hihat A"
	!hihat_fact_preset_names[1] := "Hihat B"
	!hihat_fact_preset_names[2] := "Hihat C"
	!hihat_fact_preset_names[3] := "INIT"

	!tom_fact_preset_names[0] := "Tom A"
	!tom_fact_preset_names[1] := "Tom B"
	!tom_fact_preset_names[2] := "Tom C"
	!tom_fact_preset_names[3] := "INIT"

	!perc_fact_preset_names[0] := "Perc A"
	!perc_fact_preset_names[1] := "Perc B"
	!perc_fact_preset_names[2] := "Perc C"
	!perc_fact_preset_names[3] := "INIT"

	!oh_fact_preset_names[0] := "Kit Mic A"
	!oh_fact_preset_names[1] := "Kit Mic B"
	!oh_fact_preset_names[2] := "Kit Mic C"
	!oh_fact_preset_names[3] := "INIT"

	!master_fact_preset_names[0] := "Master A"
	!master_fact_preset_names[1] := "Master B"
	!master_fact_preset_names[2] := "Master C"
	!master_fact_preset_names[3] := "INIT"


	declare %kit_A_vin_num_kick_user_presets[1]
	declare %kit_A_vin_num_snare_user_presets[1]
	declare %kit_A_vin_num_hihat_user_presets[1]
	declare %kit_A_vin_num_tom_user_presets[1]
	declare %kit_A_vin_num_perc_user_presets[1]
	declare %kit_A_vin_num_oh_user_presets[1]
	declare %kit_A_vin_num_master_user_presets[1]
	
	declare %kit_A_vin_kick_user_presets[36*$USER_FX_PRESETS]
	declare %kit_A_vin_snare_user_presets[36*$USER_FX_PRESETS]
	declare %kit_A_vin_hihat_user_presets[36*$USER_FX_PRESETS]
	declare %kit_A_vin_tom_user_presets[36*$USER_FX_PRESETS]
	declare %kit_A_vin_perc_user_presets[36*$USER_FX_PRESETS]
	declare %kit_A_vin_oh_user_presets[36*$USER_FX_PRESETS]
	declare %kit_A_vin_master_user_presets[36*$USER_FX_PRESETS]
	
	declare !kit_A_vin_kick_user_preset_names[$USER_FX_PRESETS]
	declare !kit_A_vin_snare_user_preset_names[$USER_FX_PRESETS]
	declare !kit_A_vin_hihat_user_preset_names[$USER_FX_PRESETS]
	declare !kit_A_vin_tom_user_preset_names[$USER_FX_PRESETS]
	declare !kit_A_vin_perc_user_preset_names[$USER_FX_PRESETS]
	declare !kit_A_vin_oh_user_preset_names[$USER_FX_PRESETS]
	declare !kit_A_vin_master_user_preset_names[$USER_FX_PRESETS]
	
	$count := 0
	while($count < $USER_FX_PRESETS)
		!kit_A_vin_kick_user_preset_names[$count] := " "
		!kit_A_vin_snare_user_preset_names[$count] := " "
		!kit_A_vin_hihat_user_preset_names[$count] := " "
		!kit_A_vin_tom_user_preset_names[$count] := " "
		!kit_A_vin_perc_user_preset_names[$count] := " "
		!kit_A_vin_oh_user_preset_names[$count] := " "
		!kit_A_vin_master_user_preset_names[$count] := " "
		inc($count)
	end while
	
	read_persistent_var(%kit_A_vin_num_kick_user_presets)
	read_persistent_var(%kit_A_vin_num_snare_user_presets)
	read_persistent_var(%kit_A_vin_num_hihat_user_presets)
	read_persistent_var(%kit_A_vin_num_tom_user_presets)
	read_persistent_var(%kit_A_vin_num_perc_user_presets)
	read_persistent_var(%kit_A_vin_num_oh_user_presets)
	read_persistent_var(%kit_A_vin_num_master_user_presets)
	
	read_persistent_var(%kit_A_vin_kick_user_presets)
	read_persistent_var(%kit_A_vin_snare_user_presets)
	read_persistent_var(%kit_A_vin_hihat_user_presets)
	read_persistent_var(%kit_A_vin_tom_user_presets)
	read_persistent_var(%kit_A_vin_perc_user_presets)
	read_persistent_var(%kit_A_vin_oh_user_presets)
	read_persistent_var(%kit_A_vin_master_user_presets)
	
	{load and specify that stuff}
	%check_id[0] := load_array(%kit_A_vin_num_kick_user_presets,1)
	%check_id[1] := load_array(%kit_A_vin_num_snare_user_presets,1)
	%check_id[2] := load_array(%kit_A_vin_num_hihat_user_presets,1)
	%check_id[3] := load_array(%kit_A_vin_num_tom_user_presets,1)
	%check_id[4] := load_array(%kit_A_vin_num_perc_user_presets,1)
	%check_id[5] := load_array(%kit_A_vin_num_oh_user_presets,1)
	%check_id[6] := load_array(%kit_A_vin_num_master_user_presets,1)
	
	load_array(%kit_A_vin_kick_user_presets,1)
	load_array(%kit_A_vin_snare_user_presets,1)
	load_array(%kit_A_vin_hihat_user_presets,1)
	load_array(%kit_A_vin_tom_user_presets,1)
	load_array(%kit_A_vin_perc_user_presets,1)
	load_array(%kit_A_vin_oh_user_presets,1)
	load_array(%kit_A_vin_master_user_presets,1)
	
	load_array(!kit_A_vin_kick_user_preset_names,1)
	load_array(!kit_A_vin_snare_user_preset_names,1)
	load_array(!kit_A_vin_hihat_user_preset_names,1)
	load_array(!kit_A_vin_tom_user_preset_names,1)
	load_array(!kit_A_vin_perc_user_preset_names,1)
	load_array(!kit_A_vin_oh_user_preset_names,1)
	load_array(!kit_A_vin_master_user_preset_names,1)

	{populate that stuff}
	{kick}
	$count := 0
	while($count < $KICK_FX_PRESETS)
		add_menu_item($fx_preset_kick,!kick_fact_preset_names[$count],$count)
		inc($count)
	end while
	
	add_menu_item($fx_preset_kick,"---------",$KICK_FX_PRESETS)
	if(%kit_A_vin_num_kick_user_presets[0] = 0)
		set_menu_item_visibility(%fx_preset_id[0], $KICK_FX_PRESETS, 0)
	end if
	
	$count := $KICK_FX_PRESETS + 1
	while($count < $KICK_FX_PRESETS + 1 + $USER_FX_PRESETS)
		add_menu_item($fx_preset_kick,!kit_A_vin_kick_user_preset_names[$count - $KICK_FX_PRESETS - 1],$count)
		if($count > $KICK_FX_PRESETS + %kit_A_vin_num_kick_user_presets[0])
			set_menu_item_visibility(%fx_preset_id[0], $count, 0)
		end if
		inc($count)
	end while
	
	{snare}
	$count := 0
	while($count < $SNARE_FX_PRESETS)
		add_menu_item($fx_preset_snare,!snare_fact_preset_names[$count],$count)
		inc($count)
	end while
	
	add_menu_item($fx_preset_snare,"---------",$SNARE_FX_PRESETS)
	if(%kit_A_vin_num_snare_user_presets[0] = 0)
		set_menu_item_visibility(%fx_preset_id[1], $SNARE_FX_PRESETS, 0)
	end if
	
	$count := $SNARE_FX_PRESETS + 1
	while($count < $SNARE_FX_PRESETS + 1 + $USER_FX_PRESETS)
		add_menu_item($fx_preset_snare,!kit_A_vin_snare_user_preset_names[$count - $SNARE_FX_PRESETS - 1],$count)
		if($count > $SNARE_FX_PRESETS + %kit_A_vin_num_snare_user_presets[0])
			set_menu_item_visibility(%fx_preset_id[1], $count, 0)
		end if
		inc($count)
	end while
	
	{hihat}
	$count := 0
	while($count < $HIHAT_FX_PRESETS)
		add_menu_item($fx_preset_hihat,!hihat_fact_preset_names[$count],$count)
		inc($count)
	end while
	
	add_menu_item($fx_preset_hihat,"---------",$HIHAT_FX_PRESETS)
	if(%kit_A_vin_num_hihat_user_presets[0] = 0)
		set_menu_item_visibility(%fx_preset_id[2], $HIHAT_FX_PRESETS, 0)
	end if
	
	$count := $HIHAT_FX_PRESETS + 1
	while($count < $HIHAT_FX_PRESETS + 1 + $USER_FX_PRESETS)
		add_menu_item($fx_preset_hihat,!kit_A_vin_hihat_user_preset_names[$count - $HIHAT_FX_PRESETS - 1],$count)
		if($count > $HIHAT_FX_PRESETS + %kit_A_vin_num_hihat_user_presets[0])
			set_menu_item_visibility(%fx_preset_id[2], $count, 0)
		end if
		inc($count)
	end while
	
	{toms}
	$count := 0
	while($count < $TOM_FX_PRESETS)
		add_menu_item($fx_preset_toms,!tom_fact_preset_names[$count],$count)
		inc($count)
	end while
	
	add_menu_item($fx_preset_toms,"---------",$TOM_FX_PRESETS)
	if(%kit_A_vin_num_tom_user_presets[0] = 0)
		set_menu_item_visibility(%fx_preset_id[3], $TOM_FX_PRESETS, 0)
	end if
	
	$count := $TOM_FX_PRESETS + 1
	while($count < $TOM_FX_PRESETS + 1 + $USER_FX_PRESETS)
		add_menu_item($fx_preset_toms,!kit_A_vin_tom_user_preset_names[$count - $TOM_FX_PRESETS - 1],$count)
		if($count > $TOM_FX_PRESETS + %kit_A_vin_num_tom_user_presets[0])
			set_menu_item_visibility(%fx_preset_id[3], $count, 0)
		end if
		inc($count)
	end while
	
	{perc}
	$count := 0
	while($count < $PERC_FX_PRESETS)
		add_menu_item($fx_preset_perc,!perc_fact_preset_names[$count],$count)
		inc($count)
	end while
	
	add_menu_item($fx_preset_perc,"---------",$PERC_FX_PRESETS)
	if(%kit_A_vin_num_perc_user_presets[0] = 0)
		set_menu_item_visibility(%fx_preset_id[4], $PERC_FX_PRESETS, 0)
	end if
	
	$count := $PERC_FX_PRESETS + 1
	while($count < $PERC_FX_PRESETS + 1 + $USER_FX_PRESETS)
		add_menu_item($fx_preset_perc,!kit_A_vin_perc_user_preset_names[$count - $PERC_FX_PRESETS - 1],$count)
		if($count > $PERC_FX_PRESETS + %kit_A_vin_num_perc_user_presets[0])
			set_menu_item_visibility(%fx_preset_id[4], $count, 0)
		end if
		inc($count)
	end while
	
	{oh}
	$count := 0
	while($count < $OH_FX_PRESETS)
		add_menu_item($fx_preset_oh,!oh_fact_preset_names[$count],$count)
		inc($count)
	end while
	
	add_menu_item($fx_preset_oh,"---------",$OH_FX_PRESETS)
	if(%kit_A_vin_num_oh_user_presets[0] = 0)
		set_menu_item_visibility(%fx_preset_id[5], $OH_FX_PRESETS, 0)
	end if
	
	$count := $OH_FX_PRESETS + 1
	while($count < $OH_FX_PRESETS + 1 + $USER_FX_PRESETS)
		add_menu_item($fx_preset_oh,!kit_A_vin_oh_user_preset_names[$count - $OH_FX_PRESETS - 1],$count)
		if($count > $OH_FX_PRESETS + %kit_A_vin_num_oh_user_presets[0])
			set_menu_item_visibility(%fx_preset_id[5], $count, 0)
		end if
		inc($count)
	end while
	
	{master}
	$count := 0
	while($count < $MASTER_FX_PRESETS)
		add_menu_item($fx_preset_master,!master_fact_preset_names[$count],$count)
		inc($count)
	end while
	
	add_menu_item($fx_preset_master,"---------",$MASTER_FX_PRESETS)
	if(%kit_A_vin_num_master_user_presets[0] = 0)
		set_menu_item_visibility(%fx_preset_id[6], $MASTER_FX_PRESETS, 0)
	end if
	
	$count := $MASTER_FX_PRESETS + 1
	while($count < $MASTER_FX_PRESETS + 1 + $USER_FX_PRESETS)
		add_menu_item($fx_preset_master,!kit_A_vin_master_user_preset_names[$count - $MASTER_FX_PRESETS - 1],$count)
		if($count > $OH_FX_PRESETS + %kit_A_vin_num_master_user_presets[0])
			set_menu_item_visibility(%fx_preset_id[6], $count, 0)
		end if
		inc($count)
	end while
	
	make_persistent($fx_preset_kick)
	make_persistent($fx_preset_snare)
	make_persistent($fx_preset_hihat)
	make_persistent($fx_preset_toms)
	make_persistent($fx_preset_perc)
	make_persistent($fx_preset_oh)
	make_persistent($fx_preset_master)
	read_persistent_var($fx_preset_kick)
	read_persistent_var($fx_preset_snare)
	read_persistent_var($fx_preset_hihat)
	read_persistent_var($fx_preset_toms)
	read_persistent_var($fx_preset_perc)
	read_persistent_var($fx_preset_oh)
	read_persistent_var($fx_preset_master)

	{4.3 -- FX PRESETS - FUNCTIONALITY}

		declare %fx_preset_save_array[15] := (0)
		make_persistent(%fx_preset_save_array)
		read_persistent_var(%fx_preset_save_array)
		
		declare %fx_preset_flags[15] := (0)
		
		declare !fx_preset_name_list[15]
		$count := 0
		while($count < 15)
			if(%fx_preset_flags[$count] = 1)
				!fx_preset_name_list[$count] := @empty_preset_text
			else
				select($count)
					case 0 to 2
						!fx_preset_name_list[$count] := get_menu_item_str(%fx_preset_id[$count],%fx_preset_save_array[$count])
					case 3 to 8
						if(%generic_inst_id[$count - 3] < $PERC1_ID)
							!fx_preset_name_list[$count] := get_menu_item_str(%fx_preset_id[3],%fx_preset_save_array[$count])
						else
							!fx_preset_name_list[$count] := get_menu_item_str(%fx_preset_id[4],%fx_preset_save_array[$count])
						end if
					case 9 to 12
						!fx_preset_name_list[$count] := get_menu_item_str(%fx_preset_id[5],%fx_preset_save_array[$count])
					case 14
						!fx_preset_name_list[$count] := get_menu_item_str(%fx_preset_id[6],%fx_preset_save_array[$count])
				end select
			end if
			inc($count)
		end while
		
		$count := 0
		while($count < 3)
			set_control_par(%fx_preset_id[$count],$CONTROL_PAR_VALUE,%fx_preset_save_array[$count])
			inc($count)
		end while
		set_control_par(%fx_preset_id[6],$CONTROL_PAR_VALUE,%fx_preset_save_array[14])
		
		@fx_preset_name := !fx_preset_name_list[$cur_selection]
		
		select ($cur_selection)
			case 0 to 2
				set_control_par(%fx_preset_id[$cur_selection],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			case 3 to 8
				if(%generic_inst_id[$cur_selection - 3] < $PERC1_ID)
					set_control_par(%fx_preset_id[3],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par(%fx_preset_id[3],$CONTROL_PAR_VALUE,%fx_preset_save_array[$cur_selection])
				else
					set_control_par(%fx_preset_id[4],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par(%fx_preset_id[4],$CONTROL_PAR_VALUE,%fx_preset_save_array[$cur_selection])
				end if
			case 9 to 12
				set_control_par(%fx_preset_id[5],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				set_control_par(%fx_preset_id[5],$CONTROL_PAR_VALUE,%fx_preset_save_array[$cur_selection])
			case 13
				$count := 0
				while($count < num_elements(%fx_preset_id))
					set_control_par(%fx_preset_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					inc($count)
				end while
			case 14
				set_control_par(%fx_preset_id[6],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		end select

{3.3 -- CHAN - OUTPUT & PURGING}

	declare ui_menu $output_menu
	declare ui_button $output_menu_dummy
	declare ui_menu $purge_white
	declare ui_menu $purge_red
	declare ui_label $lb_purge_master (1,1)
	
	declare %output_control_id[5]
	%output_control_id[0] := get_ui_id($output_menu)
	%output_control_id[1] := get_ui_id($purge_white)
	%output_control_id[2] := get_ui_id($purge_red)
	%output_control_id[3] := get_ui_id($lb_purge_master)
	%output_control_id[4] := get_ui_id($output_menu_dummy)
	
	set_control_help($output_menu,"Channel Output: Sets the output of the channel. Note: any setting other than Master will cause this channel to bypass the master bus effects.")
	set_control_help($purge_white,"Unload: Removes the samples for this channel from memory. Do this if you do not plan to use the selected channel in your project. This will disable the channel.")
	set_control_help($purge_red,"Reload: Reloads the samples for this channel into memory and activates the channel.")
	
	declare ui_button $mask_kick
	declare ui_button $mask_snare
	declare ui_button $mask_hihat
	declare ui_button $mask_gen1
	declare ui_button $mask_gen2
	declare ui_button $mask_gen3
	declare ui_button $mask_gen4
	declare ui_button $mask_gen5
	declare ui_button $mask_gen6
	declare ui_button $mask_oh1
	declare ui_button $mask_oh2
	declare ui_button $mask_oh3
	declare ui_button $mask_oh4
	
	declare ui_button $chan_mask1
	declare ui_button $chan_mask2
	declare ui_button $chan_mask3
	
	declare %mask_id[16]
	%mask_id[0] := get_ui_id($mask_kick)
	%mask_id[1] := get_ui_id($mask_snare)
	%mask_id[2] := get_ui_id($mask_hihat)
	%mask_id[3] := get_ui_id($mask_gen1)
	%mask_id[4] := get_ui_id($mask_gen2)
	%mask_id[5] := get_ui_id($mask_gen3)
	%mask_id[6] := get_ui_id($mask_gen4)
	%mask_id[7] := get_ui_id($mask_gen5)
	%mask_id[8] := get_ui_id($mask_gen6)
	%mask_id[9] := get_ui_id($mask_oh1)
	%mask_id[10] := get_ui_id($mask_oh2)
	%mask_id[11] := get_ui_id($mask_oh3)
	%mask_id[12] := get_ui_id($mask_oh4)
	%mask_id[13] := get_ui_id($chan_mask1)
	%mask_id[14] := get_ui_id($chan_mask2)
	%mask_id[15] := get_ui_id($chan_mask3)
	
	set_control_par_str(%output_control_id[3],$CONTROL_PAR_PICTURE,"NID_mixer_lbl_masteroutput")
	move_control_px($lb_purge_master,473,365)
	set_text($lb_purge_master,"")
	
	set_control_par_str(%output_control_id[0],$CONTROL_PAR_PICTURE,"NID_mixer_dropdown_output")
	set_control_par(%output_control_id[0],$CONTROL_PAR_FONT_TYPE,$FONT_ID1)
	set_control_par(%output_control_id[0],$CONTROL_PAR_TEXTPOS_Y,5)
	move_control_px($output_menu,491,409)
	
	set_control_par_str(%output_control_id[4],$CONTROL_PAR_PICTURE,"NID_mixer_dropdown_output")
	set_control_par(%output_control_id[4],$CONTROL_PAR_FONT_TYPE,$FONT_ID1)
	set_control_par(%output_control_id[4],$CONTROL_PAR_TEXTPOS_Y,5)
	move_control_px($output_menu_dummy,491,409)
	
	add_menu_item($output_menu,"Master",-1)
	$count := 0
	while($count < $NUM_OUTPUT_CHANNELS)
		add_menu_item($output_menu,output_channel_name($count),$count)
		inc($count)
	end while

	declare %channel_output[13]
	$count := 0
	while($count < 13)
		%channel_output[$count] := -1
		inc($count)
	end while
	make_persistent(%channel_output)
	read_persistent_var(%channel_output)

	make_instr_persistent(%channel_output)
	
	$count := 0
	while($count < 13)
		if(%channel_output[$count] >= $NUM_OUTPUT_CHANNELS)
			%channel_output[$count] := -1
			set_engine_par($ENGINE_PAR_OUTPUT_CHANNEL,-1,-1,-1,$NI_BUS_OFFSET+$count)
		end if
		inc($count)
	end while
	
	if($cur_selection < 13)
		$output_menu := %channel_output[$cur_selection]
	end if
	set_control_par_str(%output_control_id[4],$CONTROL_PAR_TEXT,get_menu_item_str(%output_control_id[0], $output_menu+1))
	
	$count := 0
	while ($count < 9 + $NUM_OF_OH)
		set_control_par_str(%mask_id[$count],$CONTROL_PAR_TEXT,"")
		set_control_par(%mask_id[$count],$CONTROL_PAR_HEIGHT,258)
		set_control_par(%mask_id[$count],$CONTROL_PAR_POS_Y,82)
		if($count < 9)
			if($cur_selection = $count)
				set_control_par_str(%mask_id[$count],$CONTROL_PAR_PICTURE,"NID_mixer_overlay_channel2")
			else
				set_control_par_str(%mask_id[$count],$CONTROL_PAR_PICTURE,"NID_mixer_overlay_channel1")
			end if
			set_control_par(%mask_id[$count],$CONTROL_PAR_WIDTH,48)
			set_control_par(%mask_id[$count],$CONTROL_PAR_POS_X,($count*$CLOSE_CHAN_WIDTH) + 6)
		else
			if($cur_selection = $count)
				set_control_par_str(%mask_id[$count],$CONTROL_PAR_PICTURE,"NID_mixer_overlay_kitmic2_" & $NUM_OF_OH & "ch")
			else
				set_control_par_str(%mask_id[$count],$CONTROL_PAR_PICTURE,"NID_mixer_overlay_kitmic1_" & $NUM_OF_OH & "ch")
			end if
			set_control_par(%mask_id[$count],$CONTROL_PAR_POS_X,($KIT_CHAN_OFFSET + (($count-9)*$KIT_CHAN_WIDTH)) - 2)
		end if
		if(%purge_state[$count] = 1)
			set_control_par(%mask_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		end if
		inc($count)
	end while
	
	if ($NUM_OF_OH < 4)
		$count := 9 + $NUM_OF_OH
		while($count < 13)
			set_control_par(%mask_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			inc($count)
		end while
	end if
	
	set_control_par_str(%mask_id[13],$CONTROL_PAR_PICTURE,"NID_mixer_overlay_purgedfx1")
	set_control_par_str(%mask_id[13],$CONTROL_PAR_TEXT,"")
	set_control_par(%mask_id[13],$CONTROL_PAR_WIDTH,468)
	set_control_par(%mask_id[13],$CONTROL_PAR_HEIGHT,112)
	set_control_par_str(%mask_id[14],$CONTROL_PAR_PICTURE,"NID_mixer_overlay_purgedfx2")
	set_control_par_str(%mask_id[14],$CONTROL_PAR_TEXT,"")
	set_control_par(%mask_id[14],$CONTROL_PAR_WIDTH,155)
	set_control_par(%mask_id[14],$CONTROL_PAR_HEIGHT,88)
	set_control_par_str(%mask_id[15],$CONTROL_PAR_PICTURE,"NID_mixer_overlay_purgedfx3")
	set_control_par_str(%mask_id[15],$CONTROL_PAR_TEXT,"")
	set_control_par(%mask_id[15],$CONTROL_PAR_WIDTH,635)
	set_control_par(%mask_id[15],$CONTROL_PAR_HEIGHT,21)
	
	move_control_px($chan_mask1,0,364)
	move_control_px($chan_mask2,473,388)
	move_control_px($chan_mask3,0,487)
		
	set_control_par_str(%output_control_id[1],$CONTROL_PAR_PICTURE,"NID_mixer_dropdown_purgewhite")
	set_control_par_str(%output_control_id[2],$CONTROL_PAR_PICTURE,"NID_mixer_dropdown_purgered")
	$count := 1
	while($count < 3)
		set_control_par(%output_control_id[$count],$CONTROL_PAR_POS_X,593)
		set_control_par(%output_control_id[$count],$CONTROL_PAR_POS_Y,364)
		set_control_par(%output_control_id[$count],$CONTROL_PAR_TEXTPOS_Y,50)
		inc($count)
	end while
	
	add_menu_item($purge_white,"Unload Channel",1)
	add_menu_item($purge_red,"Load Channel",1)
	
	if($fx_view = $VIEW_SETTINGS and $cur_selection # 13)
		if($cur_selection = 14)
			$count := 0
			while($count < num_elements(%output_control_id))
				set_control_par(%output_control_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				inc($count)
			end while
			set_control_par(%mask_id[13],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(%mask_id[14],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(%mask_id[15],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(%output_control_id[3],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		else
			if(%purge_state[$cur_selection] = 1)
				set_control_par(%mask_id[13],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				set_control_par(%mask_id[14],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				set_control_par(%mask_id[15],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				set_control_par(%output_control_id[2],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				set_control_par(%output_control_id[4],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			else
				set_control_par(%output_control_id[1],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				set_control_par(%output_control_id[0],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			end if
			set_control_par(%output_control_id[3],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		end if
	else
		$count := 0
		while($count < num_elements(%output_control_id))
			set_control_par(%output_control_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			inc($count)
		end while
		set_control_par(%mask_id[13],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(%mask_id[14],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(%mask_id[15],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	end if

{4 -- FX PRESETS}
	{4.1 - 4.2 - 4.3 Moved above so by order of declaration the overlay is ABOVE the FX Preset handling menu controls}
	


		
{5 -- MIXER PRESETS
5.1 -- PRESETS - CONTROLS}

	declare ui_menu $mixer_preset_menu
	declare ui_button $mixer_preset_prev
	declare ui_button $mixer_preset_next
	declare ui_button $mixer_preset_save
	declare ui_button $mixer_preset_delete
	declare ui_text_edit @mixer_preset_name
	
	declare %preset_controls[6]
	%preset_controls[0] := get_ui_id($mixer_preset_menu)
	%preset_controls[1] := get_ui_id($mixer_preset_prev)
	%preset_controls[2] := get_ui_id($mixer_preset_next)
	%preset_controls[3] := get_ui_id($mixer_preset_save)
	%preset_controls[4] := get_ui_id($mixer_preset_delete)
	%preset_controls[5] := get_ui_id(@mixer_preset_name)
	
	set_control_par_str(%preset_controls[0],$CONTROL_PAR_PICTURE,"NID_header_dropdown_preset")
	set_control_par(%preset_controls[0],$CONTROL_PAR_TEXTPOS_Y,50)
	set_control_par(%preset_controls[0],$CONTROL_PAR_HEIGHT,21)
	set_control_par(%preset_controls[0],$CONTROL_PAR_WIDTH,162)
	move_control_px($mixer_preset_menu,10,28)
	
	set_control_par_str(%preset_controls[1],$CONTROL_PAR_PICTURE,"NID_header_btn_prev")
	set_control_par(%preset_controls[1],$CONTROL_PAR_HEIGHT,21)
	set_control_par(%preset_controls[1],$CONTROL_PAR_WIDTH,21)
	move_control_px($mixer_preset_prev,139,13)
	set_text($mixer_preset_prev,"")
	
	set_control_par_str(%preset_controls[2],$CONTROL_PAR_PICTURE,"NID_header_btn_next")
	set_control_par(%preset_controls[2],$CONTROL_PAR_HEIGHT,21)
	set_control_par(%preset_controls[2],$CONTROL_PAR_WIDTH,21)
	move_control_px($mixer_preset_next,155,13)
	set_text($mixer_preset_next,"")
	
	set_control_par_str(%preset_controls[3],$CONTROL_PAR_PICTURE,"NID_header_btn_save")
	set_control_par(%preset_controls[3],$CONTROL_PAR_HEIGHT,21)
	set_control_par(%preset_controls[3],$CONTROL_PAR_WIDTH,21)
	move_control_px($mixer_preset_save,107,13)
	set_text($mixer_preset_save,"")
	
	set_control_par_str(%preset_controls[4],$CONTROL_PAR_PICTURE,"NID_header_btn_delete")
	set_control_par(%preset_controls[4],$CONTROL_PAR_HEIGHT,21)
	set_control_par(%preset_controls[4],$CONTROL_PAR_WIDTH,21)
	move_control_px($mixer_preset_delete,123,15)
	set_text($mixer_preset_delete,"")
	
	set_control_par(%preset_controls[5],$CONTROL_PAR_FONT_TYPE,$FONT_ID2)
	set_control_par(%preset_controls[5],$CONTROL_PAR_HEIGHT,13)
	set_control_par(%preset_controls[5],$CONTROL_PAR_WIDTH,133)
	move_control_px(@mixer_preset_name,17,32)
	
	set_control_help($mixer_preset_menu,"Mixer Preset Menu: Selects and loads settings for the whole mixer.")
	set_control_help($mixer_preset_prev,"Previous Mixer Preset: Selects and loads settings for the whole mixer from the preset that is located before this one in the mixer preset menu.")
	set_control_help($mixer_preset_next,"Next Mixer Preset: Selects and loads settings for the whole mixer from the preset that is located after this one in the mixer preset menu.")
	set_control_help($mixer_preset_save,"Save Mixer Preset: Saves your current mixer settings. You cannot save over factory presets, if you click save while you have a factory preset selected, a new preset will be generated with the same name at the end of the mixer preset menu.")
	set_control_help($mixer_preset_delete,"Delete Mixer Preset: Deletes the currently selected mixer preset. You cannot delete factory presets.")
	set_control_help(@mixer_preset_name,"Mixer Preset Name: Enter the name you wish to give the next mixer preset you save.")
	
{5.2 -- PRESETS - ARRAYS}
	{15 Factory Presets, 25 User Presets}
	
	declare const $FACTORY_PRESETS := 9
	declare const $USER_PRESETS := 30

	declare %vin_kit_A_mixerpreset_sends[$USER_PRESETS*15]
	declare %vin_kit_A_mixerpreset_pan[$USER_PRESETS*15]
	declare %vin_kit_A_mixerpreset_solo[$USER_PRESETS*15]
	declare %vin_kit_A_mixerpreset_mute[$USER_PRESETS*15]
	declare %vin_kit_A_mixerpreset_vol[$USER_PRESETS*15]
	declare %vin_kit_A_mixerpreset_eq[$USER_PRESETS*15*13]
	declare %vin_kit_A_mixerpreset_trans[$USER_PRESETS*15*4]
	declare %vin_kit_A_mixerpreset_comp[$USER_PRESETS*15*7]
	declare %vin_kit_A_mixerpreset_tape[$USER_PRESETS*15*4]
	declare %vin_kit_A_mixerpreset_settings[$USER_PRESETS*15*4]
	declare %vin_kit_A_mixerpreset_onoff[$USER_PRESETS*15*4]
	declare %vin_kit_A_mixerpreset_reverb[$USER_PRESETS*2]
	declare %vin_kit_A_mixer_userpresets[1]
	declare !vin_kit_A_mixerpreset_names[$USER_PRESETS]

	$count := 0
	while($count < $USER_PRESETS)
		!vin_kit_A_mixerpreset_names[$count] := " "
		inc($count)
	end while
	
	declare %fact_mixerpreset_sends[$FACTORY_PRESETS*15] := (...
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...
	145, 223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, ...
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...
	0, 0, 0, 0, 0, 0, 0, 631, 0, 0, 0, 0, 0, 0, 0, ...
	0, 276, 204, 250, 322, 0, 0, 0, 0, 0, 0, 310, 0, 0, 0, ...
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...
	0, 0, 0, 303, 362, 0, 0, 631, 0, 0, 0, 0, 0, 0, 0, ...
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0...
	)
	
	declare %fact_mixerpreset_pan[$FACTORY_PRESETS*15] := (...
	500000, 500000, 256579, 500000, 500000, 500000, 500000, 500000, 0, 0, 500000, 0, 500000, 0, 0, ...
	500000, 500000, 302632, 348685, 585527, 552632, 644737, 500000, 0, 388158, 500000, 592104, 500000, 0, 421052, ...
	500000, 500000, 342106, 223684, 769736, 500000, 500000, 500000, 0, 1000000, 500000, 0, 500000, 0, 1000000, ...
	513158, 486842, 500000, 506579, 532895, 519737, 493421, 500000, 0, 736840, 473684, 1000000, 519737, 0, 1000000, ...
	500000, 500000, 210526, 460526, 703947, 552632, 644737, 500000, 0, 552632, 500000, 736842, 500000, 0, 1000000, ...
	500000, 500000, 236842, 269737, 736842, 500000, 500000, 500000, 0, 394737, 500000, 460527, 500000, 0, 1000000, ...
	513158, 486842, 0, 0, 1000000, 453948, 500000, 500000, 0, 1000000, 473684, 1000000, 519737, 0, 1000000, ...
	500000, 500000, 256579, 171052, 828947, 500000, 500000, 500000, 0, 651316, 500000, 1000000, 500000, 0, 651316, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 1000000, 500000, 1000000, 500000, 0, 1000000...
	)
	
	declare %fact_mixerpreset_solo[$FACTORY_PRESETS*15] := (0)
	
	declare %fact_mixerpreset_mute[$FACTORY_PRESETS*15] := (...
	0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, ...
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...
	0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, ...
	0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, ...
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, ...
	0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, ...
	0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, ...
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0...
	)
	
	declare %fact_mixerpreset_vol[$FACTORY_PRESETS*15] := (...
	40, 71, 40, 71, 71, 43, 36, 55, 71, 71, 75, 71, 85, 71, 96, ...
	73, 39, 67, 54, 49, 71, 42, 42, 71, 62, 53, 59, 55, 71, 88, ...
	76, 63, 40, 52, 53, 0, 0, 0, 71, 91, 71, 71, 70, 71, 64, ...
	62, 71, 71, 71, 71, 71, 71, 71, 71, 71, 54, 71, 55, 70, 60, ...
	58, 70, 68, 67, 76, 71, 48, 48, 71, 56, 0, 48, 72, 64, 64, ...
	69, 57, 43, 60, 60, 71, 71, 71, 71, 71, 0, 48, 0, 71, 65, ...
	70, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 55, ...
	52, 73, 40, 78, 79, 71, 71, 71, 71, 69, 51, 46, 62, 71, 62, ...
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 59...
	)
	
	declare %fact_mixerpreset_eq[$FACTORY_PRESETS*15*13] := ( ...
	214286, 571430, 500000, 339286, 119047, 500000, 500000, 500000, 500000, 500000, 648435, 1, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 363095, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 297619, 398810, 500000, 500000, 500000, 654762, 815476, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 333333, 107142, 500000, 392857, 446429, 500000, 500000, 397000, 0, 0, ...
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...
	309524, 565477, 500000, 261905, 0, 500000, 500000, 285714, 571429, 500000, 397000, 0, 0, ...
	...
	500000, 273810, 630952, 220238, 351190, 500000, 452381, 500000, 404762, 523809, 593006, 0, 0, ...
	476191, 160714, 1000000, 380953, 345238, 815476, 547620, 547619, 547620, 642857, 453929, 0, 0, ...
	500000, 220238, 500000, 500000, 500000, 500000, 404762, 702381, 380952, 500000, 397000, 0, 0, ...
	660714, 613095, 636905, 577381, 369048, 1000000, 309524, 0, 428571, 500000, 397000, 0, 0, ...
	244047, 601190, 619047, 345238, 166667, 500000, 636905, 720238, 565476, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 285714, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	303571, 0, 500000, 494048, 500000, 1000000, 648810, 571429, 446429, 779762, 397000, 0, 0, ...
	863096, 172619, 410714, 404762, 119048, 732142, 488095, 779762, 482144, 440476, 797000, 0, 0, ...
	500000, 339286, 1000000, 315476, 89286, 500000, 500000, 500000, 428571, 500000, 397000, 0, 0, ...
	410714, 434524, 648809, 125000, 214287, 928571, 488095, 321429, 327381, 648810, 582018, 0, 0, ...
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...
	279762, 392857, 1000000, 345238, 35715, 684524, 452382, 208333, 452381, 500000, 397000, 0, 0, ...
	...
	291667, 702382, 500000, 351190, 0, 500000, 500000, 500000, 625000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 309524, 309524, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...
	500000, 500000, 500000, 482143, 0, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	...
	136905, 410714, 0, 315477, 291666, 1000000, 869048, 321429, 232142, 583333, 397000, 1, 0, ...
	619048, 553572, 0, 339285, 0, 500000, 565476, 1000000, 577380, 369048, 316351, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 404762, 500000, 500000, 250000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	226190, 607143, 1000000, 410714, 226191, 1000000, 547619, 630952, 476190, 500000, 373280, 1, 0, ...
	202381, 744048, 1000000, 386903, 154762, 1000000, 642857, 386904, 315476, 1000000, 202494, 1, 0, ...
	500000, 398809, 0, 446428, 220238, 1000000, 654762, 303571, 315476, 1000000, 216724, 1, 0, ...
	500000, 500000, 500000, 500000, 500000, 1000000, 636905, 500000, 345238, 1000000, 249935, 1, 0, ...
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...
	500000, 500000, 0, 428571, 357142, 500000, 500000, 500000, 541667, 839285, 797000, 0, 0, ...
	...
	0, 345239, 690476, 357143, 0, 678571, 630952, 755952, 654762, 458333, 593006, 0, 0, ...
	476191, 196428, 1000000, 238095, 345238, 815476, 678571, 547619, 666667, 642857, 453929, 0, 0, ...
	500000, 154762, 732143, 238095, 398810, 500000, 601190, 702381, 500000, 500000, 397000, 0, 0, ...
	291667, 553572, 500000, 375000, 244048, 702381, 434524, 416667, 613095, 500000, 397000, 0, 0, ...
	208333, 565476, 166667, 279762, 160714, 500000, 523810, 380952, 607143, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	553572, 303572, 440476, 267857, 178572, 732142, 249999, 452381, 422619, 440476, 797000, 0, 0, ...
	142857, 678571, 684524, 357143, 208333, 916667, 559524, 630952, 553572, 500000, 397000, 0, 0, ...
	410714, 309524, 648809, 202381, 208334, 928571, 392857, 321429, 404762, 648810, 582018, 0, 0, ...
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...
	0, 428571, 1000000, 422619, 101191, 625000, 458334, 226190, 452381, 500000, 397000, 0, 0, ...
	...
	375000, 547620, 500000, 500000, 500000, 500000, 696428, 732143, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 648810, 1000000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 666667, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 410714, 0, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 398809, 0, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 613095, 803571, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 404762, 53571, 500000, 500000, 500000, 648809, 833334, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...
	500000, 500000, 500000, 357143, 89286, 500000, 500000, 500000, 577381, 500000, 397000, 0, 0, ...
	...
	214286, 636905, 0, 297619, 291666, 1000000, 720238, 571430, 732142, 398809, 449186, 0, 0, ...
	416667, 583333, 0, 357143, 0, 500000, 488095, 1000000, 505953, 279762, 468160, 1, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	333333, 744048, 500000, 500000, 500000, 1000000, 827381, 1000000, 500000, 500000, 306863, 1, 0, ...
	339286, 767857, 500000, 500000, 500000, 1000000, 833334, 1000000, 500000, 500000, 359047, 1, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 404762, 500000, 500000, 250000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	226190, 607143, 1000000, 410714, 226191, 1000000, 523810, 642857, 589285, 375000, 491881, 1, 0, ...
	386905, 1000000, 0, 250000, 244046, 1000000, 738095, 386904, 809524, 178571, 270410, 0, 0, ...
	500000, 398809, 0, 369047, 220238, 1000000, 708334, 315476, 333333, 1000000, 254676, 1, 0, ...
	500000, 500000, 500000, 500000, 500000, 1000000, 636905, 500000, 345238, 1000000, 245187, 1, 0, ...
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...
	166667, 601190, 500000, 404762, 35714, 1000000, 565476, 1000000, 500000, 500000, 776523, 1, 0, ...
	...
	214286, 660714, 0, 297619, 291666, 1000000, 720238, 571430, 732142, 398809, 449186, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 815476, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 363095, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	702381, 398809, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 416667, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 297619, 398810, 500000, 500000, 500000, 654762, 815476, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 333333, 107142, 500000, 392857, 446429, 500000, 500000, 397000, 0, 0, ...
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...
	309524, 571429, 500000, 267857, 0, 500000, 500000, 285714, 571429, 500000, 397000, 0, 0, ...
	...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0, ...
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...
	500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 500000, 397000, 0, 0...
	...
	)
	
	declare %fact_mixerpreset_trans[$FACTORY_PRESETS*15*4] := ( ...
	500000, 500000, 369048, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	0, 0, 0, 0, ...
	500000, 500000, 500000, 397000, ...
	...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	0, 0, 0, 0, ...
	500000, 500000, 500000, 397000, ...
	...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	0, 0, 0, 0, ...
	500000, 500000, 500000, 397000, ...
	...
	500000, 523810, 476191, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 434523, 547619, 397000, ...
	500000, 392857, 607143, 392256, ...
	500000, 315475, 577383, 397000, ...
	500000, 297618, 601192, 397000, ...
	0, 0, 0, 0, ...
	500000, 500000, 500000, 397000, ...
	...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	0, 0, 0, 0, ...
	500000, 500000, 500000, 397000, ...
	...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	0, 0, 0, 0, ...
	500000, 500000, 500000, 397000, ...
	...
	500000, 601192, 375001, 397000, ...
	500000, 589286, 636905, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 386904, 595238, 397000, ...
	500000, 392857, 642857, 392256, ...
	500000, 315475, 410714, 397000, ...
	500000, 297618, 404764, 397000, ...
	0, 0, 0, 0, ...
	500000, 500000, 500000, 397000, ...
	...
	500000, 500002, 375001, 397000, ...
	500000, 500000, 285714, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 309524, 397000, ...
	500000, 500000, 500000, 397000, ...
	0, 0, 0, 0, ...
	500000, 500000, 690476, 397000, ...
	...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	500000, 500000, 500000, 397000, ...
	0, 0, 0, 0, ...
	500000, 500000, 500000, 397000...
	...
	)
	
	declare %fact_mixerpreset_comp[$FACTORY_PRESETS*15*7] := (...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	0, 0, 0, 0, 0, 0, 0, ...
	898810, 200000, 500000, 1000000, 0, 1000000, 797000, ...
	...
	0, 200000, 369048, 500000, 500000, 1000000, 397000, ...
	238095, 438095, 428571, 839286, 1000000, 797619, 397000, ...
	589285, 247619, 1000000, 0, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	458333, 277381, 1000000, 500000, 1000000, 1000000, 397000, ...
	511905, 384524, 1000000, 0, 1000000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	0, 0, 0, 0, 0, 0, 0, ...
	345238, 200000, 386905, 654762, 500000, 1000000, 695875, ...
	...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 497619, 500000, 500000, 500000, 1000000, 397000, ...
	0, 0, 0, 0, 0, 0, 0, ...
	851190, 200000, 500000, 500000, 0, 1000000, 397000, ...
	...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	0, 0, 0, 0, 0, 0, 0, ...
	0, 414286, 130952, 1000000, 0, 184524, 487137, ...
	...
	0, 200000, 369048, 500000, 500000, 1000000, 397000, ...
	0, 378572, 375000, 791667, 1000000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	0, 247619, 500000, 0, 1000000, 1000000, 411232, ...
	0, 0, 0, 0, 0, 0, 0, ...
	345238, 200000, 261905, 500000, 500000, 1000000, 638946, ...
	...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 497619, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	0, 0, 0, 0, 0, 0, 0, ...
	815476, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	...
	291666, 313095, 500000, 1000000, 0, 333333, 397000, ...
	101190, 503572, 500000, 803571, 452381, 375000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	0, 0, 0, 0, 0, 0, 0, ...
	660714, 319048, 500000, 732143, 1000000, 279762, 397000, ...
	...
	291666, 313095, 500000, 1000000, 0, 333333, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	345238, 259524, 452381, 500000, 0, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	0, 0, 0, 0, 0, 0, 0, ...
	0, 200000, 1000000, 0, 0, 291666, 797000, ...
	...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000, ...
	0, 0, 0, 0, 0, 0, 0, ...
	500000, 200000, 500000, 500000, 500000, 1000000, 397000...
	...
	)

	declare %fact_mixerpreset_tape[$FACTORY_PRESETS*15*4] := ( ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 0, 0, 0, ...
	0, 500000, 1000000, 420720, ...
	...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	517857, 1000000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	708333, 648810, 750000, 420720, ...
	0, 0, 0, 0, ...
	0, 738095, 0, 469659, ...
	...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 0, 0, 0, ...
	0, 500000, 1000000, 681642, ...
	...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	517857, 1000000, 0, 321095, ...
	517857, 1000000, 0, 321095, ...
	0, 0, 0, 0, ...
	0, 500000, 1000000, 657922, ...
	...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	708333, 648810, 750000, 420720, ...
	0, 0, 0, 0, ...
	291666, 732143, 511905, 577273, ...
	...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 0, 0, 0, ...
	0, 500000, 1000000, 797000, ...
	...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	517857, 1000000, 0, 321095, ...
	517857, 1000000, 0, 321095, ...
	0, 0, 0, 0, ...
	0, 500000, 1000000, 368536, ...
	...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 636905, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 0, 0, 0, ...
	0, 500000, 1000000, 477649, ...
	...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 500000, 1000000, 397000, ...
	0, 0, 0, 0, ...
	0, 500000, 1000000, 657922...
	...
	)
	
	declare %fact_mixerpreset_settings[$FACTORY_PRESETS*15*4] := (...
	76, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	...
	71, 71, 71, 0, ...
	71, 72, 76, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	...
	71, 0, 71, 0, ...
	71, 29, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	...
	56, 71, 34, 0, ...
	71, 57, 63, 3, ...
	0, 0, 0, 0, ...
	0, 0, 0, 2, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 3, ...
	0, 0, 0, 3, ...
	0, 0, 0, 3, ...
	0, 0, 0, 3, ...
	0, 0, 0, 0, ...
	0, 0, 0, 3, ...
	...
	79, 74, 40, 0, ...
	71, 69, 67, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	...
	100, 71, 59, 0, ...
	71, 50, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	...
	71, 71, 71, 3, ...
	75, 10, 23, 3, ...
	0, 0, 0, 0, ...
	0, 0, 0, 3, ...
	0, 0, 0, 3, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 3, ...
	0, 0, 0, 3, ...
	0, 0, 0, 3, ...
	0, 0, 0, 3, ...
	0, 0, 0, 0, ...
	0, 0, 0, 3, ...
	...
	71, 71, 71, 3, ...
	100, 34, 30, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	...
	71, 71, 71, 0, ...
	71, 71, 71, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0...
	...
	)
	
	declare %fact_mixerpreset_onoff[$FACTORY_PRESETS*15*4] := ( ...
	1, 0, 0, 0, ...
	0, 0, 0, 0, ...
	1, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	1, 0, 0, 0, ...
	0, 0, 0, 0, ...
	1, 0, 0, 0, ...
	0, 0, 0, 0, ...
	1, 0, 1, 1, ...
	...
	1, 0, 0, 0, ...
	1, 0, 1, 0, ...
	1, 0, 1, 0, ...
	1, 0, 0, 0, ...
	1, 0, 0, 0, ...
	0, 0, 0, 0, ...
	1, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	1, 0, 1, 0, ...
	0, 0, 1, 1, ...
	1, 0, 0, 0, ...
	1, 0, 0, 1, ...
	0, 0, 0, 0, ...
	1, 0, 1, 1, ...
	...
	1, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	1, 0, 1, 0, ...
	0, 0, 0, 0, ...
	1, 0, 1, 1, ...
	...
	1, 0, 0, 0, ...
	1, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	1, 0, 0, 0, ...
	0, 0, 0, 0, ...
	1, 1, 0, 0, ...
	1, 1, 0, 0, ...
	1, 1, 0, 0, ...
	1, 1, 0, 0, ...
	0, 0, 0, 0, ...
	1, 0, 1, 0, ...
	...
	1, 0, 0, 0, ...
	1, 0, 1, 0, ...
	1, 0, 0, 0, ...
	1, 0, 0, 0, ...
	1, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	1, 0, 0, 0, ...
	1, 0, 0, 0, ...
	1, 0, 0, 1, ...
	0, 0, 0, 0, ...
	1, 0, 1, 1, ...
	...
	1, 0, 0, 0, ...
	0, 0, 0, 0, ...
	1, 0, 0, 0, ...
	1, 0, 0, 0, ...
	1, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	1, 0, 0, 0, ...
	0, 0, 0, 0, ...
	1, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	1, 0, 1, 1, ...
	...
	1, 1, 0, 0, ...
	1, 1, 1, 0, ...
	0, 0, 0, 0, ...
	1, 0, 0, 0, ...
	1, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	1, 0, 0, 0, ...
	0, 0, 0, 0, ...
	1, 1, 0, 0, ...
	1, 1, 0, 0, ...
	1, 1, 0, 0, ...
	1, 1, 0, 0, ...
	0, 0, 0, 0, ...
	1, 0, 1, 1, ...
	...
	1, 1, 0, 0, ...
	0, 1, 0, 0, ...
	1, 0, 0, 0, ...
	0, 0, 0, 0, ...
	1, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	1, 0, 0, 1, ...
	1, 0, 0, 0, ...
	0, 1, 1, 0, ...
	1, 0, 0, 0, ...
	0, 0, 0, 0, ...
	1, 0, 1, 1, ...
	...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 0, ...
	0, 0, 0, 1...
	...
	)
	
	declare %fact_mixerpreset_reverb[$FACTORY_PRESETS*2] := ( ...
	0, 0, ...
	2, 1, ...
	0, 0, ...
	1, 1, ...
	2, 1, ...
	0, 0, ...
	1, 1, ...
	0, 0, ...
	0, 0...
	)
	
	declare !fact_mixerpreset_names[$FACTORY_PRESETS]
	!fact_mixerpreset_names[0] := "Ragtime - Dixieland"
	!fact_mixerpreset_names[1] := "New Orleans Jazz"
	!fact_mixerpreset_names[2] := "Swing"
	!fact_mixerpreset_names[3] := "Bebop - Hardbop"
	!fact_mixerpreset_names[4] := "Latin Jazz"
	!fact_mixerpreset_names[5] := "Showtunes"
	!fact_mixerpreset_names[6] := "Soul - Funk"
	!fact_mixerpreset_names[7] := "Indie"
	!fact_mixerpreset_names[8] := "INIT"

	read_persistent_var(%vin_kit_A_mixerpreset_sends)
	read_persistent_var(%vin_kit_A_mixerpreset_pan)
	read_persistent_var(%vin_kit_A_mixerpreset_solo)
	read_persistent_var(%vin_kit_A_mixerpreset_mute)
	read_persistent_var(%vin_kit_A_mixerpreset_vol)
	read_persistent_var(%vin_kit_A_mixerpreset_eq)
	read_persistent_var(%vin_kit_A_mixerpreset_trans)
	read_persistent_var(%vin_kit_A_mixerpreset_comp)
	read_persistent_var(%vin_kit_A_mixerpreset_tape)
	read_persistent_var(%vin_kit_A_mixerpreset_settings)
	read_persistent_var(%vin_kit_A_mixerpreset_onoff)
	read_persistent_var(%vin_kit_A_mixerpreset_reverb)
	read_persistent_var(%vin_kit_A_mixer_userpresets)
	
	%check_id[7] := load_array(%vin_kit_A_mixer_userpresets,1)
	load_array(%vin_kit_A_mixerpreset_sends,1)
	load_array(%vin_kit_A_mixerpreset_pan,1)
	load_array(%vin_kit_A_mixerpreset_solo,1)
	load_array(%vin_kit_A_mixerpreset_mute,1)
	load_array(%vin_kit_A_mixerpreset_vol,1)
	load_array(%vin_kit_A_mixerpreset_eq,1)
	load_array(%vin_kit_A_mixerpreset_trans,1)
	load_array(%vin_kit_A_mixerpreset_comp,1)
	load_array(%vin_kit_A_mixerpreset_tape,1)
	load_array(%vin_kit_A_mixerpreset_settings,1)
	load_array(%vin_kit_A_mixerpreset_onoff,1)
	load_array(%vin_kit_A_mixerpreset_reverb,1)
	load_array(!vin_kit_A_mixerpreset_names,1)
	
	declare %mixer_async_id[14]
	
	{populate menu}
	
	declare $mixer_preset_flag := 0
	make_persistent($mixer_preset_flag)
	read_persistent_var($mixer_preset_flag)
	
	$count := 0
	while($count < $FACTORY_PRESETS)
		add_menu_item($mixer_preset_menu,!fact_mixerpreset_names[$count],$count)
		inc($count)
	end while
	
	add_menu_item($mixer_preset_menu,"---------",$FACTORY_PRESETS)
	if(%vin_kit_A_mixer_userpresets[0] = 0)
		set_menu_item_visibility(%preset_controls[0], $FACTORY_PRESETS, 0)
	else
		set_menu_item_visibility(%preset_controls[0], $FACTORY_PRESETS, 1)	
	end if
	
	$count := $FACTORY_PRESETS + 1
	while($count < $FACTORY_PRESETS + 1 + $USER_PRESETS)
		add_menu_item($mixer_preset_menu,!vin_kit_A_mixerpreset_names[$count - $FACTORY_PRESETS - 1],$count)
		if($count > $FACTORY_PRESETS + %vin_kit_A_mixer_userpresets[0])
			set_menu_item_visibility(%preset_controls[0], $count, 0)
		end if
		inc($count)
	end while
	
	make_persistent($mixer_preset_menu)
	read_persistent_var($mixer_preset_menu)
	
	if($mixer_preset_menu < $FACTORY_PRESETS)
		set_control_par_str(%preset_controls[4],$CONTROL_PAR_PICTURE,"NID_header_btn_delete-inactive")
	end if
	
	if($mixer_preset_flag = 0)
		@mixer_preset_name := get_menu_item_str(%preset_controls[0],$mixer_preset_menu)
	else
		@mixer_preset_name := @empty_preset_text
	end if
	
	declare $last_mixerpreset
	$last_mixerpreset := $mixer_preset_menu
	declare $preset_helper
	make_persistent($preset_helper)
	declare $preset_change_flag
	
	{FX Preset Names Init "Hack"}
{	$count := 0
	while($count < 15)
		!fx_preset_name_list[$count] := @mixer_preset_name
		inc($count)
	end while}

	@fx_preset_name := !fx_preset_name_list[$cur_selection]
	{/FX Preset Names Init "Hack"}
	
	
{5.3 -- PRESETS - PGS STUFF}

	pgs_create_key(ACTION_TYPE,1)
	pgs_create_key(MIXER_DATA,5)
	{0 = next, 1 = previous, 2 = menu select, 3 = delete, 4 = update}


	
{6 -- GROOVE REMOTE
6.0 -- GROOVE CONTROLS}

		{declarations}
		declare ui_button $play
		declare ui_label $groove_display (1, 1)
		declare ui_button $prev_groove
		declare ui_button $next_groove
		{/declarations}
		
		{ui_ids}
		declare %ui_id[5]
		%ui_id[1] := get_ui_id($play)
		%ui_id[2] := get_ui_id($groove_display)
		%ui_id[3] := get_ui_id($prev_groove)
		%ui_id[4] := get_ui_id($next_groove)
		{/ui_ids}
		
		{Pictures}
		set_control_par_str(%ui_id[1],$CONTROL_PAR_PICTURE,"NID_header_btn_play")
		set_control_par_str(%ui_id[2],$CONTROL_PAR_PICTURE,"NID_header_button_drag")
		set_control_par_str(%ui_id[3],$CONTROL_PAR_PICTURE,"NID_header_btn_prev")
		set_control_par_str(%ui_id[4],$CONTROL_PAR_PICTURE,"NID_header_btn_next")
		{/Pictures}
		
		{Font IDs & Text Position}
		set_control_par(%ui_id[2], $CONTROL_PAR_FONT_TYPE, 13)
		set_control_par(%ui_id[2], $CONTROL_PAR_TEXTPOS_Y,3)
		{/Font IDs & Text Position}

		{Position}
		set_control_par(%ui_id[1],$CONTROL_PAR_POS_X,458)
		set_control_par(%ui_id[1],$CONTROL_PAR_POS_Y,11)
		
		set_control_par(%ui_id[2],$CONTROL_PAR_POS_X,484)
		set_control_par(%ui_id[2],$CONTROL_PAR_POS_Y,32)
		
		set_control_par(%ui_id[3],$CONTROL_PAR_POS_X,589)
		set_control_par(%ui_id[3],$CONTROL_PAR_POS_Y,13)
		
		set_control_par(%ui_id[4],$CONTROL_PAR_POS_X,605)
		set_control_par(%ui_id[4],$CONTROL_PAR_POS_Y,13)
		{/Position}
		
		{Size}		
		set_control_par(%ui_id[1],$CONTROL_PAR_WIDTH,28)
		set_control_par(%ui_id[1],$CONTROL_PAR_HEIGHT,42)
		
		set_control_par(%ui_id[2],$CONTROL_PAR_WIDTH,135)
		set_control_par(%ui_id[2],$CONTROL_PAR_HEIGHT,16)
		
		set_control_par(%ui_id[3],$CONTROL_PAR_WIDTH,19)
		set_control_par(%ui_id[3],$CONTROL_PAR_HEIGHT,18)
		
		set_control_par(%ui_id[4],$CONTROL_PAR_WIDTH,19)
		set_control_par(%ui_id[4],$CONTROL_PAR_HEIGHT,18)
		{/Size}
		
		{Text}
		set_control_par_str(%ui_id[1],$CONTROL_PAR_TEXT,"")
		set_control_par_str(%ui_id[3],$CONTROL_PAR_TEXT,"")
		set_control_par_str(%ui_id[4],$CONTROL_PAR_TEXT,"")
		{/Text}
		
		{Help Text}
		set_control_par_str(%ui_id[1],$CONTROL_PAR_HELP,"Play: Use this control to start or stop playback. Playback is always following host song position if available.")
		set_control_par_str(%ui_id[2],$CONTROL_PAR_HELP,"Active Groove: This is the area where the active groove or fill is displayed at any time. This is also the area from which you can drag the groove to your host project.")
		set_control_par_str(%ui_id[3],$CONTROL_PAR_HELP,"Previous Groove: Use this control to skip to the previous variation of the active groove or fill.")
		set_control_par_str(%ui_id[4],$CONTROL_PAR_HELP,"Next Groove: Use this control to skip to the next variation of the active groove or fill.")
		{/Help Text}
		
		{Other}
		set_control_par(%ui_id[2],$CONTROL_PAR_DND_BEHAVIOUR,1) 
		{/Other}
	
	$init_flag := 0
	
end on

{--- FUNCTIONS ---}

function reverbpicupdate
	if(%selector_values[13] = 1)
		$gui_count := 0
		while($gui_count < 7)
			set_control_par(%reverb_controls[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			inc($gui_count)
			wait($LOAD_WAIT)
		end while
		set_control_par(%reverb_controls[$ir_category],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
	end if
	
	$gui_count := 8
	while($gui_count < 12)
		set_control_par(%reverb_controls[$gui_count],$CONTROL_PAR_PICTURE_STATE,(($ir_category + %reverb_pic_help[$gui_count - 8])) mod 7)
		inc($gui_count)
		wait($LOAD_WAIT)
	end while
	set_control_par(%reverb_controls[12],$CONTROL_PAR_PICTURE_STATE,$ir_category)
end function

function micbalancedisplay
	if($cur_selection # 13)
		set_control_par(%micbalance_id[6],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		if($cur_selection < 2)
			$gui_count := 0
			while($gui_count < 6)
				set_control_par(%micbalance_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				inc($gui_count)
				wait($LOAD_WAIT)
			end while
			$gui_count := $cur_selection*3
			while($gui_count < 3+($cur_selection*3))
				set_control_par(%micbalance_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				inc($gui_count)
				wait($LOAD_WAIT)
			end while
			set_control_par(%micbalance_id[6],$CONTROL_PAR_PICTURE_STATE,$cur_selection)
		else
			$gui_count := 0
			while($gui_count < 6)
				set_control_par(%micbalance_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				inc($gui_count)
				wait($LOAD_WAIT)
			end while
			set_control_par(%micbalance_id[6],$CONTROL_PAR_PICTURE_STATE,2)
		end if
	end if
end function

function movebuttons
	$x_offset := 15

	$gui_count := 0
	while($gui_count < 5)
		set_control_par(%select_onoff_id[$gui_count],$CONTROL_PAR_POS_X,$x_offset + (%tab_order[(%routing_state[$cur_selection]*5) + $gui_count]*70) + %tab_x_adjust[%tab_order[(%routing_state[$cur_selection]*5) + $gui_count]])
		inc($gui_count)
	end while
	
	$gui_count := 5
	while($gui_count < 9)
		set_control_par(%select_onoff_id[$gui_count],$CONTROL_PAR_POS_X,$x_offset + (%tab_order[(%routing_state[$cur_selection]*5) + $gui_count - 5]*70) + %tab_x_adjust[%tab_order[(%routing_state[$cur_selection]*5) + $gui_count - 5]] + 53)
		inc($gui_count)
	end while
end function

function fxpresetdisplay
	$gui_count := 0
	while($gui_count < 7)
		set_control_par(%fx_preset_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($gui_count)
		wait($LOAD_WAIT)
	end while
	
	@fx_preset_name := !fx_preset_name_list[$cur_selection]
	
	select ($cur_selection)
		case 0
			if (%purge_state[$cur_selection] = 1)
				set_control_par(%fx_preset_id[$cur_selection],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				set_control_par(%fx_preset_id[11],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			else
				set_control_par(%fx_preset_id[$cur_selection],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				set_control_par(%fx_preset_id[11],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			end if
			{set_control_par(%fx_preset_id[$cur_selection],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)}
			if (get_control_par(%fx_preset_id[$cur_selection], $CONTROL_PAR_VALUE) < $KICK_FX_PRESETS)
				set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
			else
				set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete")
			end if
		case 1
			if (%purge_state[$cur_selection] = 1)
				set_control_par(%fx_preset_id[$cur_selection],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				set_control_par(%fx_preset_id[11],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			else
				set_control_par(%fx_preset_id[$cur_selection],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				set_control_par(%fx_preset_id[11],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			end if
			if (get_control_par(%fx_preset_id[$cur_selection], $CONTROL_PAR_VALUE) < $SNARE_FX_PRESETS)
				set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
			else
				set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete")
			end if
		case 2
			if (%purge_state[$cur_selection] = 1)
				set_control_par(%fx_preset_id[$cur_selection],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				set_control_par(%fx_preset_id[11],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			else
				set_control_par(%fx_preset_id[$cur_selection],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				set_control_par(%fx_preset_id[11],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			end if
			if (get_control_par(%fx_preset_id[$cur_selection], $CONTROL_PAR_VALUE) < $HIHAT_FX_PRESETS)
				set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
			else
				set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete")
			end if
		case 3 to 8
			if(%generic_inst_id[$cur_selection - 3] < $PERC1_ID)
				if (%purge_state[$cur_selection] = 1)
					set_control_par(%fx_preset_id[3],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par(%fx_preset_id[11],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				else
					set_control_par(%fx_preset_id[3],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					set_control_par(%fx_preset_id[11],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				end if
				set_control_par(%fx_preset_id[3],$CONTROL_PAR_VALUE,%fx_preset_save_array[$cur_selection])
				if (get_control_par(%fx_preset_id[3], $CONTROL_PAR_VALUE) < $TOM_FX_PRESETS)
					set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
				else
					set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete")
				end if
			else
				if (%purge_state[$cur_selection] = 1)
					set_control_par(%fx_preset_id[4],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par(%fx_preset_id[11],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				else
					set_control_par(%fx_preset_id[4],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					set_control_par(%fx_preset_id[11],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				end if
				set_control_par(%fx_preset_id[4],$CONTROL_PAR_VALUE,%fx_preset_save_array[$cur_selection])
				if (get_control_par(%fx_preset_id[4], $CONTROL_PAR_VALUE) < $PERC_FX_PRESETS)
					set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
				else
					set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete")
				end if
			end if
		case 9 to 12
			if (%purge_state[$cur_selection] = 1)
				set_control_par(%fx_preset_id[5],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				set_control_par(%fx_preset_id[11],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			else
				set_control_par(%fx_preset_id[5],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				set_control_par(%fx_preset_id[11],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			end if
			set_control_par(%fx_preset_id[5],$CONTROL_PAR_VALUE,%fx_preset_save_array[$cur_selection])
			if (get_control_par(%fx_preset_id[5], $CONTROL_PAR_VALUE) < $OH_FX_PRESETS)
				set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
			else
				set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete")
			end if
		case 13
			$count := 0
			while($count < num_elements(%fx_preset_id))
				set_control_par(%fx_preset_id[$count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				inc($count)
			end while
		case 14
			set_control_par(%fx_preset_id[6],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			if (get_control_par(%fx_preset_id[6], $CONTROL_PAR_VALUE) < $MASTER_FX_PRESETS)
				set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
			else
				set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete")
			end if
	end select
end function

function purgedisplay
	set_control_par_str(%output_control_id[4],$CONTROL_PAR_TEXT,get_menu_item_str(%output_control_id[0], $output_menu+1))
	if($cur_selection < 13)
		if(%purge_state[$cur_selection] = 1)
			set_control_par(%mask_id[13],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(%mask_id[14],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(%mask_id[15],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(%output_control_id[1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			set_control_par(%output_control_id[2],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(%output_control_id[0],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			set_control_par(%output_control_id[4],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		else
			set_control_par(%mask_id[13],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			set_control_par(%mask_id[14],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			set_control_par(%mask_id[15],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			set_control_par(%output_control_id[2],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			set_control_par(%output_control_id[1],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(%output_control_id[0],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(%output_control_id[4],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		end if
		set_control_par(%output_control_id[3],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	else
		if($cur_selection = 14)
			set_control_par(%mask_id[13],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(%mask_id[14],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(%mask_id[15],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(%output_control_id[0],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(%output_control_id[1],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(%output_control_id[2],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(%output_control_id[3],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			set_control_par(%output_control_id[4],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		end if
	end if
end function

function update_values
	if($fx_view = 4)
		if($cur_selection < 13)
			$output_menu := %channel_output[$cur_selection]
		end if
		call micbalancedisplay
		call purgedisplay
	end if
	{on off & tape & trans}
	$gui_count := 0
	while($gui_count < 4)
		set_control_par(%select_onoff_id[$gui_count+5],$CONTROL_PAR_VALUE,%onoff_arr[($cur_selection*4)+$gui_count])
		set_control_par(%tape_control_id[$gui_count],$CONTROL_PAR_VALUE,%tape_data[($cur_selection*4) + $gui_count])
		set_control_par(%trans_control_id[$gui_count],$CONTROL_PAR_VALUE,%trans_data[($cur_selection*4) + $gui_count])
		inc($gui_count)
		wait($LOAD_WAIT)
	end while
	{eq}
	$gui_count := 0
	while($gui_count < 13)
		set_control_par(%eq_control_id[$gui_count],$CONTROL_PAR_VALUE,%eq_data[($cur_selection*13) + $gui_count])
		inc($gui_count)
		wait($LOAD_WAIT)
	end while
	{comp}
	$gui_count := 0
	while($gui_count < 7)
		set_control_par(%comp_control_id[$gui_count],$CONTROL_PAR_VALUE,%comp_data[($cur_selection*7) + $gui_count])
		inc($gui_count)
		wait($LOAD_WAIT)
	end while
	set_control_par(%routing_id[2],$CONTROL_PAR_PICTURE_STATE,%routing_state[$cur_selection])
	call fxpresetdisplay
	call movebuttons
end function

function fillfxarrays
	$count := 0
	while($count < 15)
		if($count = 14)
			$generic := 1
		else
			$generic := $NI_BUS_OFFSET + $count
		end if
		if($count # 13)
			{eq}
			%eq_data[($count*13)] := get_engine_par($ENGINE_PAR_SEQ_LF_FREQ,-1,$EQ1_SLOT,$generic)
			%eq_data[($count*13) + 1] := get_engine_par($ENGINE_PAR_SEQ_LF_GAIN,-1,$EQ1_SLOT,$generic)
			%eq_data[($count*13) + 2] := get_engine_par($ENGINE_PAR_SEQ_LMF_Q,-1,$EQ1_SLOT,$generic)
			%eq_data[($count*13) + 3] := get_engine_par($ENGINE_PAR_SEQ_LMF_GAIN,-1,$EQ1_SLOT,$generic)
			%eq_data[($count*13) + 4] := get_engine_par($ENGINE_PAR_SEQ_LMF_FREQ,-1,$EQ1_SLOT,$generic)
			%eq_data[($count*13) + 5] := get_engine_par($ENGINE_PAR_SEQ_HMF_Q,-1,$EQ1_SLOT,$generic)
			%eq_data[($count*13) + 6] := get_engine_par($ENGINE_PAR_SEQ_HMF_GAIN,-1,$EQ1_SLOT,$generic)
			%eq_data[($count*13) + 7] := get_engine_par($ENGINE_PAR_SEQ_HMF_FREQ,-1,$EQ1_SLOT,$generic)
			%eq_data[($count*13) + 8] := get_engine_par($ENGINE_PAR_SEQ_HF_GAIN,-1,$EQ1_SLOT,$generic)
			%eq_data[($count*13) + 9] := get_engine_par($ENGINE_PAR_SEQ_HF_FREQ,-1,$EQ1_SLOT,$generic)
			%eq_data[($count*13) + 10] := get_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,-1,$EQ1_SLOT,$generic)
			%eq_data[($count*13) + 11] := get_engine_par($ENGINE_PAR_SEQ_LF_BELL,-1,$EQ1_SLOT,$generic)
			%eq_data[($count*13) + 12] := get_engine_par($ENGINE_PAR_SEQ_HF_BELL,-1,$EQ1_SLOT,$generic)
			{trans}
			%trans_data[($count*4)] := get_engine_par($ENGINE_PAR_TR_INPUT,-1,$TRANS1_SLOT,$generic)
			%trans_data[($count*4) + 1] := get_engine_par($ENGINE_PAR_TR_ATTACK,-1,$TRANS1_SLOT,$generic)
			%trans_data[($count*4) + 2] := get_engine_par($ENGINE_PAR_TR_SUSTAIN,-1,$TRANS1_SLOT,$generic)
			%trans_data[($count*4) + 3] := get_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,-1,$TRANS1_SLOT,$generic)
			{comp}
			%comp_data[($count*7)] := get_engine_par($ENGINE_PAR_SCOMP_THRESHOLD,-1,$COMP_SLOT,$generic)
			%comp_data[($count*7) + 1] := get_engine_par($ENGINE_PAR_SCOMP_MAKEUP,-1,$COMP_SLOT,$generic)
			%comp_data[($count*7) + 2] := get_engine_par($ENGINE_PAR_SCOMP_RATIO,-1,$COMP_SLOT,$generic)
			%comp_data[($count*7) + 3] := get_engine_par($ENGINE_PAR_SCOMP_ATTACK,-1,$COMP_SLOT,$generic)
			%comp_data[($count*7) + 4] := get_engine_par($ENGINE_PAR_SCOMP_RELEASE,-1,$COMP_SLOT,$generic)
			%comp_data[($count*7) + 5] := get_engine_par($ENGINE_PAR_SCOMP_MIX,-1,$COMP_SLOT,$generic)
			%comp_data[($count*7) + 6] := get_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,-1,$COMP_SLOT,$generic)
			{tape}
			%tape_data[($count*4)] := get_engine_par($ENGINE_PAR_TP_GAIN,-1,$TAPE_SLOT,$generic)
			%tape_data[($count*4) + 1] := get_engine_par($ENGINE_PAR_TP_WARMTH,-1,$TAPE_SLOT,$generic)
			%tape_data[($count*4) + 2] := get_engine_par($ENGINE_PAR_TP_HF_ROLLOFF,-1,$TAPE_SLOT,$generic)
			%tape_data[($count*4) + 3] := get_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,-1,$TAPE_SLOT,$generic)
		end if
		inc($count)
		wait($LOAD_WAIT)
	end while
end function

function displayfx
	{hide_everything}
	$gui_count := 0
	while($gui_count < num_elements(%eq_control_id))
		set_control_par(%eq_control_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($gui_count)
		wait($LOAD_WAIT)
	end while
	$gui_count := 0
	while($gui_count < num_elements(%trans_control_id))
		set_control_par(%trans_control_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($gui_count)
		wait($LOAD_WAIT)
	end while
	$gui_count := 0
	while($gui_count < num_elements(%comp_control_id))
		set_control_par(%comp_control_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($gui_count)
		wait($LOAD_WAIT)
	end while
	$gui_count := 0
	while($gui_count < num_elements(%tape_control_id))
		set_control_par(%tape_control_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($gui_count)
		wait($LOAD_WAIT)
	end while
	$gui_count := 0
	while($gui_count < num_elements(%micbalance_id))
		set_control_par(%micbalance_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($gui_count)
		wait($LOAD_WAIT)
	end while
	$gui_count := 0
	while($gui_count < num_elements(%routing_id))
		set_control_par(%routing_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($gui_count)
		wait($LOAD_WAIT)
	end while
	$gui_count := 0
	while($gui_count < num_elements(%output_control_id))
		set_control_par(%output_control_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($gui_count)
		wait($LOAD_WAIT)
	end while
	$gui_count := 0
	while($gui_count < num_elements(%fx_preset_id))
		set_control_par(%fx_preset_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($gui_count)
		wait($LOAD_WAIT)
	end while
	
	{show necessary}
	select($fx_view)
		case 0 {eq}
			$gui_count := 0
			while($gui_count < num_elements(%eq_control_id))
				set_control_par(%eq_control_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				inc($gui_count)
				wait($LOAD_WAIT)
			end while
		case 1 {trans}
			$gui_count := 0
			while($gui_count < num_elements(%trans_control_id))
				set_control_par(%trans_control_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				inc($gui_count)
				wait($LOAD_WAIT)
			end while
		case 2 {comp}
			$gui_count := 0
			while($gui_count < num_elements(%comp_control_id))
				set_control_par(%comp_control_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				inc($gui_count)
				wait($LOAD_WAIT)
			end while
		case 3 {tape}
			$gui_count := 0
			while($gui_count < num_elements(%tape_control_id))
				set_control_par(%tape_control_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				inc($gui_count)
				wait($LOAD_WAIT)
			end while
		case 4 {settings}
			$gui_count := 0
			while($gui_count < num_elements(%routing_id))
				set_control_par(%routing_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				inc($gui_count)
				wait($LOAD_WAIT)
			end while
			call micbalancedisplay
			call purgedisplay
	end select
	
	if($cur_selection = 13)
		set_control_par(get_ui_id($fx_bg),$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[5])
	else
		set_control_par(get_ui_id($fx_bg),$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[$fx_view])
		$gui_count := 7
		while($gui_count < num_elements(%fx_preset_id))
			set_control_par(%fx_preset_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			inc($gui_count)
			wait($LOAD_WAIT)
		end while
		call fxpresetdisplay
	end if
	
end function

function channelselect
	{description: sets the values of the selectors and displays the fx of the selected channel}
	{variables = $cur_selection, $helper}
	if(get_control_par(%chanlabel_id[$cur_selection],$CONTROL_PAR_VALUE) = 0 and $helper = 0)
		set_control_par(%chanlabel_id[$cur_selection],$CONTROL_PAR_VALUE,1)
		exit
	else
	
		$count := 0
		while($count < 15)
			%selector_values[$count] := 0
			inc($count)
			{wait($LOAD_WAIT)}
		end while
		
		%selector_values[$cur_selection] := 1
		
		$count := 0
		while($count < 15)
			set_control_par(%chanlabel_id[$count], $CONTROL_PAR_VALUE, %selector_values[$count])
			set_control_par(%chan_bg_id[$count], $CONTROL_PAR_PICTURE_STATE, %selector_values[$count])
			inc($count)
			{wait($LOAD_WAIT)}
		end while
		
		if($cur_selection < 13 and %purge_state[$cur_selection] = 0)
			$fx_view := $VIEW_SETTINGS
			$select_settings := 1
			$select_eq := 0
			$select_trans := 0
			$select_comp := 0
			$select_tape := 0
			call displayfx
		end if
		
	end if
	
	$gui_count := 0
	while ($gui_count < 9 + $NUM_OF_OH)
		if($gui_count < 9)
			if($cur_selection = $gui_count)
				set_control_par_str(%mask_id[$gui_count],$CONTROL_PAR_PICTURE,"NID_mixer_overlay_channel2")
			else
				set_control_par_str(%mask_id[$gui_count],$CONTROL_PAR_PICTURE,"NID_mixer_overlay_channel1")
			end if
		else
			if($cur_selection = $gui_count)
				set_control_par_str(%mask_id[$gui_count],$CONTROL_PAR_PICTURE,"NID_mixer_overlay_kitmic2_" & $NUM_OF_OH & "ch")
			else
				set_control_par_str(%mask_id[$gui_count],$CONTROL_PAR_PICTURE,"NID_mixer_overlay_kitmic1_" & $NUM_OF_OH & "ch")
			end if
		end if
		inc($gui_count)
		{wait($LOAD_WAIT)}
	end while
	
	if($cur_selection = 13) {reverb}
		{hide_stuff}
		$gui_count := 0
		while($gui_count < num_elements(%select_onoff_id))
			set_control_par(%select_onoff_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			inc($gui_count)
			{wait($LOAD_WAIT)}
		end while
		$gui_count := 0
		while($gui_count < num_elements(%fx_preset_id))
			set_control_par(%fx_preset_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			inc($gui_count)
			{wait($LOAD_WAIT)}
		end while
		set_control_par(%mask_id[13],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(%mask_id[14],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(%mask_id[15],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		select($fx_view)
			case 0 {eq}
				$gui_count := 0
				while($gui_count < num_elements(%eq_control_id))
					set_control_par(%eq_control_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					inc($gui_count)
					{wait($LOAD_WAIT)}
				end while
			case 1 {trans}
				$gui_count := 0
				while($gui_count < num_elements(%trans_control_id))
					set_control_par(%trans_control_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					inc($gui_count)
					{wait($LOAD_WAIT)}
				end while
			case 2 {comp}
				$gui_count := 0
				while($gui_count < num_elements(%comp_control_id))
					set_control_par(%comp_control_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					inc($gui_count)
					{wait($LOAD_WAIT)}
				end while
			case 3 {tape}
				$gui_count := 0
				while($gui_count < num_elements(%tape_control_id))
					set_control_par(%tape_control_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					inc($gui_count)
					{wait($LOAD_WAIT)}
				end while
			case 4 {settings}
				$gui_count := 0
				while($gui_count < num_elements(%micbalance_id))
					set_control_par(%micbalance_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					inc($gui_count)
					{wait($LOAD_WAIT)}
				end while
				$gui_count := 0
				while($gui_count < num_elements(%routing_id))
					set_control_par(%routing_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					inc($gui_count)
					{wait($LOAD_WAIT)}
				end while
				$gui_count := 0
				while($gui_count < num_elements(%output_control_id))
					set_control_par(%output_control_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					inc($gui_count)
					{wait($LOAD_WAIT)}
				end while
		end select
		
		{show stuff}
		$gui_count := 0
		while($gui_count < 7)
			set_control_par(%reverb_controls[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			inc($gui_count)
			{wait($LOAD_WAIT)}
		end while
		set_control_par(%reverb_controls[$ir_category],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		$gui_count := 7
		while($gui_count < num_elements(%reverb_controls))
			set_control_par(%reverb_controls[$gui_count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			inc($gui_count)
			{wait($LOAD_WAIT)}
		end while
		set_control_par(get_ui_id($fx_bg),$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[5])
	else
		if($last_selection = 13)
			$gui_count := 0
			while($gui_count < num_elements(%select_onoff_id))
				set_control_par(%select_onoff_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				inc($gui_count)
				{wait($LOAD_WAIT)}
			end while

			{hide reverb}
			$gui_count := 0
			while($gui_count < num_elements(%reverb_controls))
				set_control_par(%reverb_controls[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				inc($gui_count)
				{wait($LOAD_WAIT)}
			end while
			{showstuff}
			call displayfx
		end if
		call update_values
	end if
		
	$last_selection := $cur_selection
end function

function sendlevel
	{description: sets the send level of the channel}
	{variables = $send_pointer}
	
	$send_value := get_control_par(%send_id[$send_pointer],$CONTROL_PAR_VALUE)
	if($send_value < 500)
		$send_value := $send_value*1260
	else
		if($send_value = 500)
			$send_value := 630000
		else
			$send_value := 630000 + (328*($send_value-500))
		end if
	end if
	
	select ($send_pointer)
		case 0 to 12
			{channel & kit mic}
			set_engine_par($ENGINE_PAR_SENDLEVEL_0,$send_value,-1,$SEND_SLOT,$NI_BUS_OFFSET+$send_pointer)
			set_control_par_str(%send_id[$send_pointer],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_SENDLEVEL_0,-1,$SEND_SLOT,$NI_BUS_OFFSET+$send_pointer) & " dB")
		case 13
			{reverb}
			message("bug: sendlevel")
		case 14
			{master}
			set_engine_par($ENGINE_PAR_SENDLEVEL_0,$send_value,-1,$SEND_SLOT,1)
			set_control_par_str(%send_id[$send_pointer],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_SENDLEVEL_0,-1,$SEND_SLOT,1) & " dB")
	end select
end function

function channelpan
	{description: sets the stereo panorama or width of the channel}
	{variables = $pan_pointer}
	
	$pan_value := get_control_par(%pan_id[$pan_pointer],$CONTROL_PAR_VALUE)
	
	select ($pan_pointer)
		case 0 to 8
			{channel}
			set_engine_par($ENGINE_PAR_STEREO_PAN,$pan_value,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$pan_pointer)
			set_control_par_str(%pan_id[$pan_pointer],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_STEREO_PAN,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$pan_pointer))
		case 9 to 12
			{kit mic}
			if(%oh_stereo[$pan_pointer - 9] # -1)
				if(%oh_stereo[$pan_pointer - 9] = 1)
					{width}
					set_engine_par($ENGINE_PAR_STEREO,$pan_value/2,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$pan_pointer)
					set_control_par_str(%pan_id[$pan_pointer],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_STEREO,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$pan_pointer))
					if ( get_control_par(%pan_id[$pan_pointer],$CONTROL_PAR_VALUE) = 1000000 )
						set_control_par_str(%pan_id[$pan_pointer],$CONTROL_PAR_LABEL, "Stereo")
					end if
				else
					{pan}
					set_engine_par($ENGINE_PAR_STEREO_PAN,$pan_value,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$pan_pointer)
					set_control_par_str(%pan_id[$pan_pointer],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_STEREO_PAN,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$pan_pointer))
				end if
			end if
		case 13
			{reverb}
			message ("bug: channelpan")
		case 14
			{master}
			set_engine_par($ENGINE_PAR_STEREO,$pan_value/2,-1,$SPREAD_SLOT,1)
			set_control_par_str(%pan_id[$pan_pointer],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_STEREO,-1,$SPREAD_SLOT,1))
			if ( get_control_par(%pan_id[$pan_pointer],$CONTROL_PAR_VALUE) = 1000000 )
				set_control_par_str(%pan_id[$pan_pointer],$CONTROL_PAR_LABEL, "Stereo")
			end if
	end select
end function

function swappans
	{description: swaps the stereo panorama image and resets the channels}
	
	$count := 0
	while($count < 9)
		$pan_value := 1000000 - get_control_par(%pan_id[$count],$CONTROL_PAR_VALUE)
		set_control_par(%pan_id[$count],$CONTROL_PAR_VALUE,$pan_value)
		set_engine_par($ENGINE_PAR_STEREO_PAN,$pan_value,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$count)
		set_control_par_str(%pan_id[$count],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_STEREO_PAN,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$count))
		inc($count)
		wait($LOAD_WAIT)
	end while
	
	$count := 9
	while($count < 13)
		if(%oh_stereo[$count - 9] = 0)
			$pan_value := 1000000 - get_control_par(%pan_id[$count],$CONTROL_PAR_VALUE)
			set_control_par(%pan_id[$count],$CONTROL_PAR_VALUE,$pan_value)
			set_engine_par($ENGINE_PAR_STEREO_PAN,$pan_value,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$count)
			set_control_par_str(%pan_id[$count],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_STEREO_PAN,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$count))
		else
			if(%oh_stereo[$count - 9] # -1)
				$pan_value := ($lr_swap+1) mod 2
				$count2 := %oh_groups[$count - 9]
				while($count2 < %oh_groups[$count - 8])
					set_engine_par($ENGINE_PAR_EFFECT_BYPASS,$pan_value,$count2,$INVERT_SLOT,-1)
					inc($count2)
				end while
			end if
		end if
		inc($count)
		wait($LOAD_WAIT)
	end while
end function

function mutechannel
	{description: mutes the channel}
	{variables = $mute_pointer}
	
	$vol_value := get_control_par(%volfader_id[$mute_pointer],$CONTROL_PAR_VALUE)
	%mute_state[$mute_pointer] := (get_control_par(%mute_id[$mute_pointer],$CONTROL_PAR_VALUE)+1) mod 2
	
	select ($mute_pointer)
		case 0 to 12
			{channel/kit mic}
			$vol_value := %solo_state[$mute_pointer]*%mute_state[$mute_pointer]*((%wurzel_zweidrittel[$vol_value]*$cur_volume)/1000)
			set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,$vol_value,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$mute_pointer)
			pgs_set_key_val(ACTION_TYPE,0,-1)
			pgs_set_key_val(CHANNEL_MUTE_STATE,$mute_pointer,%mute_state[$mute_pointer])
			if ($kickin_vol < 5)
				pgs_set_key_val(ACTION_TYPE,0,-1)
				pgs_set_key_val(MICBALANCE_STATE, 0, 0)
				%mic_balance_state[0] := pgs_get_key_val(MICBALANCE_STATE, 0)
			else
				pgs_set_key_val(ACTION_TYPE,0,-1)
				pgs_set_key_val(MICBALANCE_STATE, 0, 1)
				%mic_balance_state[0] := pgs_get_key_val(MICBALANCE_STATE, 0)
			end if
			if ($kickout_vol < 5)
				pgs_set_key_val(ACTION_TYPE,0,-1)
				pgs_set_key_val(MICBALANCE_STATE, 1, 0)
				%mic_balance_state[1] := pgs_get_key_val(MICBALANCE_STATE, 1)
			else
				pgs_set_key_val(ACTION_TYPE,0,-1)	
				pgs_set_key_val(MICBALANCE_STATE, 1, 1)
				%mic_balance_state[1] := pgs_get_key_val(MICBALANCE_STATE, 1)
			end if
			if ($KICK_SUB = 0)
				pgs_set_key_val(ACTION_TYPE,0,-1)
				pgs_set_key_val(MICBALANCE_STATE, 2, 0)
				%mic_balance_state[2] := pgs_get_key_val(MICBALANCE_STATE, 2)
			end if
			if ($snaretop_vol < 5)
				pgs_set_key_val(ACTION_TYPE,0,-1)
				pgs_set_key_val(MICBALANCE_STATE, 3, 0)
				%mic_balance_state[3] := pgs_get_key_val(MICBALANCE_STATE, 3)
			else
				pgs_set_key_val(ACTION_TYPE,0,-1)
				pgs_set_key_val(MICBALANCE_STATE, 3, 1)
				%mic_balance_state[3] := pgs_get_key_val(MICBALANCE_STATE, 3)
			end if
			if ($snarebot_vol < 5)
				pgs_set_key_val(ACTION_TYPE,0,-1)
				pgs_set_key_val(MICBALANCE_STATE, 4, 0)
				%mic_balance_state[4] := pgs_get_key_val(MICBALANCE_STATE, 4)
			else
				pgs_set_key_val(ACTION_TYPE,0,-1)	
				pgs_set_key_val(MICBALANCE_STATE, 4, 1)
				%mic_balance_state[4] := pgs_get_key_val(MICBALANCE_STATE, 4)
			end if
			if ($snarebleed_vol < 5)
				pgs_set_key_val(ACTION_TYPE,0,-1)
				pgs_set_key_val(MICBALANCE_STATE, 5, 0)
				%mic_balance_state[5] := pgs_get_key_val(MICBALANCE_STATE, 5)
			else
				pgs_set_key_val(ACTION_TYPE,0,-1)
				pgs_set_key_val(MICBALANCE_STATE, 5, 1)
				%mic_balance_state[5] := pgs_get_key_val(MICBALANCE_STATE, 5)
			end if
		case 13
			{reverb}
			set_engine_par($ENGINE_PAR_SEND_EFFECT_BYPASS,get_control_par(%mute_id[$mute_pointer],$CONTROL_PAR_VALUE),-1,$REVERB_SLOT,0)
		case 14
			{master}
			message("bug: mutechannel")
	end select

end function

function solochannel
	{description: solos the channel}
	{variables = $solo_pointer}

	%solo_light[$solo_pointer] := get_control_par(%solo_id[$solo_pointer],$CONTROL_PAR_VALUE)

	if($solo_pointer < 13)
		$count := 0
		$solo_check := 0
		while ($count < 13)
			if (%solo_light[$count] = 1)
				$solo_check := 1
				$count := 15
			end if
			inc($count)
			wait($LOAD_WAIT)
		end while
		
		$count := 0
		if ($solo_check = 0)
			while ($count < 13)
				%solo_state[$count] := 1
				inc($count)
				wait($LOAD_WAIT)
			end while
		else
			while ($count < 13)
				%solo_state[$count] := %solo_light[$count]
				inc($count)
				wait($LOAD_WAIT)
			end while
		end if
		
		$count := 0
		while($count < 13)
			$vol_value := get_control_par(%volfader_id[$count],$CONTROL_PAR_VALUE)
			set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%solo_state[$count]*%mute_state[$count]*((%wurzel_zweidrittel[$vol_value]*$cur_volume)/1000),-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$count)
			inc($count)
			wait($LOAD_WAIT)
		end while
	else
		%solo_light[$solo_pointer] := get_control_par(%solo_id[$solo_pointer],$CONTROL_PAR_VALUE)
		%solo_state[$solo_pointer] := %solo_light[$solo_pointer]
		$count := 0
		while($count < 13)
			set_engine_par($ENGINE_PAR_VOLUME,((%solo_state[13]+1) mod 2)*631000,-1,-1,$NI_BUS_OFFSET+$count)
			inc($count)
			wait($LOAD_WAIT)
		end while
	end if
end function

function channelvolume
	{description: sets the volume of the channel}
	{variables = $vol_pointer}
	
	$vol_value := get_control_par(%volfader_id[$vol_pointer],$CONTROL_PAR_VALUE)
	
	select ($vol_pointer)
		case 0 to 12
			{channel/kit mic}
			$vol_value := %solo_state[$vol_pointer]*%mute_state[$vol_pointer]*((%wurzel_zweidrittel[$vol_value]*$cur_volume)/1000)
			set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,$vol_value,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$vol_pointer)
			set_control_par_str(%volfader_id[$vol_pointer],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$vol_pointer) & " dB")
		case 13
			{reverb}
			$vol_value := (%wurzel_zweidrittel[$vol_value]*$cur_volume_verb)/1000
			set_engine_par($ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN,$vol_value,-1,$REVERB_SLOT,0)
			set_control_par_str(%volfader_id[$vol_pointer],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN,-1,$REVERB_SLOT,0) & " dB")	
		case 14
			{master}
			set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,(%wurzel_zweidrittel[$vol_value]*$cur_volume)/1000,-1,$SPREAD_SLOT,1)
			set_control_par_str(%volfader_id[$vol_pointer],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,-1,$SPREAD_SLOT,1) & " dB")		
	end select
end function

function micbalance
	{description: sets the volume of the sub-channels (eg snare top or kick in, etc...)}
	{variables = $mic_pointer}
	
	$mic_value := get_control_par(%micbalance_id[$mic_pointer],$CONTROL_PAR_VALUE)
	
	if($mic_pointer < 3) {kick}
		$count := %kick_mic_arr[$mic_pointer*2]
		while($count < %kick_mic_arr[($mic_pointer*2)+1])
			if($mic_pointer = 2)
				if($KICK_SUB = 1)
					set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,(%wurzel_zweidrittel[$mic_value]*$cur_volume)/1000,$count,$GAIN_SLOT,-1)
				end if
			else
				set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,(%wurzel_zweidrittel[$mic_value]*$cur_volume)/1000,$count,$GAIN_SLOT,-1)
			end if
			inc($count)
			wait($LOAD_WAIT)
		end while
	else {snare}
		$count2 := $mic_pointer - 3
		$count := %snare_mic_arr[$count2*2]
		while($count < %snare_mic_arr[($count2*2)+1])
			set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,(%wurzel_zweidrittel[$mic_value]*$cur_volume)/1000,$count,$GAIN_SLOT,-1)
			inc($count)
			wait($LOAD_WAIT)
		end while
	end if
end function

function changefxrouting
	if($cur_selection = 14) {master}
		if(%routing_state[$cur_selection] < 2)
			if(get_engine_par($ENGINE_PAR_EFFECT_BYPASS,-1,$EQ2_SLOT,1) = 0)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,0,-1,$EQ1_SLOT,1)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,-1,$EQ2_SLOT,1)
			end if
		else
			if(get_engine_par($ENGINE_PAR_EFFECT_BYPASS,-1,$EQ1_SLOT,1) = 0)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,0,-1,$EQ2_SLOT,1)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,-1,$EQ1_SLOT,1)
			end if
		end if
		if(%routing_state[$cur_selection] mod 2 = 0)
			if(get_engine_par($ENGINE_PAR_EFFECT_BYPASS,-1,$TRANS2_SLOT,1) = 0)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,0,-1,$TRANS1_SLOT,1)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,-1,$TRANS2_SLOT,1)
			end if
		else
			if(get_engine_par($ENGINE_PAR_EFFECT_BYPASS,-1,$TRANS1_SLOT,1) = 0)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,0,-1,$TRANS2_SLOT,1)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,-1,$TRANS1_SLOT,1)
			end if
		end if
	else
		if(%routing_state[$cur_selection] < 2)
			if(get_engine_par($ENGINE_PAR_EFFECT_BYPASS,-1,$EQ2_SLOT,$NI_BUS_OFFSET + $cur_selection) = 0)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,0,-1,$EQ1_SLOT,$NI_BUS_OFFSET + $cur_selection)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,-1,$EQ2_SLOT,$NI_BUS_OFFSET + $cur_selection)
			end if
		else
			if(get_engine_par($ENGINE_PAR_EFFECT_BYPASS,-1,$EQ1_SLOT,$NI_BUS_OFFSET + $cur_selection) = 0)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,0,-1,$EQ2_SLOT,$NI_BUS_OFFSET + $cur_selection)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,-1,$EQ1_SLOT,$NI_BUS_OFFSET + $cur_selection)
			end if
		end if
		if(%routing_state[$cur_selection] mod 2 = 0)
			if(get_engine_par($ENGINE_PAR_EFFECT_BYPASS,-1,$TRANS2_SLOT,$NI_BUS_OFFSET + $cur_selection) = 0)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,0,-1,$TRANS1_SLOT,$NI_BUS_OFFSET + $cur_selection)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,-1,$TRANS2_SLOT,$NI_BUS_OFFSET + $cur_selection)
			end if
		else
			if(get_engine_par($ENGINE_PAR_EFFECT_BYPASS,-1,$TRANS1_SLOT,$NI_BUS_OFFSET + $cur_selection) = 0)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,0,-1,$TRANS2_SLOT,$NI_BUS_OFFSET + $cur_selection)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,-1,$TRANS1_SLOT,$NI_BUS_OFFSET + $cur_selection)
			end if
		end if
	end if
end function

function irload
	$rvb_reset_flag := 1
	fade_out($ALL_EVENTS,40000,0)
	wait(40000)
	$ir_value := get_control_par(%reverb_controls[$ir_category],$CONTROL_PAR_VALUE)
	{$load_ir_id := load_ir_sample(!ir_category[$ir_category] & " - " & !ir_sample[$ir_value + %ir_offset[$ir_category]] & ".wav",$REVERB_SLOT,0)}
	$load_ir_id := load_ir_sample(!ir_category[$ir_category] & " - " & !ir_sample[$ir_value + %ir_offset[$ir_category]] & ".ncw",$REVERB_SLOT,0)
	while ($load_ir_id # -1)
		wait(10)   
	end while
	$rvb_reset_flag := 0
	fade_in($ALL_EVENTS,40000)
end function

{--- UI CALLBACKS ---}
{CALLBACK NAVIGATION

1 -- MIXER CALLBACKS
	1.1 -- MIXER - KIT/BUS DISPLAY
	1.1.1 -- Note Call Back
	1.2 -- MIXER - LABELS/SELECTORS
	1.3 -- MIXER - SENDS
	1.4 -- MIXER - PAN/WIDTH
	1.5 -- MIXER - STEREO SWAP
	1.6 -- MIXER - MUTE
	1.7 -- MIXER - SOLO
	1.8 -- MIXER - VOLUME

2 -- FX CALLBACKS
	2.1 -- FX - SELECT & ON/OFF
	2.2 -- FX - EQ
	2.3 -- FX - TRANSIENT DESIGNER
	2.4 -- FX - COMPRESSOR
	2.5 -- FX - TAPE SATURATOR
	2.6 -- FX - REVERB

3 -- CHANNEL CCALLBACKS
	3.1 -- CHAN - MIC BALANCE
	3.2 -- CHAN - FX ROUTING
	3.3 -- CHAN - OUTPUT & PURGING
	
4 -- FX PRESETS FUNCTIONS & CALLBACKS
	4.1 -- FX PRESETS - FUNCTIONS
	4.2 -- FX PRESETS - CALLBACKS
	
5 -- MIXER PRESETS FUNCTIONS & CALLBACKS
	5.1 -- MIXER PRESETS - FUNCTIONS
	5.2 -- MIXER PRESETS - CALLBACKS

6 -- GROOVE REMOTE
	
7 -- GLOBAL: ASYNC & PGS	
}

{1 -- MIXER CALLBACKS}
{1.1 -- MIXER - KIT/BUS DISPLAY}
{1.1.1 -- Note Call Back}

on ui_control($kitmic_view)
	if($kitmic_view = 0)
		$kitmic_view := 1
		$kitmic_view_value := $kitmic_view
		$buses_view := 0
		$buses_view_value := $buses_view
	else
		$kitmic_view := 1
		$kitmic_view_value := $kitmic_view
		$buses_view := 0
		$buses_view_value := $buses_view

		$count := 0
		while($count < num_elements(%bus_control_id))
			set_control_par(%bus_control_id[$count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			inc($count)
			wait($LOAD_WAIT)
		end while
		
		$count := 0
		while($count < $NUM_OF_OH*10)
			set_control_par(%kitmic_control_id[$count], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			inc($count)
			wait($LOAD_WAIT)
		end while
		
		$count := 9
		while($count < $NUM_OF_OH+9)
			if(%purge_state[$count] = 0)
				set_control_par(%mask_id[$count],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			end if
			inc($count)
			wait($LOAD_WAIT)
		end while

		$helper := %selector_values[13] + %selector_values[14]
		if($helper = 1)
			$cur_selection := 9
			call channelselect
			$helper := 0
		end if
	end if
end on

on ui_control($buses_view)
	if($buses_view = 0)
		$buses_view := 1
		$buses_view_value := $buses_view
		$kitmic_view := 0
		$kitmic_view_value := $kitmic_view
	else
		$buses_view := 1
		$buses_view_value := $buses_view
		$kitmic_view := 0
		$kitmic_view_value := $kitmic_view
		
		$gui_count := 0
		while($gui_count < num_elements(%bus_control_id))
			set_control_par(%bus_control_id[$gui_count], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			inc($gui_count)
			wait($LOAD_WAIT)
		end while
		
		$gui_count := 0
		while($gui_count < $NUM_OF_OH*10)
			set_control_par(%kitmic_control_id[$gui_count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			inc($gui_count)
			wait($LOAD_WAIT)
		end while	

		$helper := %selector_values[9] + %selector_values[10] + %selector_values[11] + %selector_values[12]
		if($helper = 1)
			$cur_selection := 14
			call channelselect
			$helper := 0
		end if
	
		$gui_count := 9
		while ($gui_count < 10 + $NUM_OF_OH)
			set_control_par(%mask_id[$gui_count],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			inc($gui_count)
			wait($LOAD_WAIT)		
		end while
	end if
end on

{1.2 -- MIXER - LABELS/SELECTORS}

on ui_control ($label_kick)
	$cur_selection := 0
	call channelselect
end on

on ui_control ($label_snare)
	$cur_selection := 1
	call channelselect
end on

on ui_control ($label_hihat)
	$cur_selection := 2
	call channelselect
end on

on ui_control ($label_gen1)
	$cur_selection := 3
	call channelselect
end on

on ui_control ($label_gen2)
	$cur_selection := 4
	call channelselect
end on

on ui_control ($label_gen3)
	$cur_selection := 5
	call channelselect
end on

on ui_control ($label_gen4)
	$cur_selection := 6
	call channelselect
end on

on ui_control ($label_gen5)
	$cur_selection := 7
	call channelselect
end on

on ui_control ($label_gen6)
	$cur_selection := 8
	call channelselect
end on

on ui_control ($label_oh1)
	$cur_selection := 9
	call channelselect
end on

on ui_control ($label_oh2)
	$cur_selection := 10
	call channelselect
end on

on ui_control ($label_oh3)
	$cur_selection := 11
	call channelselect
end on

on ui_control ($label_oh4)
	$cur_selection := 12
	call channelselect
end on

on ui_control ($label_reverb)
	$cur_selection := 13
	call channelselect
end on

on ui_control ($label_master)
	$cur_selection := 14
	call channelselect
end on

{1.3 -- MIXER - SENDS}

on ui_control ($send_kick)
	$send_pointer := 0
	call sendlevel
end on

on ui_control ($send_snare)
	$send_pointer := 1
	call sendlevel
end on

on ui_control ($send_hihat)
	$send_pointer := 2
	call sendlevel
end on

on ui_control ($send_gen1)
	$send_pointer := 3
	call sendlevel
end on

on ui_control ($send_gen2)
	$send_pointer := 4
	call sendlevel
end on

on ui_control ($send_gen3)
	$send_pointer := 5
	call sendlevel
end on

on ui_control ($send_gen4)
	$send_pointer := 6
	call sendlevel
end on

on ui_control ($send_gen5)
	$send_pointer := 7
	call sendlevel
end on

on ui_control ($send_gen6)
	$send_pointer := 8
	call sendlevel
end on

on ui_control ($send_oh1)
	$send_pointer := 9
	call sendlevel
end on

on ui_control ($send_oh2)
	$send_pointer := 10
	call sendlevel
end on

on ui_control ($send_oh3)
	$send_pointer := 11
	call sendlevel
end on

on ui_control ($send_oh4)
	$send_pointer := 12
	call sendlevel
end on

on ui_control ($send_master)
	$send_pointer := 14
	call sendlevel
end on


{1.4 -- MIXER - PAN/WIDTH}

on ui_control ($pan_kick)
	$pan_pointer := 0
	call channelpan
end on

on ui_control ($pan_snare)
	$pan_pointer := 1
	call channelpan
end on

on ui_control ($pan_hihat)
	$pan_pointer := 2
	call channelpan
end on

on ui_control ($pan_gen1)
	$pan_pointer := 3
	call channelpan
end on

on ui_control ($pan_gen2)
	$pan_pointer := 4
	call channelpan
end on

on ui_control ($pan_gen3)
	$pan_pointer := 5
	call channelpan
end on

on ui_control ($pan_gen4)
	$pan_pointer := 6
	call channelpan
end on

on ui_control ($pan_gen5)
	$pan_pointer := 7
	call channelpan
end on

on ui_control ($pan_gen6)
	$pan_pointer := 8
	call channelpan
end on

on ui_control ($pan_oh1)
	$pan_pointer := 9
	call channelpan
end on

on ui_control ($pan_oh2)
	$pan_pointer := 10
	call channelpan
end on

on ui_control ($pan_oh3)
	$pan_pointer := 11
	call channelpan
end on

on ui_control ($pan_oh4)
	$pan_pointer := 12
	call channelpan
end on

on ui_control ($width_master)
	$pan_pointer := 14
	call channelpan
end on

{1.5 -- MIXER - STEREO SWAP}

on ui_control ($lr_swap)
	call swappans
end on

{1.6 -- MIXER - MUTE}

on ui_control ($mute_kick)
	$mute_pointer := 0
	call mutechannel
end on

on ui_control ($mute_snare)
	$mute_pointer := 1
	call mutechannel
end on

on ui_control ($mute_hihat)
	$mute_pointer := 2
	call mutechannel
end on

on ui_control ($mute_gen1)
	$mute_pointer := 3
	call mutechannel
end on

on ui_control ($mute_gen2)
	$mute_pointer := 4
	call mutechannel
end on

on ui_control ($mute_gen3)
	$mute_pointer := 5
	call mutechannel
end on

on ui_control ($mute_gen4)
	$mute_pointer := 6
	call mutechannel
end on

on ui_control ($mute_gen5)
	$mute_pointer := 7
	call mutechannel
end on

on ui_control ($mute_gen6)
	$mute_pointer := 8
	call mutechannel
end on

on ui_control ($mute_oh1)
	$mute_pointer := 9
	call mutechannel
end on

on ui_control ($mute_oh2)
	$mute_pointer := 10
	call mutechannel
end on

on ui_control ($mute_oh3)
	$mute_pointer := 11
	call mutechannel
end on

on ui_control ($mute_oh4)
	$mute_pointer := 12
	call mutechannel
end on

on ui_control ($mute_reverb)
	$mute_pointer := 13
	call mutechannel
end on


{1.7 -- MIXER - SOLO}

on ui_control ($solo_kick)
	$solo_pointer := 0
	call solochannel
end on

on ui_control ($solo_snare)
	$solo_pointer := 1
	call solochannel
end on

on ui_control ($solo_hihat)
	$solo_pointer := 2
	call solochannel
end on

on ui_control ($solo_gen1)
	$solo_pointer := 3
	call solochannel
end on

on ui_control ($solo_gen2)
	$solo_pointer := 4
	call solochannel
end on

on ui_control ($solo_gen3)
	$solo_pointer := 5
	call solochannel
end on

on ui_control ($solo_gen4)
	$solo_pointer := 6
	call solochannel
end on

on ui_control ($solo_gen5)
	$solo_pointer := 7
	call solochannel
end on

on ui_control ($solo_gen6)
	$solo_pointer := 8
	call solochannel
end on

on ui_control ($solo_oh1)
	$solo_pointer := 9
	call solochannel
end on

on ui_control ($solo_oh2)
	$solo_pointer := 10
	call solochannel
end on

on ui_control ($solo_oh3)
	$solo_pointer := 11
	call solochannel
end on

on ui_control ($solo_oh4)
	$solo_pointer := 12
	call solochannel
end on

on ui_control ($solo_reverb)
	$solo_pointer := 13
	call solochannel
end on

{1.8 -- MIXER - VOLUME}

on ui_control ($vol_kick)
	$vol_pointer := 0
	call channelvolume
end on

on ui_control ($vol_snare)
	$vol_pointer := 1
	call channelvolume
end on

on ui_control ($vol_hihat)
	$vol_pointer := 2
	call channelvolume
end on

on ui_control ($vol_gen1)
	$vol_pointer := 3
	call channelvolume
end on

on ui_control ($vol_gen2)
	$vol_pointer := 4
	call channelvolume
end on

on ui_control ($vol_gen3)
	$vol_pointer := 5
	call channelvolume
end on

on ui_control ($vol_gen4)
	$vol_pointer := 6
	call channelvolume
end on

on ui_control ($vol_gen5)
	$vol_pointer := 7
	call channelvolume
end on

on ui_control ($vol_gen6)
	$vol_pointer := 8
	call channelvolume
end on

on ui_control ($vol_oh1)
	$vol_pointer := 9
	call channelvolume
end on

on ui_control ($vol_oh2)
	$vol_pointer := 10
	call channelvolume
end on

on ui_control ($vol_oh3)
	$vol_pointer := 11
	call channelvolume
end on

on ui_control ($vol_oh4)
	$vol_pointer := 12
	call channelvolume
end on

on ui_control ($vol_reverb)
	$vol_pointer := 13
	call channelvolume
end on

on ui_control ($vol_master)
	$vol_pointer := 14
	call channelvolume
end on

{2 -- FX CALLBACKS}
{2.1 -- FX - SELECT & ON/OFF}
	
on ui_control($select_eq)
	if($select_eq = 1)
		$select_settings := 0
		$select_trans := 0
		$select_comp := 0
		$select_tape := 0
		$fx_view := $VIEW_EQ
		call displayfx
	else
		$select_eq := 1
	end if
end on

on ui_control($select_trans)
	if($select_trans = 1)
		$select_settings := 0
		$select_eq := 0
		$select_comp := 0
		$select_tape := 0
		$fx_view := $VIEW_TRANS
		call displayfx
	else
		$select_trans := 1
	end if
end on

on ui_control($select_comp)
	if($select_comp = 1)
		$select_settings := 0
		$select_eq := 0
		$select_trans := 0
		$select_tape := 0
		$fx_view := $VIEW_COMP
		call displayfx
	else
		$select_comp := 1
	end if
end on

on ui_control($select_tape)
	if($select_tape = 1)
		$select_settings := 0
		$select_eq := 0
		$select_trans := 0
		$select_comp := 0
		$fx_view := $VIEW_TAPE
		call displayfx
	else
		$select_tape := 1
	end if
end on

on ui_control($select_settings)
	if($select_settings = 1)
		$select_eq := 0
		$select_trans := 0
		$select_comp := 0
		$select_tape := 0
		$fx_view := $VIEW_SETTINGS
		call displayfx
	else
		$select_settings := 1
	end if
end on
	
on ui_control($onoff_eq)
	%onoff_arr[($cur_selection*4) + 0] := $onoff_eq
	if($cur_selection # 13)
		if($cur_selection = 14)
			if(%routing_state[$cur_selection] < 2)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,($onoff_eq+1) mod 2,-1,$EQ1_SLOT,1)	
			else
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,($onoff_eq+1) mod 2,-1,$EQ2_SLOT,1)				
			end if
		else
			if(%routing_state[$cur_selection] < 2)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,($onoff_eq+1) mod 2,-1,$EQ1_SLOT,$NI_BUS_OFFSET + $cur_selection)
			else
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,($onoff_eq+1) mod 2,-1,$EQ2_SLOT,$NI_BUS_OFFSET + $cur_selection)
			end if
		end if
	end if
end on

on ui_control($onoff_trans)
	%onoff_arr[($cur_selection*4) + 1] := $onoff_trans
	if($cur_selection # 13)
		if($cur_selection = 14)
			if(%routing_state[$cur_selection] mod 2 = 0)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,($onoff_trans+1) mod 2,-1,$TRANS1_SLOT,1)	
			else
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,($onoff_trans+1) mod 2,-1,$TRANS2_SLOT,1)				
			end if
		else
			if(%routing_state[$cur_selection] mod 2 = 0)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,($onoff_trans+1) mod 2,-1,$TRANS1_SLOT,$NI_BUS_OFFSET + $cur_selection)
			else
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,($onoff_trans+1) mod 2,-1,$TRANS2_SLOT,$NI_BUS_OFFSET + $cur_selection)
			end if
		end if
	end if
end on

on ui_control($onoff_comp)
	%onoff_arr[($cur_selection*4) + 2] := $onoff_comp
	if($cur_selection # 13)
		if($cur_selection = 14)
			set_engine_par($ENGINE_PAR_EFFECT_BYPASS,($onoff_comp+1) mod 2,-1,$COMP_SLOT,1)			
		else
			set_engine_par($ENGINE_PAR_EFFECT_BYPASS,($onoff_comp+1) mod 2,-1,$COMP_SLOT,$NI_BUS_OFFSET + $cur_selection)
		end if
	end if
end on

on ui_control($onoff_tape)
	%onoff_arr[($cur_selection*4) + 3] := $onoff_tape
	if($cur_selection # 13)
		if($cur_selection = 14)
			set_engine_par($ENGINE_PAR_EFFECT_BYPASS,($onoff_tape+1) mod 2,-1,$TAPE_SLOT,1)			
		else
			set_engine_par($ENGINE_PAR_EFFECT_BYPASS,($onoff_tape+1) mod 2,-1,$TAPE_SLOT,$NI_BUS_OFFSET + $cur_selection)
		end if
	end if
end on

{2.2 -- FX - EQ}

function storeeqdata
	%eq_data[($cur_selection*13) + $eq_fx_pointer] := get_control_par(%eq_control_id[$eq_fx_pointer],$CONTROL_PAR_VALUE)
end function
	
on ui_control ($eq_lf_freq)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("eq bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_SEQ_LF_FREQ,$eq_lf_freq,-1,$EQ1_SLOT,$generic)
	set_engine_par($ENGINE_PAR_SEQ_LF_FREQ,$eq_lf_freq,-1,$EQ2_SLOT,$generic)
	$eq_fx_pointer := 0
	call storeeqdata
end on
	
on ui_control ($eq_lf_db)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("eq bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_SEQ_LF_GAIN,$eq_lf_db,-1,$EQ1_SLOT,$generic)
	set_engine_par($ENGINE_PAR_SEQ_LF_GAIN,$eq_lf_db,-1,$EQ2_SLOT,$generic)
	$eq_fx_pointer := 1
	call storeeqdata
end on
	
on ui_control ($eq_lmf_q)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("eq bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_SEQ_LMF_Q,$eq_lmf_q,-1,$EQ1_SLOT,$generic)
	set_engine_par($ENGINE_PAR_SEQ_LMF_Q,$eq_lmf_q,-1,$EQ2_SLOT,$generic)
	$eq_fx_pointer := 2
	call storeeqdata
end on
	
on ui_control ($eq_lmf_db)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("eq bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_SEQ_LMF_GAIN,$eq_lmf_db,-1,$EQ1_SLOT,$generic)
	set_engine_par($ENGINE_PAR_SEQ_LMF_GAIN,$eq_lmf_db,-1,$EQ2_SLOT,$generic)
	$eq_fx_pointer := 3
	call storeeqdata
end on
	
on ui_control ($eq_lmf_freq)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("eq bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_SEQ_LMF_FREQ,$eq_lmf_freq,-1,$EQ1_SLOT,$generic)
	set_engine_par($ENGINE_PAR_SEQ_LMF_FREQ,$eq_lmf_freq,-1,$EQ2_SLOT,$generic)
	$eq_fx_pointer := 4
	call storeeqdata
end on
	
on ui_control ($eq_hmf_q)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("eq bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_SEQ_HMF_Q,$eq_hmf_q,-1,$EQ1_SLOT,$generic)
	set_engine_par($ENGINE_PAR_SEQ_HMF_Q,$eq_hmf_q,-1,$EQ2_SLOT,$generic)
	$eq_fx_pointer := 5
	call storeeqdata
end on
	
on ui_control ($eq_hmf_db)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("eq bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_SEQ_HMF_GAIN,$eq_hmf_db,-1,$EQ1_SLOT,$generic)
	set_engine_par($ENGINE_PAR_SEQ_HMF_GAIN,$eq_hmf_db,-1,$EQ2_SLOT,$generic)
	$eq_fx_pointer := 6
	call storeeqdata
end on
	
on ui_control ($eq_hmf_freq)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("eq bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_SEQ_HMF_FREQ,$eq_hmf_freq,-1,$EQ1_SLOT,$generic)
	set_engine_par($ENGINE_PAR_SEQ_HMF_FREQ,$eq_hmf_freq,-1,$EQ2_SLOT,$generic)
	$eq_fx_pointer := 7
	call storeeqdata
end on
	
on ui_control ($eq_hf_db)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("eq bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_SEQ_HF_GAIN,$eq_hf_db,-1,$EQ1_SLOT,$generic)
	set_engine_par($ENGINE_PAR_SEQ_HF_GAIN,$eq_hf_db,-1,$EQ2_SLOT,$generic)
	$eq_fx_pointer := 8
	call storeeqdata
end on
	
on ui_control ($eq_hf_freq)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("eq bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_SEQ_HF_FREQ,$eq_hf_freq,-1,$EQ1_SLOT,$generic)
	set_engine_par($ENGINE_PAR_SEQ_HF_FREQ,$eq_hf_freq,-1,$EQ2_SLOT,$generic)
	$eq_fx_pointer := 9
	call storeeqdata
end on
	
on ui_control ($eq_output)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("eq bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,$eq_output,-1,$EQ1_SLOT,$generic)
	set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,$eq_output,-1,$EQ2_SLOT,$generic)
	$eq_fx_pointer := 10
	call storeeqdata
end on
	
on ui_control ($eq_lf_bell)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("eq bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_SEQ_LF_BELL,$eq_lf_bell,-1,$EQ1_SLOT,$generic)
	set_engine_par($ENGINE_PAR_SEQ_LF_BELL,$eq_lf_bell,-1,$EQ2_SLOT,$generic)
	$eq_fx_pointer := 11
	call storeeqdata
end on
	
on ui_control ($eq_hf_bell)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("eq bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_SEQ_HF_BELL,$eq_hf_bell,-1,$EQ1_SLOT,$generic)
	set_engine_par($ENGINE_PAR_SEQ_HF_BELL,$eq_hf_bell,-1,$EQ2_SLOT,$generic)
	$eq_fx_pointer := 12
	call storeeqdata
end on

{2.3 -- FX - TRANSIENT DESIGNER}

function storetransdata
	%trans_data[($cur_selection*4) + $trans_fx_pointer] := get_control_par(%trans_control_id[$trans_fx_pointer],$CONTROL_PAR_VALUE)
end function
	
on ui_control ($trans_in)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("trans bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_TR_INPUT,$trans_in,-1,$TRANS1_SLOT,$generic)
	set_engine_par($ENGINE_PAR_TR_INPUT,$trans_in,-1,$TRANS2_SLOT,$generic)
	$trans_fx_pointer := 0
	call storetransdata
end on
	
on ui_control ($trans_attack)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("trans bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_TR_ATTACK,$trans_attack,-1,$TRANS1_SLOT,$generic)
	set_engine_par($ENGINE_PAR_TR_ATTACK,$trans_attack,-1,$TRANS2_SLOT,$generic)
	$trans_fx_pointer := 1
	call storetransdata
end on
	
on ui_control ($trans_sustain)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("trans bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_TR_SUSTAIN,$trans_sustain,-1,$TRANS1_SLOT,$generic)
	set_engine_par($ENGINE_PAR_TR_SUSTAIN,$trans_sustain,-1,$TRANS2_SLOT,$generic)
	$trans_fx_pointer := 2
	call storetransdata
end on
	
on ui_control ($trans_out)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("trans bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,$trans_out,-1,$TRANS1_SLOT,$generic)
	set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,$trans_out,-1,$TRANS2_SLOT,$generic)
	$trans_fx_pointer := 3
	call storetransdata
end on

{2.4 -- FX - COMPRESSOR}

function storecompdata
	%comp_data[($cur_selection*7) + $comp_fx_pointer] := get_control_par(%comp_control_id[$comp_fx_pointer],$CONTROL_PAR_VALUE)
end function

on ui_control ($comp_thres)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("comp bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_SCOMP_THRESHOLD,$comp_thres,-1,$COMP_SLOT,$generic)	
	$comp_fx_pointer := 0
	call storecompdata
end on

on ui_control ($comp_makeup)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("comp bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_SCOMP_MAKEUP,$comp_makeup,-1,$COMP_SLOT,$generic)	
	$comp_fx_pointer := 1
	call storecompdata
end on

on ui_control ($comp_ratio)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("comp bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_SCOMP_RATIO,$comp_ratio,-1,$COMP_SLOT,$generic)	
	$comp_fx_pointer := 2
	call storecompdata
end on

on ui_control ($comp_attack)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("comp bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_SCOMP_ATTACK,$comp_attack,-1,$COMP_SLOT,$generic)	
	$comp_fx_pointer := 3
	call storecompdata
end on

on ui_control ($comp_release)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("comp bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_SCOMP_RELEASE,$comp_release,-1,$COMP_SLOT,$generic)	
	$comp_fx_pointer := 4
	call storecompdata
end on

on ui_control ($comp_mix)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("comp bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_SCOMP_MIX,$comp_mix,-1,$COMP_SLOT,$generic)	
	$comp_fx_pointer := 5
	call storecompdata
end on

on ui_control ($comp_out)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("comp bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,$comp_out,-1,$COMP_SLOT,$generic)	
	$comp_fx_pointer := 6
	call storecompdata
end on

{2.5 -- FX - TAPE SATURATOR}

function storetapedata
	%tape_data[($cur_selection*4) + $tape_fx_pointer] := get_control_par(%tape_control_id[$tape_fx_pointer],$CONTROL_PAR_VALUE)
end function

on ui_control ($tape_gain)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("tape bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_TP_GAIN,$tape_gain,-1,$TAPE_SLOT,$generic)	
	$tape_fx_pointer := 0
	call storetapedata
end on

on ui_control ($tape_warm)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("tape bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_TP_WARMTH,$tape_warm,-1,$TAPE_SLOT,$generic)	
	$tape_fx_pointer := 1
	call storetapedata
end on

on ui_control ($tape_hf)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("tape bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_TP_HF_ROLLOFF,$tape_hf,-1,$TAPE_SLOT,$generic)	
	$tape_fx_pointer := 2
	call storetapedata
end on

on ui_control ($tape_out)
	select($cur_selection)
		case 0 to 12
			$generic := $NI_BUS_OFFSET + $cur_selection
		case 13
			message("tape bug")
			exit
		case 14
			$generic := 1
	end select
	set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,$tape_out,-1,$TAPE_SLOT,$generic)	
	$tape_fx_pointer := 3
	call storetapedata
end on
	
{2.6 -- FX - REVERB}

on ui_control($ir_category)
	call reverbpicupdate
	call irload
end on
	
on ui_control($reverb_sub2)
	$ir_category := ($ir_category + %reverb_pic_help[0]) mod 7
	call reverbpicupdate
	call irload
	$reverb_sub2 := 0
end on

on ui_control($reverb_sub1)
	$ir_category := ($ir_category + %reverb_pic_help[1]) mod 7
	call reverbpicupdate
	call irload
	$reverb_sub1 := 0
end on

on ui_control($reverb_plus1)
	$ir_category := ($ir_category + %reverb_pic_help[2]) mod 7
	call reverbpicupdate
	call irload
	$reverb_plus1 := 0
end on

on ui_control($reverb_plus2)
	$ir_category := ($ir_category + %reverb_pic_help[3]) mod 7
	call reverbpicupdate
	call irload
	$reverb_plus2 := 0
end on
	
on ui_control($ir_amb)
	call irload
end on

on ui_control($ir_rooms)
	call irload
end on

on ui_control($ir_studios)
	call irload
end on

on ui_control($ir_chamb)
	call irload
end on

on ui_control($ir_halls)
	call irload
end on

on ui_control($ir_plates)
	call irload
end on

on ui_control($ir_springs)
	call irload
end on

{3 -- CHANNEL CALLBACKS}	
{3.1 -- CHAN - MIC BALANCE}
	
on ui_control($kickin_vol)
	$mic_pointer := 0
	call micbalance
	if ($kickin_vol < 5)
		pgs_set_key_val(ACTION_TYPE,0,-1)
		pgs_set_key_val(MICBALANCE_STATE, $mic_pointer, 0)
		%mic_balance_state[$mic_pointer] := pgs_get_key_val(MICBALANCE_STATE, $mic_pointer)
	else
		pgs_set_key_val(ACTION_TYPE,0,-1)
		pgs_set_key_val(MICBALANCE_STATE, $mic_pointer, 1)
		%mic_balance_state[$mic_pointer] := pgs_get_key_val(MICBALANCE_STATE, $mic_pointer)
	end if
end on

on ui_control($kickout_vol)
	$mic_pointer := 1
	call micbalance
	if ($kickout_vol < 5)
		pgs_set_key_val(ACTION_TYPE,0,-1)
		pgs_set_key_val(MICBALANCE_STATE, $mic_pointer, 0)
		%mic_balance_state[$mic_pointer] := pgs_get_key_val(MICBALANCE_STATE, $mic_pointer)
	else
		pgs_set_key_val(ACTION_TYPE,0,-1)	
		pgs_set_key_val(MICBALANCE_STATE, $mic_pointer, 1)
		%mic_balance_state[$mic_pointer] := pgs_get_key_val(MICBALANCE_STATE, $mic_pointer)
	end if
end on

on ui_control($kicksub_vol)
	if($KICK_SUB = 1)
		$mic_pointer := 2
		call micbalance
		if ($kicksub_vol < 5)
			pgs_set_key_val(ACTION_TYPE,0,-1)
			pgs_set_key_val(MICBALANCE_STATE, $mic_pointer, 0)
			%mic_balance_state[$mic_pointer] := pgs_get_key_val(MICBALANCE_STATE, $mic_pointer)
		else
			pgs_set_key_val(ACTION_TYPE,0,-1)
			pgs_set_key_val(MICBALANCE_STATE, $mic_pointer, 1)
			%mic_balance_state[$mic_pointer] := pgs_get_key_val(MICBALANCE_STATE, $mic_pointer)
		end if
	end if
end on

on ui_control($snaretop_vol)
	$mic_pointer := 3
	call micbalance
	if ($snaretop_vol < 5)
		pgs_set_key_val(ACTION_TYPE,0,-1)
		pgs_set_key_val(MICBALANCE_STATE, $mic_pointer, 0)
		%mic_balance_state[$mic_pointer] := pgs_get_key_val(MICBALANCE_STATE, $mic_pointer)
	else
		pgs_set_key_val(ACTION_TYPE,0,-1)
		pgs_set_key_val(MICBALANCE_STATE, $mic_pointer, 1)
		%mic_balance_state[$mic_pointer] := pgs_get_key_val(MICBALANCE_STATE, $mic_pointer)
	end if
end on

on ui_control($snarebot_vol)
	$mic_pointer := 4
	call micbalance
	if ($snarebot_vol < 5)
		pgs_set_key_val(ACTION_TYPE,0,-1)
		pgs_set_key_val(MICBALANCE_STATE, $mic_pointer, 0)
		%mic_balance_state[$mic_pointer] := pgs_get_key_val(MICBALANCE_STATE, $mic_pointer)
	else
		pgs_set_key_val(ACTION_TYPE,0,-1)	
		pgs_set_key_val(MICBALANCE_STATE, $mic_pointer, 1)
		%mic_balance_state[$mic_pointer] := pgs_get_key_val(MICBALANCE_STATE, $mic_pointer)
	end if
end on

on ui_control($snarebleed_vol)
	$mic_pointer := 5
	call micbalance
	if ($snarebleed_vol < 5)
		pgs_set_key_val(ACTION_TYPE,0,-1)
		pgs_set_key_val(MICBALANCE_STATE, $mic_pointer, 0)
		%mic_balance_state[$mic_pointer] := pgs_get_key_val(MICBALANCE_STATE, $mic_pointer)
	else
		pgs_set_key_val(ACTION_TYPE,0,-1)
		pgs_set_key_val(MICBALANCE_STATE, $mic_pointer, 1)
		%mic_balance_state[$mic_pointer] := pgs_get_key_val(MICBALANCE_STATE, $mic_pointer)
	end if
end on

{3.2 -- CHAN - FX ROUTING}
	
on ui_control ($fx_plus1)
	inc(%routing_state[$cur_selection])
	if(%routing_state[$cur_selection] > 3)
		%routing_state[$cur_selection] := 0
	else
		if(%routing_state[$cur_selection] < 0)
			%routing_state[$cur_selection] := 3
		end if
	end if
	set_control_par(%routing_id[2],$CONTROL_PAR_PICTURE_STATE,%routing_state[$cur_selection])
	call changefxrouting
	call movebuttons
	$fx_plus1 := 0
end on
	
on ui_control ($fx_sub1)
	dec(%routing_state[$cur_selection])
	if(%routing_state[$cur_selection] > 3)
		%routing_state[$cur_selection] := 0
	else
		if(%routing_state[$cur_selection] < 0)
			%routing_state[$cur_selection] := 3
		end if
	end if
	set_control_par(%routing_id[2],$CONTROL_PAR_PICTURE_STATE,%routing_state[$cur_selection])
	call changefxrouting
	call movebuttons
	$fx_sub1 := 0
end on

{3.3 -- CHAN - OUTPUT & PURGING}

on ui_control($purge_white)
	pgs_set_key_val(ACTION_TYPE,0,-1)
	pgs_set_key_val(CHANNEL_PURGE_STATE,$cur_selection,0)
	
	if($cur_selection < 13 and %purge_state[$cur_selection] = 1)
		fade_out($ALL_EVENTS,5000,0)
		wait(5000)
		select ($cur_selection)
			case 0 {kick}
				if(pgs_get_key_val(INSTRUMENT_PURGE_STATE,0) = 1)
					$count3 := %kick_mic_arr[0]
					while($count3 < %kick_mic_arr[1])
						purge_group($count3,0)
						inc($count3)
						wait($LOAD_WAIT)
					end while
					$count3 := %kick_mic_arr[2]
					while($count3 < %kick_mic_arr[3])
						purge_group($count3,0)
						inc($count3)
						wait($LOAD_WAIT)
					end while
					$count3 := %kick_mic_arr[4]
					while($count3 < %kick_mic_arr[5])
						purge_group($count3,0)
						inc($count3)
						wait($LOAD_WAIT)
					end while
				end if
			case 1 {snare}
				$active_snare := pgs_get_key_val(ACTIVE_SNARE,0)
				if(pgs_get_key_val(INSTRUMENT_PURGE_STATE,1) = 1)
					$count3 := %snare_purge_groups[$active_snare]
					while($count3 < %snare_purge_groups[$active_snare+1])
						purge_group($count3,0)
						inc($count3)
						wait($LOAD_WAIT)
					end while
					$count3 := %snare_purge_groups[$active_snare+4]
					while($count3 < %snare_purge_groups[$active_snare+5])
						purge_group($count3,0)
						inc($count3)
						wait($LOAD_WAIT)
					end while
					{kick bleed}
					if(pgs_get_key_val(INSTRUMENT_PURGE_STATE,0) = 1)
						$count3 := %bleed_groups[0]
						while ($count3 < %bleed_groups[1])
							purge_group($count3,0)
							inc($count3)
							wait($LOAD_WAIT)
						end while
					end if
					{tom bleed}
					$count3 := 0
					while($count3 < $NUM_OF_TOMS)
						if(pgs_get_key_val(INSTRUMENT_PURGE_STATE,$count3+3) = 1)
							$count4 := %bleed_groups[$count3 + 1]
							while ($count4 < %bleed_groups[$count3 + 2])
								purge_group($count4,0)
								inc($count4)
								wait($LOAD_WAIT)
							end while
						end if
						inc($count3)
						wait($LOAD_WAIT)
					end while
				end if
			case 2 {hihat}
				if(pgs_get_key_val(INSTRUMENT_PURGE_STATE,2) = 1)
					$count3 := $hihat_close_start
					while($count3 < $hihat_close_end)
						purge_group($count3,0)
						inc($count3)
						wait($LOAD_WAIT)
					end while
				end if
			case 3 to 8 {Tom or Perc}
				$purge_pointer := $cur_selection - 3
				if($cur_selection < $NUM_CLOSE_MICS)
					if(pgs_get_key_val(INSTRUMENT_PURGE_STATE,%generic_inst_id[$purge_pointer]) = 1)
						$count3 := %generic_close_groups[$purge_pointer]
						while($count3 < %generic_close_groups[$purge_pointer + 1])
							purge_group($count3,0)
							inc($count3)
							wait($LOAD_WAIT)
						end while
					end if
				else
					message("purge bug")
				end if
			case 9 to 12 {kit mic}
				$purge_pointer := $cur_selection - 9
				if($purge_pointer < $NUM_OF_OH)
					$count3 := $purge_pointer * 23
					while($count3 < (($purge_pointer + 1) * 23))
						while(%instrument_exist[$count3 - ($purge_pointer * 23)] = 0)
							inc($count3)
							wait(10)
						end while
						if(%instrument_id_remap[$count3 - ($purge_pointer * 23)] < 20)
							if(%instrument_id_remap[$count3 - ($purge_pointer * 23)] = 1)
								$active_snare := pgs_get_key_val(ACTIVE_SNARE,0)
								$count3 := $count3 + $active_snare
							end if
							if(pgs_get_key_val(INSTRUMENT_PURGE_STATE,%instrument_id_remap[$count3 - ($purge_pointer * 23)]) = 1)
								$count4 := %oh_purge_groups[$count3]
								while ($count4 < %oh_purge_groups[$count3 + 1])
									purge_group($count4,0)
									inc($count4)
									wait($LOAD_WAIT)
								end while
							end if
						end if
						inc($count3)
						wait($LOAD_WAIT)
					end while
				else
					message("purge bug")
				end if			
		end select
		if(get_control_par(%solo_id[$cur_selection],$CONTROL_PAR_VALUE) = 1)
			set_control_par(%solo_id[$cur_selection],$CONTROL_PAR_VALUE,0)
			call solochannel
		end if
		if(get_control_par(%mute_id[$cur_selection],$CONTROL_PAR_VALUE) = 1)
			set_control_par(%mute_id[$cur_selection],$CONTROL_PAR_VALUE,0)
			call mutechannel
		end if
		%purge_state[$cur_selection] := 0
		set_control_par(%mask_id[$cur_selection],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		call update_values
		fade_in($ALL_EVENTS,5000)
	end if
end on

on ui_control($purge_red)
	pgs_set_key_val(ACTION_TYPE,0,-1)
	pgs_set_key_val(CHANNEL_PURGE_STATE,$cur_selection,1)
	
	if($cur_selection < 13 and %purge_state[$cur_selection] = 0)
		fade_out($ALL_EVENTS,5000,0)
		wait(5000)
		select ($cur_selection)
			case 0 {kick}
				if(pgs_get_key_val(INSTRUMENT_PURGE_STATE,0) = 1)
					$count3 := %kick_mic_arr[0]
					while($count3 < %kick_mic_arr[1])
						purge_group($count3,1)
						inc($count3)
						wait($LOAD_WAIT)
					end while
					$count3 := %kick_mic_arr[2]
					while($count3 < %kick_mic_arr[3])
						purge_group($count3,1)
						inc($count3)
						wait($LOAD_WAIT)
					end while
					$count3 := %kick_mic_arr[4]
					while($count3 < %kick_mic_arr[5])
						purge_group($count3,1)
						inc($count3)
						wait($LOAD_WAIT)
					end while
				end if
			case 1 {snare}
				$active_snare := pgs_get_key_val(ACTIVE_SNARE,0)
				if(pgs_get_key_val(INSTRUMENT_PURGE_STATE,1) = 1)
					$count3 := %snare_purge_groups[$active_snare]
					while($count3 < %snare_purge_groups[$active_snare+1])
						purge_group($count3,1)
						inc($count3)
						wait($LOAD_WAIT)
					end while
					$count3 := %snare_purge_groups[$active_snare+4]
					while($count3 < %snare_purge_groups[$active_snare+5])
						purge_group($count3,1)
						inc($count3)
						wait($LOAD_WAIT)
					end while
					{kick bleed}
					if(pgs_get_key_val(INSTRUMENT_PURGE_STATE,0) = 1)
						$count3 := %bleed_groups[0]
						while ($count3 < %bleed_groups[1])
							purge_group($count3,1)
							inc($count3)
							wait($LOAD_WAIT)
						end while
					end if
					{tom bleed}
					$count3 := 0
					while($count3 < $NUM_OF_TOMS)
						if(pgs_get_key_val(INSTRUMENT_PURGE_STATE,$count3+3) = 1)
							$count4 := %bleed_groups[$count3 + 1]
							while ($count4 < %bleed_groups[$count3 + 2])
								purge_group($count4,1)
								inc($count4)
								wait($LOAD_WAIT)
							end while
						end if
						inc($count3)
						wait($LOAD_WAIT)
					end while
				end if
			case 2 {hihat}
				if(pgs_get_key_val(INSTRUMENT_PURGE_STATE,2) = 1)
					$count3 := $hihat_close_start
					while($count3 < $hihat_close_end)
						purge_group($count3,1)
						inc($count3)
						wait($LOAD_WAIT)
					end while
				end if
			case 3 to 8 {Tom or Perc}
				$purge_pointer := $cur_selection - 3
				if($cur_selection < $NUM_CLOSE_MICS)
					if(pgs_get_key_val(INSTRUMENT_PURGE_STATE,%generic_inst_id[$purge_pointer]) = 1)
						$count3 := %generic_close_groups[$purge_pointer]
						while($count3 < %generic_close_groups[$purge_pointer + 1])
							purge_group($count3,1)
							inc($count3)
							wait($LOAD_WAIT)
						end while
					end if
				else
					message("purge bug")
				end if
			case 9 to 12 {kit mic}
				$purge_pointer := $cur_selection - 9
				if($purge_pointer < $NUM_OF_OH)
					$count3 := $purge_pointer * 23
					while($count3 < (($purge_pointer + 1) * 23))
						while(%instrument_exist[$count3 - ($purge_pointer * 23)] = 0)
							inc($count3)
							wait(10)
						end while
						if(%instrument_id_remap[$count3 - ($purge_pointer * 23)] < 20)
							if(%instrument_id_remap[$count3 - ($purge_pointer * 23)] = 1)
								$active_snare := pgs_get_key_val(ACTIVE_SNARE,0)
								$count3 := $count3 + $active_snare
							end if
							if(pgs_get_key_val(INSTRUMENT_PURGE_STATE,%instrument_id_remap[$count3 - ($purge_pointer * 23)]) = 1)
								$count4 := %oh_purge_groups[$count3]
								while ($count4 < %oh_purge_groups[$count3 + 1])
									purge_group($count4,1)
									inc($count4)
									wait($LOAD_WAIT)
								end while
							end if
						end if
						inc($count3)
						wait($LOAD_WAIT)
					end while
				else
					message("purge bug")
				end if			
		end select
		%purge_state[$cur_selection] := 1
		set_control_par(%mask_id[$cur_selection],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		call update_values
		fade_in($ALL_EVENTS,5000)
	end if
end on

on ui_control($output_menu)
	if($cur_selection < 13)
		%channel_output[$cur_selection] := $output_menu
		set_engine_par($ENGINE_PAR_OUTPUT_CHANNEL,$output_menu,-1,-1,$NI_BUS_OFFSET + $cur_selection)
		set_control_par_str(%output_control_id[4],$CONTROL_PAR_TEXT,get_menu_item_str(%output_control_id[0], $output_menu+1))
	end if
end on

{4 -- FX PRESETS FUNCTIONS & CALLBACKS}

{4.1 -- FX PRESETS - FUNCTIONS}

function resetchannelfx
	if($c_pointer2 = 14)
		$generic := 1
	else
		$generic := $NI_BUS_OFFSET + $c_pointer2
	end if
	{eq}
		if(get_engine_par($ENGINE_PAR_SEQ_LF_FREQ,-1,$EQ1_SLOT,$generic) # %eq_data[($c_pointer2*13)])
			set_engine_par($ENGINE_PAR_SEQ_LF_FREQ,%eq_data[($c_pointer2*13)],-1,$EQ1_SLOT,$generic)
			set_engine_par($ENGINE_PAR_SEQ_LF_FREQ,%eq_data[($c_pointer2*13)],-1,$EQ2_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_SEQ_LF_GAIN,-1,$EQ1_SLOT,$generic) # %eq_data[($c_pointer2*13) + 1])
			set_engine_par($ENGINE_PAR_SEQ_LF_GAIN,%eq_data[($c_pointer2*13) + 1],-1,$EQ1_SLOT,$generic)
			set_engine_par($ENGINE_PAR_SEQ_LF_GAIN,%eq_data[($c_pointer2*13) + 1],-1,$EQ2_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_SEQ_LMF_Q,-1,$EQ1_SLOT,$generic) # %eq_data[($c_pointer2*13) + 2])
			set_engine_par($ENGINE_PAR_SEQ_LMF_Q,%eq_data[($c_pointer2*13) + 2],-1,$EQ1_SLOT,$generic)
			set_engine_par($ENGINE_PAR_SEQ_LMF_Q,%eq_data[($c_pointer2*13) + 2],-1,$EQ2_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_SEQ_LMF_GAIN,-1,$EQ1_SLOT,$generic) # %eq_data[($c_pointer2*13) + 3])
			set_engine_par($ENGINE_PAR_SEQ_LMF_GAIN,%eq_data[($c_pointer2*13) + 3],-1,$EQ1_SLOT,$generic)
			set_engine_par($ENGINE_PAR_SEQ_LMF_GAIN,%eq_data[($c_pointer2*13) + 3],-1,$EQ2_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_SEQ_LMF_FREQ,-1,$EQ1_SLOT,$generic) # %eq_data[($c_pointer2*13) + 4])
			set_engine_par($ENGINE_PAR_SEQ_LMF_FREQ,%eq_data[($c_pointer2*13) + 4],-1,$EQ1_SLOT,$generic)
			set_engine_par($ENGINE_PAR_SEQ_LMF_FREQ,%eq_data[($c_pointer2*13) + 4],-1,$EQ2_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_SEQ_HMF_Q,-1,$EQ1_SLOT,$generic) # %eq_data[($c_pointer2*13) + 5])
			set_engine_par($ENGINE_PAR_SEQ_HMF_Q,%eq_data[($c_pointer2*13) + 5],-1,$EQ1_SLOT,$generic)
			set_engine_par($ENGINE_PAR_SEQ_HMF_Q,%eq_data[($c_pointer2*13) + 5],-1,$EQ2_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_SEQ_HMF_GAIN,-1,$EQ1_SLOT,$generic) # %eq_data[($c_pointer2*13) + 6])
			set_engine_par($ENGINE_PAR_SEQ_HMF_GAIN,%eq_data[($c_pointer2*13) + 6],-1,$EQ1_SLOT,$generic)
			set_engine_par($ENGINE_PAR_SEQ_HMF_GAIN,%eq_data[($c_pointer2*13) + 6],-1,$EQ2_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_SEQ_HMF_FREQ,-1,$EQ1_SLOT,$generic) # %eq_data[($c_pointer2*13) + 7])
			set_engine_par($ENGINE_PAR_SEQ_HMF_FREQ,%eq_data[($c_pointer2*13) + 7],-1,$EQ1_SLOT,$generic)
			set_engine_par($ENGINE_PAR_SEQ_HMF_FREQ,%eq_data[($c_pointer2*13) + 7],-1,$EQ2_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_SEQ_HF_GAIN,-1,$EQ1_SLOT,$generic) # %eq_data[($c_pointer2*13) + 8])
			set_engine_par($ENGINE_PAR_SEQ_HF_GAIN,%eq_data[($c_pointer2*13) + 8],-1,$EQ1_SLOT,$generic)
			set_engine_par($ENGINE_PAR_SEQ_HF_GAIN,%eq_data[($c_pointer2*13) + 8],-1,$EQ2_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_SEQ_HF_FREQ,-1,$EQ1_SLOT,$generic) # %eq_data[($c_pointer2*13) + 9])
			set_engine_par($ENGINE_PAR_SEQ_HF_FREQ,%eq_data[($c_pointer2*13) + 9],-1,$EQ1_SLOT,$generic)
			set_engine_par($ENGINE_PAR_SEQ_HF_FREQ,%eq_data[($c_pointer2*13) + 9],-1,$EQ2_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,-1,$EQ1_SLOT,$generic) # %eq_data[($c_pointer2*13) + 10])
			set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%eq_data[($c_pointer2*13) + 10],-1,$EQ1_SLOT,$generic)
			set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%eq_data[($c_pointer2*13) + 10],-1,$EQ2_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_SEQ_LF_BELL,-1,$EQ1_SLOT,$generic) # %eq_data[($c_pointer2*13) + 11])
			set_engine_par($ENGINE_PAR_SEQ_LF_BELL,%eq_data[($c_pointer2*13) + 11],-1,$EQ1_SLOT,$generic)
			set_engine_par($ENGINE_PAR_SEQ_LF_BELL,%eq_data[($c_pointer2*13) + 11],-1,$EQ2_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_SEQ_HF_BELL,-1,$EQ1_SLOT,$generic) # %eq_data[($c_pointer2*13) + 12])
			set_engine_par($ENGINE_PAR_SEQ_HF_BELL,%eq_data[($c_pointer2*13) + 12],-1,$EQ1_SLOT,$generic)
			set_engine_par($ENGINE_PAR_SEQ_HF_BELL,%eq_data[($c_pointer2*13) + 12],-1,$EQ2_SLOT,$generic)
		end if
	{trans}
		if(get_engine_par($ENGINE_PAR_TR_INPUT,-1,$TRANS1_SLOT,$generic) # %trans_data[($c_pointer2*4)])
			set_engine_par($ENGINE_PAR_TR_INPUT,%trans_data[($c_pointer2*4)],-1,$TRANS1_SLOT,$generic)
			set_engine_par($ENGINE_PAR_TR_INPUT,%trans_data[($c_pointer2*4)],-1,$TRANS2_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_TR_ATTACK,-1,$TRANS1_SLOT,$generic) # %trans_data[($c_pointer2*4) + 1])
			set_engine_par($ENGINE_PAR_TR_ATTACK,%trans_data[($c_pointer2*4) + 1],-1,$TRANS1_SLOT,$generic)
			set_engine_par($ENGINE_PAR_TR_ATTACK,%trans_data[($c_pointer2*4) + 1],-1,$TRANS2_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_TR_SUSTAIN,-1,$TRANS1_SLOT,$generic) # %trans_data[($c_pointer2*4) + 2])
			set_engine_par($ENGINE_PAR_TR_SUSTAIN,%trans_data[($c_pointer2*4) + 2],-1,$TRANS1_SLOT,$generic)
			set_engine_par($ENGINE_PAR_TR_SUSTAIN,%trans_data[($c_pointer2*4) + 2],-1,$TRANS2_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,-1,$TRANS1_SLOT,$generic) # %trans_data[($c_pointer2*4) + 3])
			set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%trans_data[($c_pointer2*4) + 3],-1,$TRANS1_SLOT,$generic)
			set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%trans_data[($c_pointer2*4) + 3],-1,$TRANS2_SLOT,$generic)
		end if
	{comp}
		if(get_engine_par($ENGINE_PAR_SCOMP_THRESHOLD,-1,$COMP_SLOT,$generic) # %comp_data[($c_pointer2*7)])
			set_engine_par($ENGINE_PAR_SCOMP_THRESHOLD,%comp_data[($c_pointer2*7)],-1,$COMP_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_SCOMP_MAKEUP,-1,$COMP_SLOT,$generic) # %comp_data[($c_pointer2*7) + 1])
			set_engine_par($ENGINE_PAR_SCOMP_MAKEUP,%comp_data[($c_pointer2*7) + 1],-1,$COMP_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_SCOMP_RATIO,-1,$COMP_SLOT,$generic) # %comp_data[($c_pointer2*7) + 2])
			set_engine_par($ENGINE_PAR_SCOMP_RATIO,%comp_data[($c_pointer2*7) + 2],-1,$COMP_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_SCOMP_ATTACK,-1,$COMP_SLOT,$generic) # %comp_data[($c_pointer2*7) + 3])
			set_engine_par($ENGINE_PAR_SCOMP_ATTACK,%comp_data[($c_pointer2*7) + 3],-1,$COMP_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_SCOMP_RELEASE,-1,$COMP_SLOT,$generic) # %comp_data[($c_pointer2*7) + 4])
			set_engine_par($ENGINE_PAR_SCOMP_RELEASE,%comp_data[($c_pointer2*7) + 4],-1,$COMP_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_SCOMP_MIX,-1,$COMP_SLOT,$generic) # %comp_data[($c_pointer2*7) + 5])
			set_engine_par($ENGINE_PAR_SCOMP_MIX,%comp_data[($c_pointer2*7) + 5],-1,$COMP_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,-1,$COMP_SLOT,$generic) # %comp_data[($c_pointer2*7) + 6])
			set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%comp_data[($c_pointer2*7) + 6],-1,$COMP_SLOT,$generic)
		end if
	{tape}
		if(get_engine_par($ENGINE_PAR_TP_GAIN,-1,$TAPE_SLOT,$generic) # %tape_data[($c_pointer2*4)])
			set_engine_par($ENGINE_PAR_TP_GAIN,%tape_data[($c_pointer2*4)],-1,$TAPE_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_TP_WARMTH,-1,$TAPE_SLOT,$generic) # %tape_data[($c_pointer2*4) + 1])
			set_engine_par($ENGINE_PAR_TP_WARMTH,%tape_data[($c_pointer2*4) + 1],-1,$TAPE_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_TP_HF_ROLLOFF,-1,$TAPE_SLOT,$generic) # %tape_data[($c_pointer2*4) + 2])
			set_engine_par($ENGINE_PAR_TP_HF_ROLLOFF,%tape_data[($c_pointer2*4) + 2],-1,$TAPE_SLOT,$generic)
		end if
		if(get_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,-1,$TAPE_SLOT,$generic) # %tape_data[($c_pointer2*4) + 3])
			set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%tape_data[($c_pointer2*4) + 3],-1,$TAPE_SLOT,$generic)
		end if
	{fx bypasses}
		if(%onoff_arr[($c_pointer2*4)] = 1)
			if(%routing_state[$c_pointer2] < 2)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,(%onoff_arr[($c_pointer2*4)]+1) mod 2,-1,$EQ1_SLOT,$generic)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,%onoff_arr[($c_pointer2*4)],-1,$EQ2_SLOT,$generic)
			else
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,(%onoff_arr[($c_pointer2*4)]+1) mod 2,-1,$EQ2_SLOT,$generic)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,%onoff_arr[($c_pointer2*4)],-1,$EQ1_SLOT,$generic)
			end if
		else
			set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,-1,$EQ2_SLOT,$generic)
			set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,-1,$EQ1_SLOT,$generic)
		end if
		
		if(%onoff_arr[($c_pointer2*4) + 1] = 1)
			if(%routing_state[$c_pointer2] mod 2 = 0)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,(%onoff_arr[($c_pointer2*4) + 1]+1) mod 2,-1,$TRANS1_SLOT,$generic)	
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,%onoff_arr[($c_pointer2*4) + 1],-1,$TRANS2_SLOT,$generic)	
			else
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,(%onoff_arr[($c_pointer2*4) + 1]+1) mod 2,-1,$TRANS2_SLOT,$generic)	
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,%onoff_arr[($c_pointer2*4) + 1],-1,$TRANS1_SLOT,$generic)				
			end if
		else
			set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,-1,$TRANS2_SLOT,$generic)	
			set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,-1,$TRANS1_SLOT,$generic)	
		end if
		
		set_engine_par($ENGINE_PAR_EFFECT_BYPASS,(%onoff_arr[($c_pointer2*4) + 2]+1) mod 2,-1,$COMP_SLOT,$generic)
		set_engine_par($ENGINE_PAR_EFFECT_BYPASS,(%onoff_arr[($c_pointer2*4) + 3]+1) mod 2,-1,$TAPE_SLOT,$generic)
		
	call update_values
	
	{kick & snare micbalance}
		if($c_pointer2 < 2)
			$c_pointer := $c_pointer2*3
			while($c_pointer < 3 + ($c_pointer2*3))
				$mic_pointer := $c_pointer
				call micbalance
				inc($c_pointer)
				wait($LOAD_WAIT)
			end while
		end if
		
	%fxpreset_change_flag[$cur_selection] := 0
end function

function kickfxload
	%fx_preset_save_array[0] := $fx_preset_kick
	%fx_preset_flags[0] := 0
	!fx_preset_name_list[0] := get_menu_item_str(%fx_preset_id[0],%fx_preset_save_array[0])
	if($fx_preset_kick < $KICK_FX_PRESETS)
		$count2 := 0
		while($count2 < 13)
			%eq_data[$count2 + 0] := %kick_fact_presets[($fx_preset_kick*36) + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%trans_data[$count2 + 0] := %kick_fact_presets[($fx_preset_kick*36) + 13 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 7)
			%comp_data[$count2 + 0] := %kick_fact_presets[($fx_preset_kick*36) + 17 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%tape_data[$count2 + 0] := %kick_fact_presets[($fx_preset_kick*36) + 24 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%onoff_arr[$count2 + 0] := %kick_fact_presets[($fx_preset_kick*36) + 28 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 3)
			set_control_par(%micbalance_id[(0*3) + $count2],$CONTROL_PAR_VALUE,%kick_fact_presets[($fx_preset_kick*36) + 32 + $count2])
			inc($count2)
			wait($LOAD_WAIT)
		end while
		%routing_state[0] := %kick_fact_presets[($fx_preset_kick*36) + 35]
		set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
	else
		$count2 := 0
		while($count2 < 13)
			%eq_data[$count2 + 0] := %kit_A_vin_kick_user_presets[(($fx_preset_kick - $KICK_FX_PRESETS - 1)*36) + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%trans_data[$count2 + 0] := %kit_A_vin_kick_user_presets[(($fx_preset_kick - $KICK_FX_PRESETS - 1)*36) + 13 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 7)
			%comp_data[$count2 + 0] := %kit_A_vin_kick_user_presets[(($fx_preset_kick - $KICK_FX_PRESETS - 1)*36) + 17 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%tape_data[$count2 + 0] := %kit_A_vin_kick_user_presets[(($fx_preset_kick - $KICK_FX_PRESETS - 1)*36) + 24 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%onoff_arr[$count2 + 0] := %kit_A_vin_kick_user_presets[(($fx_preset_kick - $KICK_FX_PRESETS - 1)*36) + 28 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 3)
			set_control_par(%micbalance_id[(0*3) + $count2],$CONTROL_PAR_VALUE,%kit_A_vin_kick_user_presets[(($fx_preset_kick - $KICK_FX_PRESETS - 1)*36) + 32 + $count2])
			inc($count2)
			wait($LOAD_WAIT)
		end while
		%routing_state[0] := %kit_A_vin_kick_user_presets[(($fx_preset_kick - $KICK_FX_PRESETS - 1)*36) + 35]
		set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete")
	end if
	$c_pointer2 := 0
	call resetchannelfx
end function

function snarefxload
	%fx_preset_save_array[1] := $fx_preset_snare
	%fx_preset_flags[1] := 0
	!fx_preset_name_list[1] := get_menu_item_str(%fx_preset_id[1],%fx_preset_save_array[1])
	if($fx_preset_snare < $SNARE_FX_PRESETS)
		$count2 := 0
		while($count2 < 13)
			%eq_data[$count2 + (1*13)] := %snare_fact_presets[($fx_preset_snare*36) + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%trans_data[$count2 + (1*4)] := %snare_fact_presets[($fx_preset_snare*36) + 13 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 7)
			%comp_data[$count2 + (1*7)] := %snare_fact_presets[($fx_preset_snare*36) + 17 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%tape_data[$count2 + (1*4)] := %snare_fact_presets[($fx_preset_snare*36) + 24 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%onoff_arr[$count2 + (1*4)] := %snare_fact_presets[($fx_preset_snare*36) + 28 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 3)
			set_control_par(%micbalance_id[(1*3) + $count2],$CONTROL_PAR_VALUE,%snare_fact_presets[($fx_preset_snare*36) + 32 + $count2])
			inc($count2)
			wait($LOAD_WAIT)
		end while
		%routing_state[1] := %snare_fact_presets[($fx_preset_snare*36) + 35]
		set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
	else
		$count2 := 0
		while($count2 < 13)
			%eq_data[$count2 + (1*13)] := %kit_A_vin_snare_user_presets[(($fx_preset_snare - $SNARE_FX_PRESETS - 1)*36) + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%trans_data[$count2 + (1*4)] := %kit_A_vin_snare_user_presets[(($fx_preset_snare - $SNARE_FX_PRESETS - 1)*36) + 13 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 7)
			%comp_data[$count2 + (1*7)] := %kit_A_vin_snare_user_presets[(($fx_preset_snare - $SNARE_FX_PRESETS - 1)*36) + 17 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%tape_data[$count2 + (1*4)] := %kit_A_vin_snare_user_presets[(($fx_preset_snare - $SNARE_FX_PRESETS - 1)*36) + 24 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%onoff_arr[$count2 + (1*4)] := %kit_A_vin_snare_user_presets[(($fx_preset_snare - $SNARE_FX_PRESETS - 1)*36) + 28 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 3)
			set_control_par(%micbalance_id[(1*3) + $count2],$CONTROL_PAR_VALUE,%kit_A_vin_snare_user_presets[(($fx_preset_snare - $SNARE_FX_PRESETS - 1)*36) + 32 + $count2])
			inc($count2)
			wait($LOAD_WAIT)
		end while
		%routing_state[1] := %kit_A_vin_snare_user_presets[(($fx_preset_snare - $SNARE_FX_PRESETS - 1)*36) + 35]
		set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete")
	end if
	$c_pointer2 := 1
	call resetchannelfx
end function

function hihatfxload
	%fx_preset_save_array[2] := $fx_preset_hihat
	%fx_preset_flags[2] := 0
	!fx_preset_name_list[2] := get_menu_item_str(%fx_preset_id[2],%fx_preset_save_array[2])
	if($fx_preset_hihat < $HIHAT_FX_PRESETS)
		$count2 := 0
		while($count2 < 13)
			%eq_data[$count2 + (2*13)] := %hihat_fact_presets[($fx_preset_hihat*36) + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%trans_data[$count2 + (2*4)] := %hihat_fact_presets[($fx_preset_hihat*36) + 13 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 7)
			%comp_data[$count2 + (2*7)] := %hihat_fact_presets[($fx_preset_hihat*36) + 17 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%tape_data[$count2 + (2*4)] := %hihat_fact_presets[($fx_preset_hihat*36) + 24 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%onoff_arr[$count2 + (2*4)] := %hihat_fact_presets[($fx_preset_hihat*36) + 28 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		%routing_state[2] := %hihat_fact_presets[($fx_preset_hihat*36) + 35]
		set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
	else
		$count2 := 0
		while($count2 < 13)
			%eq_data[$count2 + (2*13)] := %kit_A_vin_hihat_user_presets[(($fx_preset_hihat - $HIHAT_FX_PRESETS - 1)*36) + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%trans_data[$count2 + (2*4)] := %kit_A_vin_hihat_user_presets[(($fx_preset_hihat - $HIHAT_FX_PRESETS - 1)*36) + 13 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 7)
			%comp_data[$count2 + (2*7)] := %kit_A_vin_hihat_user_presets[(($fx_preset_hihat - $HIHAT_FX_PRESETS - 1)*36) + 17 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%tape_data[$count2 + (2*4)] := %kit_A_vin_hihat_user_presets[(($fx_preset_hihat - $HIHAT_FX_PRESETS - 1)*36) + 24 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%onoff_arr[$count2 + (2*4)] := %kit_A_vin_hihat_user_presets[(($fx_preset_hihat - $HIHAT_FX_PRESETS - 1)*36) + 28 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		%routing_state[2] := %kit_A_vin_hihat_user_presets[(($fx_preset_hihat - $HIHAT_FX_PRESETS - 1)*36) + 35]
		set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete")
	end if
	$c_pointer2 := 2
	call resetchannelfx
end function

function tomfxload
	%fx_preset_save_array[$c_pointer2] := $fx_preset_toms
	%fx_preset_flags[$c_pointer2] := 0
	!fx_preset_name_list[$c_pointer2] := get_menu_item_str(%fx_preset_id[3],%fx_preset_save_array[$c_pointer2])
	if($fx_preset_toms < $TOM_FX_PRESETS)
		$count2 := 0
		while($count2 < 13)
			%eq_data[$count2 + ($c_pointer2*13)] := %tom_fact_presets[($fx_preset_toms*36) + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%trans_data[$count2 + ($c_pointer2*4)] := %tom_fact_presets[($fx_preset_toms*36) + 13 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 7)
			%comp_data[$count2 + ($c_pointer2*7)] := %tom_fact_presets[($fx_preset_toms*36) + 17 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%tape_data[$count2 + ($c_pointer2*4)] := %tom_fact_presets[($fx_preset_toms*36) + 24 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%onoff_arr[$count2 + ($c_pointer2*4)] := %tom_fact_presets[($fx_preset_toms*36) + 28 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		%routing_state[$c_pointer2] := %tom_fact_presets[($fx_preset_toms*36) + 35]
		set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
	else
		$count2 := 0
		while($count2 < 13)
			%eq_data[$count2 + ($c_pointer2*13)] := %kit_A_vin_tom_user_presets[(($fx_preset_toms - $TOM_FX_PRESETS - 1)*36) + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%trans_data[$count2 + ($c_pointer2*4)] := %kit_A_vin_tom_user_presets[(($fx_preset_toms - $TOM_FX_PRESETS - 1)*36) + 13 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 7)
			%comp_data[$count2 + ($c_pointer2*7)] := %kit_A_vin_tom_user_presets[(($fx_preset_toms - $TOM_FX_PRESETS - 1)*36) + 17 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%tape_data[$count2 + ($c_pointer2*4)] := %kit_A_vin_tom_user_presets[(($fx_preset_toms - $TOM_FX_PRESETS - 1)*36) + 24 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%onoff_arr[$count2 + ($c_pointer2*4)] := %kit_A_vin_tom_user_presets[(($fx_preset_toms - $TOM_FX_PRESETS - 1)*36) + 28 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		%routing_state[$c_pointer2] := %kit_A_vin_tom_user_presets[(($fx_preset_toms - $TOM_FX_PRESETS - 1)*36) + 35]
		set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete")
	end if
	call resetchannelfx
end function

function percfxload
	%fx_preset_save_array[$c_pointer2] := $fx_preset_perc
	%fx_preset_flags[$c_pointer2] := 0
	!fx_preset_name_list[$c_pointer2] := get_menu_item_str(%fx_preset_id[4],%fx_preset_save_array[$c_pointer2])
	if($fx_preset_perc < $PERC_FX_PRESETS)
		$count2 := 0
		while($count2 < 13)
			%eq_data[$count2 + ($c_pointer2*13)] := %perc_fact_presets[($fx_preset_perc*36) + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%trans_data[$count2 + ($c_pointer2*4)] := %perc_fact_presets[($fx_preset_perc*36) + 13 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 7)
			%comp_data[$count2 + ($c_pointer2*7)] := %perc_fact_presets[($fx_preset_perc*36) + 17 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%tape_data[$count2 + ($c_pointer2*4)] := %perc_fact_presets[($fx_preset_perc*36) + 24 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%onoff_arr[$count2 + ($c_pointer2*4)] := %perc_fact_presets[($fx_preset_perc*36) + 28 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		%routing_state[$c_pointer2] := %perc_fact_presets[($fx_preset_perc*36) + 35]
		set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
	else
		$count2 := 0
		while($count2 < 13)
			%eq_data[$count2 + ($c_pointer2*13)] := %kit_A_vin_perc_user_presets[(($fx_preset_perc - $PERC_FX_PRESETS - 1)*36) + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%trans_data[$count2 + ($c_pointer2*4)] := %kit_A_vin_perc_user_presets[(($fx_preset_perc - $PERC_FX_PRESETS - 1)*36) + 13 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 7)
			%comp_data[$count2 + ($c_pointer2*7)] := %kit_A_vin_perc_user_presets[(($fx_preset_perc - $PERC_FX_PRESETS - 1)*36) + 17 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%tape_data[$count2 + ($c_pointer2*4)] := %kit_A_vin_perc_user_presets[(($fx_preset_perc - $PERC_FX_PRESETS - 1)*36) + 24 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%onoff_arr[$count2 + ($c_pointer2*4)] := %kit_A_vin_perc_user_presets[(($fx_preset_perc - $PERC_FX_PRESETS - 1)*36) + 28 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		%routing_state[$c_pointer2] := %kit_A_vin_perc_user_presets[(($fx_preset_perc - $PERC_FX_PRESETS - 1)*36) + 35]
		set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete")
	end if
	call resetchannelfx
end function

function ohfxload
	%fx_preset_save_array[$c_pointer2] := $fx_preset_oh
	%fx_preset_flags[$c_pointer2] := 0
	!fx_preset_name_list[$c_pointer2] := get_menu_item_str(%fx_preset_id[5],%fx_preset_save_array[$c_pointer2])
	if($fx_preset_oh < $OH_FX_PRESETS)
		$count2 := 0
		while($count2 < 13)
			%eq_data[$count2 + ($c_pointer2*13)] := %oh_fact_presets[($fx_preset_oh*36) + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%trans_data[$count2 + ($c_pointer2*4)] := %oh_fact_presets[($fx_preset_oh*36) + 13 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 7)
			%comp_data[$count2 + ($c_pointer2*7)] := %oh_fact_presets[($fx_preset_oh*36) + 17 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%tape_data[$count2 + ($c_pointer2*4)] := %oh_fact_presets[($fx_preset_oh*36) + 24 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%onoff_arr[$count2 + ($c_pointer2*4)] := %oh_fact_presets[($fx_preset_oh*36) + 28 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		%routing_state[$c_pointer2] := %oh_fact_presets[($fx_preset_oh*36) + 35]
		set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
	else
		$count2 := 0
		while($count2 < 13)
			%eq_data[$count2 + ($c_pointer2*13)] := %kit_A_vin_oh_user_presets[(($fx_preset_oh - $OH_FX_PRESETS - 1)*36) + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%trans_data[$count2 + ($c_pointer2*4)] := %kit_A_vin_oh_user_presets[(($fx_preset_oh - $OH_FX_PRESETS - 1)*36) + 13 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 7)
			%comp_data[$count2 + ($c_pointer2*7)] := %kit_A_vin_oh_user_presets[(($fx_preset_oh - $OH_FX_PRESETS - 1)*36) + 17 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%tape_data[$count2 + ($c_pointer2*4)] := %kit_A_vin_oh_user_presets[(($fx_preset_oh - $OH_FX_PRESETS - 1)*36) + 24 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%onoff_arr[$count2 + ($c_pointer2*4)] := %kit_A_vin_oh_user_presets[(($fx_preset_oh - $OH_FX_PRESETS - 1)*36) + 28 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		%routing_state[$c_pointer2] := %kit_A_vin_oh_user_presets[(($fx_preset_oh - $OH_FX_PRESETS - 1)*36) + 35]
		set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete")
	end if
	call resetchannelfx
end function

function masterfxload
	$c_pointer2 := 14
	%fx_preset_flags[$c_pointer2] := 0
	%fx_preset_save_array[$c_pointer2] := $fx_preset_master
	!fx_preset_name_list[14] := get_menu_item_str(%fx_preset_id[6],%fx_preset_save_array[14])
	
	if($fx_preset_master < $MASTER_FX_PRESETS)
		$count2 := 0
		while($count2 < 13)
			%eq_data[$count2 + ($c_pointer2*13)] := %master_fact_presets[($fx_preset_master*36) + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%trans_data[$count2 + ($c_pointer2*4)] := %master_fact_presets[($fx_preset_master*36) + 13 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 7)
			%comp_data[$count2 + ($c_pointer2*7)] := %master_fact_presets[($fx_preset_master*36) + 17 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%tape_data[$count2 + ($c_pointer2*4)] := %master_fact_presets[($fx_preset_master*36) + 24 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%onoff_arr[$count2 + ($c_pointer2*4)] := %master_fact_presets[($fx_preset_master*36) + 28 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		%routing_state[$c_pointer2] := %master_fact_presets[($fx_preset_master*36) + 35]
		set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
	else
		$count2 := 0
		while($count2 < 13)
			%eq_data[$count2 + ($c_pointer2*13)] := %kit_A_vin_master_user_presets[(($fx_preset_master-$MASTER_FX_PRESETS-1)*36) + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%trans_data[$count2 + ($c_pointer2*4)] := %kit_A_vin_master_user_presets[(($fx_preset_master-$MASTER_FX_PRESETS-1)*36) + 13 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 7)
			%comp_data[$count2 + ($c_pointer2*7)] := %kit_A_vin_master_user_presets[(($fx_preset_master-$MASTER_FX_PRESETS-1)*36) + 17 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%tape_data[$count2 + ($c_pointer2*4)] := %kit_A_vin_master_user_presets[(($fx_preset_master-$MASTER_FX_PRESETS-1)*36) + 24 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		$count2 := 0
		while($count2 < 4)
			%onoff_arr[$count2 + ($c_pointer2*4)] := %kit_A_vin_master_user_presets[(($fx_preset_master-$MASTER_FX_PRESETS-1)*36) + 28 + $count2]
			wait($LOAD_WAIT)
			inc($count2)
		end while
		%routing_state[$c_pointer2] := %kit_A_vin_master_user_presets[(($fx_preset_master-$MASTER_FX_PRESETS-1)*36) + 35]
		set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete")
	end if
	call resetchannelfx
end function

{4.2 -- FX PRESETS - CALLBACKS}

on ui_control($fx_preset_next)
	select($cur_selection)
		case 0
			if($fx_preset_kick = $KICK_FX_PRESETS - 1 and %kit_A_vin_num_kick_user_presets[0] = 0)
				$fx_preset_kick := 0
			else
				if($fx_preset_kick = $KICK_FX_PRESETS + %kit_A_vin_num_kick_user_presets[0])
					$fx_preset_kick := 0
				else
					inc($fx_preset_kick)
					if($fx_preset_kick = $KICK_FX_PRESETS)
						inc($fx_preset_kick)
					end if
				end if
			end if
			call kickfxload
		case 1
			if($fx_preset_snare = $SNARE_FX_PRESETS - 1 and  %kit_A_vin_num_snare_user_presets[0] = 0)
				$fx_preset_snare := 0
			else
				if($fx_preset_snare = $SNARE_FX_PRESETS + %kit_A_vin_num_snare_user_presets[0])
					$fx_preset_snare := 0
				else
					inc($fx_preset_snare)
					if($fx_preset_snare = $SNARE_FX_PRESETS)
						inc($fx_preset_snare)
					end if
				end if
			end if
			call snarefxload
		case 2
			if($fx_preset_hihat = $HIHAT_FX_PRESETS -1 and %kit_A_vin_num_hihat_user_presets[0] = 0)
				$fx_preset_hihat := 0
			else
				if($fx_preset_hihat = $HIHAT_FX_PRESETS + %kit_A_vin_num_hihat_user_presets[0])
					$fx_preset_hihat := 0
				else				
					inc($fx_preset_hihat)
					if($fx_preset_hihat = $HIHAT_FX_PRESETS)
						inc($fx_preset_hihat)
					end if
				end if
			end if
			call hihatfxload
		case 3 to 8
			$c_pointer2 := $cur_selection
			if(%generic_inst_id[$cur_selection - 3] < $PERC1_ID)
				if($fx_preset_toms = $TOM_FX_PRESETS -1 and %kit_A_vin_num_tom_user_presets[0] = 0)
					$fx_preset_toms := 0
				else
					if($fx_preset_toms = $TOM_FX_PRESETS + %kit_A_vin_num_tom_user_presets[0])
						$fx_preset_toms := 0
					else
						inc($fx_preset_toms)
						if($fx_preset_toms = $TOM_FX_PRESETS)
							inc($fx_preset_toms)
						end if
					end if
				end if
				call tomfxload
			else
				if($fx_preset_perc = $PERC_FX_PRESETS -1 and %kit_A_vin_num_perc_user_presets[0] = 0)
					$fx_preset_perc := 0
				else
					if($fx_preset_perc = $PERC_FX_PRESETS + %kit_A_vin_num_perc_user_presets[0])
						$fx_preset_perc := 0
					else
						inc($fx_preset_perc)
						if($fx_preset_perc = $PERC_FX_PRESETS)
							inc($fx_preset_perc)
						end if
					end if
				end if
				call percfxload
			end if
		case 9 to 12
			$c_pointer2 := $cur_selection
			if($fx_preset_oh = $OH_FX_PRESETS -1 and %kit_A_vin_num_oh_user_presets[0] = 0)
				$fx_preset_oh := 0
			else
				if($fx_preset_oh = $OH_FX_PRESETS + %kit_A_vin_num_oh_user_presets[0])
					$fx_preset_oh := 0
				else
					inc($fx_preset_oh)
					if($fx_preset_oh = $OH_FX_PRESETS)
						inc($fx_preset_oh)
					end if
				end if
			end if
			call ohfxload
		case 14
			if($fx_preset_master = $MASTER_FX_PRESETS -1 and %kit_A_vin_num_master_user_presets[0] = 0)
				$fx_preset_master := 0
			else
				if($fx_preset_master = $MASTER_FX_PRESETS + %kit_A_vin_num_master_user_presets[0])
					$fx_preset_master := 0
				else
					inc($fx_preset_master)
					if($fx_preset_master = $MASTER_FX_PRESETS)
						inc($fx_preset_master)
					end if
				end if
			end if
			call masterfxload
	end select
end on

on ui_control($fx_preset_prev)
	select($cur_selection)
		case 0
			if($fx_preset_kick = 0)
				$fx_preset_kick := $KICK_FX_PRESETS + %kit_A_vin_num_kick_user_presets[0]
			else
				dec($fx_preset_kick)
			end if
			if($fx_preset_kick = $KICK_FX_PRESETS)
				dec($fx_preset_kick)
			end if
			call kickfxload
		case 1
			if($fx_preset_snare = 0)
				$fx_preset_snare := $SNARE_FX_PRESETS + %kit_A_vin_num_snare_user_presets[0]
			else
				dec($fx_preset_snare)
			end if
			if($fx_preset_snare = $SNARE_FX_PRESETS)
				dec($fx_preset_snare)
			end if
			call snarefxload
		case 2
			if($fx_preset_hihat = 0)
				$fx_preset_hihat := $HIHAT_FX_PRESETS + %kit_A_vin_num_hihat_user_presets[0]
			else
				dec($fx_preset_hihat)
			end if
			if($fx_preset_hihat = $HIHAT_FX_PRESETS)
				dec($fx_preset_hihat)
			end if
			call hihatfxload
		case 3 to 8
			$c_pointer2 := $cur_selection
			if(%generic_inst_id[$cur_selection - 3] < $PERC1_ID)
				if($fx_preset_toms = 0)
					$fx_preset_toms := $TOM_FX_PRESETS + %kit_A_vin_num_tom_user_presets[0]
				else
					dec($fx_preset_toms)
				end if
				if($fx_preset_toms = $TOM_FX_PRESETS)
					dec($fx_preset_toms)
				end if
				call tomfxload
			else
				if($fx_preset_perc = 0)
					$fx_preset_perc := $PERC_FX_PRESETS + %kit_A_vin_num_perc_user_presets[0]
				else
					dec($fx_preset_perc)
				end if
				if($fx_preset_perc = $PERC_FX_PRESETS)
					dec($fx_preset_perc)
				end if
				call percfxload
			end if
		case 9 to 12
			$c_pointer2 := $cur_selection
			if($fx_preset_oh = 0)
				$fx_preset_oh := $OH_FX_PRESETS + %kit_A_vin_num_oh_user_presets[0]
			else
				dec($fx_preset_oh)
			end if
			if($fx_preset_oh = $OH_FX_PRESETS)
				dec($fx_preset_oh)
			end if
			call ohfxload
		case 14
			if($fx_preset_master = 0)
				$fx_preset_master := $MASTER_FX_PRESETS + %kit_A_vin_num_master_user_presets[0]
			else
				dec($fx_preset_master)
			end if
			if($fx_preset_master = $MASTER_FX_PRESETS)
				dec($fx_preset_master)
			end if
			call masterfxload
	end select
end on

on ui_control($fx_preset_save)
	%fx_preset_flags[$cur_selection] := 0
	select ($cur_selection)
		case 0
			if($fx_preset_kick < $KICK_FX_PRESETS or %fxpreset_change_flag[0] = 1)
				if(%kit_A_vin_num_kick_user_presets[0] = 0)
					set_menu_item_visibility(%fx_preset_id[0], $KICK_FX_PRESETS, 1)
				end if
				inc(%kit_A_vin_num_kick_user_presets[0])
				$fx_preset_helper := %kit_A_vin_num_kick_user_presets[0] - 1
				!kit_A_vin_kick_user_preset_names[$fx_preset_helper] := @fx_preset_name
				!fx_preset_name_list[0] := @fx_preset_name
				set_menu_item_visibility(%fx_preset_id[0], $KICK_FX_PRESETS + %kit_A_vin_num_kick_user_presets[0], 1)
				set_menu_item_str(%fx_preset_id[0], $KICK_FX_PRESETS + %kit_A_vin_num_kick_user_presets[0], !kit_A_vin_kick_user_preset_names[$fx_preset_helper])
				$fx_preset_kick := $KICK_FX_PRESETS + %kit_A_vin_num_kick_user_presets[0]
				%fxpreset_change_flag[0] := 0
				%fx_preset_save_array[0] := $fx_preset_kick
			else
				$fx_preset_helper := ($fx_preset_kick - $KICK_FX_PRESETS - 1)
			end if
			$count2 := 0
			while($count2 < 13)
				%kit_A_vin_kick_user_presets[($fx_preset_helper*36) + $count2] := %eq_data[$count2 + 0]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 4)
				%kit_A_vin_kick_user_presets[($fx_preset_helper*36) + 13 + $count2] := %trans_data[$count2 + 0]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 7)
				%kit_A_vin_kick_user_presets[($fx_preset_helper*36) + 17 + $count2] := %comp_data[$count2 + 0]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 4)
				%kit_A_vin_kick_user_presets[($fx_preset_helper*36) + 24 + $count2] := %tape_data[$count2 + 0]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 4)
				%kit_A_vin_kick_user_presets[($fx_preset_helper*36) + 28 + $count2] := %onoff_arr[$count2 + 0]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 3)
				%kit_A_vin_kick_user_presets[($fx_preset_helper*36) + 32 + $count2] := get_control_par(%micbalance_id[(0*3) + $count2],$CONTROL_PAR_VALUE)
				inc($count2)
				wait($LOAD_WAIT)
			end while
			%kit_A_vin_kick_user_presets[($fx_preset_helper*36) + 35] := %routing_state[0]
			save_array(%kit_A_vin_kick_user_presets,1)
			save_array(!kit_A_vin_kick_user_preset_names,1)
			save_array(%kit_A_vin_num_kick_user_presets,1)
		case 1
			if($fx_preset_snare < $SNARE_FX_PRESETS or %fxpreset_change_flag[1] = 1)
				if(%kit_A_vin_num_snare_user_presets[0] = 0)
					set_menu_item_visibility(%fx_preset_id[1], $SNARE_FX_PRESETS, 1)
				end if
				inc(%kit_A_vin_num_snare_user_presets[0])
				$fx_preset_helper := %kit_A_vin_num_snare_user_presets[0] - 1
				!kit_A_vin_snare_user_preset_names[$fx_preset_helper] := @fx_preset_name
				!fx_preset_name_list[1] := @fx_preset_name
				set_menu_item_visibility(%fx_preset_id[1], $SNARE_FX_PRESETS + %kit_A_vin_num_snare_user_presets[0], 1)
				set_menu_item_str(%fx_preset_id[1], $SNARE_FX_PRESETS + %kit_A_vin_num_snare_user_presets[0], !kit_A_vin_snare_user_preset_names[$fx_preset_helper])
				$fx_preset_snare := $SNARE_FX_PRESETS + %kit_A_vin_num_snare_user_presets[0]
				%fxpreset_change_flag[1] := 0
				%fx_preset_save_array[1] := $fx_preset_snare
			else
				$fx_preset_helper := ($fx_preset_snare - $SNARE_FX_PRESETS - 1)
			end if
			$count2 := 0
			while($count2 < 13)
				%kit_A_vin_snare_user_presets[($fx_preset_helper*36) + $count2] := %eq_data[$count2 + (1*13)]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 4)
				%kit_A_vin_snare_user_presets[($fx_preset_helper*36) + 13 + $count2] := %trans_data[$count2 + (1*4)]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 7)
				%kit_A_vin_snare_user_presets[($fx_preset_helper*36) + 17 + $count2] := %comp_data[$count2 + (1*7)]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 4)
				%kit_A_vin_snare_user_presets[($fx_preset_helper*36) + 24 + $count2] := %tape_data[$count2 + (1*4)]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 4)
				%kit_A_vin_snare_user_presets[($fx_preset_helper*36) + 28 + $count2] := %onoff_arr[$count2 + (1*4)]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 3)
				%kit_A_vin_snare_user_presets[($fx_preset_helper*36) + 32 + $count2] := get_control_par(%micbalance_id[(1*3) + $count2],$CONTROL_PAR_VALUE)
				inc($count2)
				wait($LOAD_WAIT)
			end while
			%kit_A_vin_snare_user_presets[($fx_preset_helper*36) + 35] := %routing_state[1]
			save_array(%kit_A_vin_snare_user_presets,1)
			save_array(!kit_A_vin_snare_user_preset_names,1)
			save_array(%kit_A_vin_num_snare_user_presets,1)
		case 2
			if($fx_preset_hihat < $HIHAT_FX_PRESETS or %fxpreset_change_flag[2] = 1)
				if(%kit_A_vin_num_hihat_user_presets[0] = 0)
					set_menu_item_visibility(%fx_preset_id[2], $HIHAT_FX_PRESETS, 1)
				end if
				inc(%kit_A_vin_num_hihat_user_presets[0])
				$fx_preset_helper := %kit_A_vin_num_hihat_user_presets[0] - 1
				!kit_A_vin_hihat_user_preset_names[$fx_preset_helper] := @fx_preset_name
				!fx_preset_name_list[2] := @fx_preset_name
				set_menu_item_visibility(%fx_preset_id[2], $HIHAT_FX_PRESETS + %kit_A_vin_num_hihat_user_presets[0], 1)
				set_menu_item_str(%fx_preset_id[2], $HIHAT_FX_PRESETS + %kit_A_vin_num_hihat_user_presets[0], !kit_A_vin_hihat_user_preset_names[$fx_preset_helper])
				$fx_preset_hihat := $HIHAT_FX_PRESETS + %kit_A_vin_num_hihat_user_presets[0]
				%fxpreset_change_flag[2] := 0
				%fx_preset_save_array[2] := $fx_preset_hihat
			else
				$fx_preset_helper := ($fx_preset_hihat - $HIHAT_FX_PRESETS - 1)
			end if
			$count2 := 0
			while($count2 < 13)
				%kit_A_vin_hihat_user_presets[($fx_preset_helper*36) + $count2] := %eq_data[$count2 + (2*13)]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 4)
				%kit_A_vin_hihat_user_presets[($fx_preset_helper*36) + 13 + $count2] := %trans_data[$count2 + (2*4)]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 7)
				%kit_A_vin_hihat_user_presets[($fx_preset_helper*36) + 17 + $count2] := %comp_data[$count2 + (2*7)]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 4)
				%kit_A_vin_hihat_user_presets[($fx_preset_helper*36) + 24 + $count2] := %tape_data[$count2 + (2*4)]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 4)
				%kit_A_vin_hihat_user_presets[($fx_preset_helper*36) + 28 + $count2] := %onoff_arr[$count2 + (2*4)]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			%kit_A_vin_hihat_user_presets[($fx_preset_helper*36) + 35] := %routing_state[2]
			save_array(%kit_A_vin_hihat_user_presets,1)
			save_array(!kit_A_vin_hihat_user_preset_names,1)
			save_array(%kit_A_vin_num_hihat_user_presets,1)
		case 3 to 8
			$c_pointer2 := $cur_selection
			if(%generic_inst_id[$c_pointer2 - 3] < $PERC1_ID)
				if($fx_preset_toms < $TOM_FX_PRESETS or %fxpreset_change_flag[$c_pointer2] = 1)
					if(%kit_A_vin_num_tom_user_presets[0] = 0)
						set_menu_item_visibility(%fx_preset_id[3], $TOM_FX_PRESETS, 1)
					end if
					inc(%kit_A_vin_num_tom_user_presets[0])
					$fx_preset_helper := %kit_A_vin_num_tom_user_presets[0] - 1
					!kit_A_vin_tom_user_preset_names[$fx_preset_helper] := @fx_preset_name
					!fx_preset_name_list[$c_pointer2] := @fx_preset_name
					set_menu_item_visibility(%fx_preset_id[3], $TOM_FX_PRESETS + %kit_A_vin_num_tom_user_presets[0], 1)
					set_menu_item_str(%fx_preset_id[3], $TOM_FX_PRESETS + %kit_A_vin_num_tom_user_presets[0], !kit_A_vin_tom_user_preset_names[$fx_preset_helper])
					$fx_preset_toms := $TOM_FX_PRESETS + %kit_A_vin_num_tom_user_presets[0]
					%fxpreset_change_flag[$c_pointer2] := 0
					%fx_preset_save_array[$c_pointer2] := $fx_preset_toms
				else
					$fx_preset_helper := ($fx_preset_toms - $TOM_FX_PRESETS - 1)
				end if
				$count2 := 0
				while($count2 < 13)
					%kit_A_vin_tom_user_presets[($fx_preset_helper*36) + $count2] := %eq_data[$count2 + ($c_pointer2*13)]
					wait($LOAD_WAIT)
					inc($count2)
				end while
				$count2 := 0
				while($count2 < 4)
					%kit_A_vin_tom_user_presets[($fx_preset_helper*36) + 13 + $count2] := %trans_data[$count2 + ($c_pointer2*4)]
					wait($LOAD_WAIT)
					inc($count2)
				end while
				$count2 := 0
				while($count2 < 7)
					%kit_A_vin_tom_user_presets[($fx_preset_helper*36) + 17 + $count2] := %comp_data[$count2 + ($c_pointer2*7)]
					wait($LOAD_WAIT)
					inc($count2)
				end while
				$count2 := 0
				while($count2 < 4)
					%kit_A_vin_tom_user_presets[($fx_preset_helper*36) + 24 + $count2] := %tape_data[$count2 + ($c_pointer2*4)]
					wait($LOAD_WAIT)
					inc($count2)
				end while
				$count2 := 0
				while($count2 < 4)
					%kit_A_vin_tom_user_presets[($fx_preset_helper*36) + 28 + $count2] := %onoff_arr[$count2 + ($c_pointer2*4)]
					wait($LOAD_WAIT)
					inc($count2)
				end while
				%kit_A_vin_tom_user_presets[($fx_preset_helper*36) + 35] := %routing_state[$c_pointer2]
				save_array(%kit_A_vin_tom_user_presets,1)
				save_array(!kit_A_vin_tom_user_preset_names,1)
				save_array(%kit_A_vin_num_tom_user_presets,1)
			else
				if($fx_preset_perc < $PERC_FX_PRESETS or %fxpreset_change_flag[$c_pointer2] = 1)
					if(%kit_A_vin_num_perc_user_presets[0] = 0)
						set_menu_item_visibility(%fx_preset_id[4], $PERC_FX_PRESETS, 1)
					end if
					inc(%kit_A_vin_num_perc_user_presets[0])
					$fx_preset_helper := %kit_A_vin_num_perc_user_presets[0] - 1
					!kit_A_vin_perc_user_preset_names[$fx_preset_helper] := @fx_preset_name
					!fx_preset_name_list[$c_pointer2] := @fx_preset_name
					set_menu_item_visibility(%fx_preset_id[4], $PERC_FX_PRESETS + %kit_A_vin_num_perc_user_presets[0], 1)
					set_menu_item_str(%fx_preset_id[4], $PERC_FX_PRESETS + %kit_A_vin_num_perc_user_presets[0], !kit_A_vin_perc_user_preset_names[$fx_preset_helper])
					$fx_preset_perc := $PERC_FX_PRESETS + %kit_A_vin_num_perc_user_presets[0]
					%fxpreset_change_flag[$c_pointer2] := 0
					%fx_preset_save_array[$c_pointer2] := $fx_preset_perc
				else
					$fx_preset_helper := ($fx_preset_perc - $PERC_FX_PRESETS - 1)
				end if
				$count2 := 0
				while($count2 < 13)
					%kit_A_vin_perc_user_presets[($fx_preset_helper*36) + $count2] := %eq_data[$count2 + ($c_pointer2*13)]
					wait($LOAD_WAIT)
					inc($count2)
				end while
				$count2 := 0
				while($count2 < 4)
					%kit_A_vin_perc_user_presets[($fx_preset_helper*36) + 13 + $count2] := %trans_data[$count2 + ($c_pointer2*4)]
					wait($LOAD_WAIT)
					inc($count2)
				end while
				$count2 := 0
				while($count2 < 7)
					%kit_A_vin_perc_user_presets[($fx_preset_helper*36) + 17 + $count2] := %comp_data[$count2 + ($c_pointer2*7)]
					wait($LOAD_WAIT)
					inc($count2)
				end while
				$count2 := 0
				while($count2 < 4)
					%kit_A_vin_perc_user_presets[($fx_preset_helper*36) + 24 + $count2] := %tape_data[$count2 + ($c_pointer2*4)]
					wait($LOAD_WAIT)
					inc($count2)
				end while
				$count2 := 0
				while($count2 < 4)
					%kit_A_vin_perc_user_presets[($fx_preset_helper*36) + 28 + $count2] := %onoff_arr[$count2 + ($c_pointer2*4)]
					wait($LOAD_WAIT)
					inc($count2)
				end while
				%kit_A_vin_perc_user_presets[($fx_preset_helper*36) + 35] := %routing_state[$c_pointer2]
				save_array(%kit_A_vin_perc_user_presets,1)
				save_array(!kit_A_vin_perc_user_preset_names,1)
				save_array(%kit_A_vin_num_perc_user_presets,1)
			end if
		case 9 to 12
			$c_pointer2 := $cur_selection
			if($fx_preset_oh < $OH_FX_PRESETS or %fxpreset_change_flag[$c_pointer2] = 1)
				if(%kit_A_vin_num_oh_user_presets[0] = 0)
					set_menu_item_visibility(%fx_preset_id[5], $OH_FX_PRESETS, 1)
				end if
				inc(%kit_A_vin_num_oh_user_presets[0])
				$fx_preset_helper := %kit_A_vin_num_oh_user_presets[0] - 1
				!kit_A_vin_oh_user_preset_names[$fx_preset_helper] := @fx_preset_name
				!fx_preset_name_list[$c_pointer2] := @fx_preset_name
				set_menu_item_visibility(%fx_preset_id[5], $OH_FX_PRESETS + %kit_A_vin_num_oh_user_presets[0], 1)
				set_menu_item_str(%fx_preset_id[5], $OH_FX_PRESETS + %kit_A_vin_num_oh_user_presets[0], !kit_A_vin_oh_user_preset_names[$fx_preset_helper])
				$fx_preset_oh := $OH_FX_PRESETS + %kit_A_vin_num_oh_user_presets[0]
				%fxpreset_change_flag[$c_pointer2] := 0
				%fx_preset_save_array[$c_pointer2] := $fx_preset_oh
			else
				$fx_preset_helper := ($fx_preset_oh - $OH_FX_PRESETS - 1)
			end if
			$count2 := 0
			while($count2 < 13)
				%kit_A_vin_oh_user_presets[($fx_preset_helper*36) + $count2] := %eq_data[$count2 + ($c_pointer2*13)]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 4)
				%kit_A_vin_oh_user_presets[($fx_preset_helper*36) + 13 + $count2] := %trans_data[$count2 + ($c_pointer2*4)]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 7)
				%kit_A_vin_oh_user_presets[($fx_preset_helper*36) + 17 + $count2] := %comp_data[$count2 + ($c_pointer2*7)]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 4)
				%kit_A_vin_oh_user_presets[($fx_preset_helper*36) + 24 + $count2] := %tape_data[$count2 + ($c_pointer2*4)]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 4)
				%kit_A_vin_oh_user_presets[($fx_preset_helper*36) + 28 + $count2] := %onoff_arr[$count2 + ($c_pointer2*4)]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			%kit_A_vin_oh_user_presets[($fx_preset_helper*36) + 35] := %routing_state[$c_pointer2]
			save_array(%kit_A_vin_oh_user_presets,1)
			save_array(!kit_A_vin_oh_user_preset_names,1)
			save_array(%kit_A_vin_num_oh_user_presets,1)
		case 14
			if($fx_preset_master < $MASTER_FX_PRESETS or %fxpreset_change_flag[14] = 1)
				if(%kit_A_vin_num_master_user_presets[0] = 0)
					set_menu_item_visibility(%fx_preset_id[6], $MASTER_FX_PRESETS, 1)
				end if
				inc(%kit_A_vin_num_master_user_presets[0])
				$fx_preset_helper := %kit_A_vin_num_master_user_presets[0] - 1
				!kit_A_vin_master_user_preset_names[$fx_preset_helper] := @fx_preset_name
				!fx_preset_name_list[14] := @fx_preset_name
				set_menu_item_visibility(%fx_preset_id[6], $MASTER_FX_PRESETS + %kit_A_vin_num_master_user_presets[0], 1)
				set_menu_item_str(%fx_preset_id[6], $MASTER_FX_PRESETS + %kit_A_vin_num_master_user_presets[0], !kit_A_vin_master_user_preset_names[$fx_preset_helper])
				$fx_preset_master := $MASTER_FX_PRESETS + %kit_A_vin_num_master_user_presets[0]
				%fxpreset_change_flag[14] := 0
				%fx_preset_save_array[14] := $fx_preset_master
			else
				$fx_preset_helper := ($fx_preset_master - $MASTER_FX_PRESETS - 1)
			end if
			$count2 := 0
			while($count2 < 13)
				%kit_A_vin_master_user_presets[($fx_preset_helper*36) + $count2] := %eq_data[$count2 + (14*13)]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 4)
				%kit_A_vin_master_user_presets[($fx_preset_helper*36) + 13 + $count2] := %trans_data[$count2 + (14*4)]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 7)
				%kit_A_vin_master_user_presets[($fx_preset_helper*36) + 17 + $count2] := %comp_data[$count2 + (14*7)]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 4)
				%kit_A_vin_master_user_presets[($fx_preset_helper*36) + 24 + $count2] := %tape_data[$count2 + (14*4)]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			$count2 := 0
			while($count2 < 4)
				%kit_A_vin_master_user_presets[($fx_preset_helper*36) + 28 + $count2] := %onoff_arr[$count2 + (14*4)]
				wait($LOAD_WAIT)
				inc($count2)
			end while
			%kit_A_vin_master_user_presets[($fx_preset_helper*36) + 35] := %routing_state[$c_pointer2]
			save_array(%kit_A_vin_master_user_presets,1)
			save_array(!kit_A_vin_master_user_preset_names,1)
			save_array(%kit_A_vin_num_master_user_presets,1)
	end select
	set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete")
end on

on ui_control($fx_preset_delete)
	select($cur_selection)
		case 0
			if($fx_preset_kick > $KICK_FX_PRESETS)
				%fx_preset_flags[0] := 1
				if($fx_preset_kick = $KICK_FX_PRESETS + %kit_A_vin_num_kick_user_presets[0])
					dec(%kit_A_vin_num_kick_user_presets[0])
					if(%kit_A_vin_num_kick_user_presets[0] = 0)
						set_menu_item_visibility(%fx_preset_id[0], $KICK_FX_PRESETS, 0)
					else
						set_menu_item_visibility(%fx_preset_id[0], $KICK_FX_PRESETS, 1)	
					end if
					set_menu_item_visibility(%fx_preset_id[0], $fx_preset_kick, 0)
				else
					dec(%kit_A_vin_num_kick_user_presets[0])
					if(%kit_A_vin_num_kick_user_presets[0] = 0)
						set_menu_item_visibility(%fx_preset_id[0], $KICK_FX_PRESETS, 0)
					else
						set_menu_item_visibility(%fx_preset_id[0], $KICK_FX_PRESETS, 1)	
					end if
					
					$preset_helper := $fx_preset_kick - $KICK_FX_PRESETS - 1
					while($preset_helper < %kit_A_vin_num_kick_user_presets[0])
						$count2 := 0
						while($count2 < 36)
							%kit_A_vin_kick_user_presets[($preset_helper*36) + $count2] := %kit_A_vin_kick_user_presets[(($preset_helper + 1)*36) + $count2]
							inc($count2)
							wait($LOAD_WAIT)
						end while
						!kit_A_vin_kick_user_preset_names[$preset_helper] := !kit_A_vin_kick_user_preset_names[$preset_helper+1]
						set_menu_item_str(%fx_preset_id[0],$preset_helper + $KICK_FX_PRESETS + 1, !kit_A_vin_kick_user_preset_names[$preset_helper])
						inc($preset_helper)
						wait($LOAD_WAIT)
					end while
					set_menu_item_visibility(%fx_preset_id[0], $KICK_FX_PRESETS + %kit_A_vin_num_kick_user_presets[0] + 1, 0)
					save_array(!kit_A_vin_kick_user_preset_names,1)
					save_array(%kit_A_vin_kick_user_presets,1)
				end if
				save_array(%kit_A_vin_num_kick_user_presets,1)
				$fx_preset_kick := 0
				%fx_preset_save_array[0] := 0
				@fx_preset_name := @empty_preset_text
				!fx_preset_name_list[0] := @empty_preset_text
				set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
			end if
		case 1
			if($fx_preset_snare > $SNARE_FX_PRESETS)
				%fx_preset_flags[1] := 1
				if($fx_preset_snare = $SNARE_FX_PRESETS + %kit_A_vin_num_snare_user_presets[0])
					dec(%kit_A_vin_num_snare_user_presets[0])
					if(%kit_A_vin_num_snare_user_presets[0] = 0)
						set_menu_item_visibility(%fx_preset_id[1], $SNARE_FX_PRESETS, 0)
					else
						set_menu_item_visibility(%fx_preset_id[1], $SNARE_FX_PRESETS, 1)	
					end if
					set_menu_item_visibility(%fx_preset_id[1], $fx_preset_snare, 0)
				else
					dec(%kit_A_vin_num_snare_user_presets[0])
					if(%kit_A_vin_num_snare_user_presets[0] = 0)
						set_menu_item_visibility(%fx_preset_id[1], $SNARE_FX_PRESETS, 0)
					else
						set_menu_item_visibility(%fx_preset_id[1], $SNARE_FX_PRESETS, 1)	
					end if
					
					$preset_helper := $fx_preset_snare - $SNARE_FX_PRESETS - 1
					while($preset_helper < %kit_A_vin_num_snare_user_presets[0])
						$count2 := 0
						while($count2 < 36)
							%kit_A_vin_snare_user_presets[($preset_helper*36) + $count2] := %kit_A_vin_snare_user_presets[(($preset_helper + 1)*36) + $count2]
							inc($count2)
							wait($LOAD_WAIT)
						end while
						!kit_A_vin_snare_user_preset_names[$preset_helper] := !kit_A_vin_snare_user_preset_names[$preset_helper+1]
						set_menu_item_str(%fx_preset_id[1],$preset_helper + $SNARE_FX_PRESETS + 1, !kit_A_vin_snare_user_preset_names[$preset_helper])
						inc($preset_helper)
						wait($LOAD_WAIT)
					end while
					set_menu_item_visibility(%fx_preset_id[1], $SNARE_FX_PRESETS + %kit_A_vin_num_snare_user_presets[0] + 1, 0)
					save_array(!kit_A_vin_snare_user_preset_names,1)
					save_array(%kit_A_vin_snare_user_presets,1)
				end if
				save_array(%kit_A_vin_num_snare_user_presets,1)
				$fx_preset_snare := 0
				%fx_preset_save_array[1] := 0
				!fx_preset_name_list[1] := @empty_preset_text
				@fx_preset_name := @empty_preset_text
				set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
			end if
		case 2
			if($fx_preset_hihat > $HIHAT_FX_PRESETS)
				%fx_preset_flags[2] := 1
				if($fx_preset_hihat = $HIHAT_FX_PRESETS + %kit_A_vin_num_hihat_user_presets[0])
					dec(%kit_A_vin_num_hihat_user_presets[0])
					if(%kit_A_vin_num_hihat_user_presets[0] = 0)
						set_menu_item_visibility(%fx_preset_id[2], $HIHAT_FX_PRESETS, 0)
					else
						set_menu_item_visibility(%fx_preset_id[2], $HIHAT_FX_PRESETS, 1)	
					end if
					set_menu_item_visibility(%fx_preset_id[2], $fx_preset_hihat, 0)
				else
					dec(%kit_A_vin_num_hihat_user_presets[0])
					if(%kit_A_vin_num_hihat_user_presets[0] = 0)
						set_menu_item_visibility(%fx_preset_id[2], $HIHAT_FX_PRESETS, 0)
					else
						set_menu_item_visibility(%fx_preset_id[2], $HIHAT_FX_PRESETS, 1)	
					end if
					
					$preset_helper := $fx_preset_hihat - $HIHAT_FX_PRESETS - 1
					while($preset_helper < %kit_A_vin_num_hihat_user_presets[0])
						$count2 := 0
						while($count2 < 36)
							%kit_A_vin_hihat_user_presets[($preset_helper*36) + $count2] := %kit_A_vin_hihat_user_presets[(($preset_helper + 1)*36) + $count2]
							inc($count2)
							wait($LOAD_WAIT)
						end while
						!kit_A_vin_hihat_user_preset_names[$preset_helper] := !kit_A_vin_hihat_user_preset_names[$preset_helper+1]
						set_menu_item_str(%fx_preset_id[2],$preset_helper + $HIHAT_FX_PRESETS + 1, !kit_A_vin_hihat_user_preset_names[$preset_helper])
						inc($preset_helper)
						wait($LOAD_WAIT)
					end while
					set_menu_item_visibility(%fx_preset_id[2], $HIHAT_FX_PRESETS + %kit_A_vin_num_hihat_user_presets[0] + 1, 0)
					save_array(!kit_A_vin_hihat_user_preset_names,1)
					save_array(%kit_A_vin_hihat_user_presets,1)
				end if
				save_array(%kit_A_vin_num_hihat_user_presets,1)
				$fx_preset_hihat := 0
				!fx_preset_name_list[2] := @empty_preset_text
				%fx_preset_save_array[2] := 0
				@fx_preset_name := @empty_preset_text
				set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
			end if
		case 3 to 8
			$c_pointer2 := $cur_selection
			if(%generic_inst_id[$c_pointer2 - 3] < $PERC1_ID)
				if($fx_preset_toms > $TOM_FX_PRESETS)
					if($fx_preset_toms = $TOM_FX_PRESETS + %kit_A_vin_num_tom_user_presets[0])
						dec(%kit_A_vin_num_tom_user_presets[0])
						if(%kit_A_vin_num_tom_user_presets[0] = 0)
							set_menu_item_visibility(%fx_preset_id[3], $TOM_FX_PRESETS, 0)
						else
							set_menu_item_visibility(%fx_preset_id[3], $TOM_FX_PRESETS, 1)	
						end if
						set_menu_item_visibility(%fx_preset_id[3], $fx_preset_toms, 0)
					else
						dec(%kit_A_vin_num_tom_user_presets[0])
						if(%kit_A_vin_num_tom_user_presets[0] = 0)
							set_menu_item_visibility(%fx_preset_id[3], $TOM_FX_PRESETS, 0)
						else
							set_menu_item_visibility(%fx_preset_id[3], $TOM_FX_PRESETS, 1)	
						end if
						
						$preset_helper := $fx_preset_toms - $TOM_FX_PRESETS - 1
						while($preset_helper < %kit_A_vin_num_tom_user_presets[0])
							$count2 := 0
							while($count2 < 36)
								%kit_A_vin_tom_user_presets[($preset_helper*36) + $count2] := %kit_A_vin_tom_user_presets[(($preset_helper + 1)*36) + $count2]
								inc($count2)
								wait($LOAD_WAIT)
							end while
							!kit_A_vin_tom_user_preset_names[$preset_helper] := !kit_A_vin_tom_user_preset_names[$preset_helper+1]
							set_menu_item_str(%fx_preset_id[3],$preset_helper + $TOM_FX_PRESETS + 1, !kit_A_vin_tom_user_preset_names[$preset_helper])
							inc($preset_helper)
							wait($LOAD_WAIT)
						end while
						set_menu_item_visibility(%fx_preset_id[3], $TOM_FX_PRESETS + %kit_A_vin_num_tom_user_presets[0] + 1, 0)
						save_array(!kit_A_vin_tom_user_preset_names,1)
						save_array(%kit_A_vin_tom_user_presets,1)
					end if
					save_array(%kit_A_vin_num_tom_user_presets,1)
					@fx_preset_name := @empty_preset_text
					!fx_preset_name_list[$c_pointer2] := @empty_preset_text
					set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
					$c_pointer3 := 3
					while($c_pointer3 < 9)
						if(%generic_inst_id[$c_pointer3 - 3] < $PERC1_ID)
							if(%fx_preset_save_array[$c_pointer3] = $fx_preset_toms)
								%fx_preset_flags[$c_pointer3] := 1
								%fx_preset_save_array[$c_pointer3] := 0
							else
								if(%fx_preset_save_array[$c_pointer3] > $fx_preset_oh)
									dec(%fx_preset_save_array[$c_pointer3])
								end if
							end if
						end if
						inc($c_pointer3)
					end while
					$fx_preset_toms := 0
				end if
			else
				if($fx_preset_perc > $PERC_FX_PRESETS)
					if($fx_preset_perc = $PERC_FX_PRESETS + %kit_A_vin_num_perc_user_presets[0])
						dec(%kit_A_vin_num_perc_user_presets[0])
						if(%kit_A_vin_num_perc_user_presets[0] = 0)
							set_menu_item_visibility(%fx_preset_id[4], $PERC_FX_PRESETS, 0)
						else
							set_menu_item_visibility(%fx_preset_id[4], $PERC_FX_PRESETS, 1)	
						end if
						set_menu_item_visibility(%fx_preset_id[4], $fx_preset_perc, 0)
					else
						dec(%kit_A_vin_num_perc_user_presets[0])
						if(%kit_A_vin_num_perc_user_presets[0] = 0)
							set_menu_item_visibility(%fx_preset_id[4], $PERC_FX_PRESETS, 0)
						else
							set_menu_item_visibility(%fx_preset_id[4], $PERC_FX_PRESETS, 1)	
						end if
						
						$preset_helper := $fx_preset_perc - $PERC_FX_PRESETS - 1
						while($preset_helper < %kit_A_vin_num_perc_user_presets[0])
							$count2 := 0
							while($count2 < 36)
								%kit_A_vin_perc_user_presets[($preset_helper*36) + $count2] := %kit_A_vin_perc_user_presets[(($preset_helper + 1)*36) + $count2]
								inc($count2)
								wait($LOAD_WAIT)
							end while
							!kit_A_vin_perc_user_preset_names[$preset_helper] := !kit_A_vin_perc_user_preset_names[$preset_helper+1]
							set_menu_item_str(%fx_preset_id[4],$preset_helper + $PERC_FX_PRESETS + 1, !kit_A_vin_perc_user_preset_names[$preset_helper])
							inc($preset_helper)
							wait($LOAD_WAIT)
						end while
						set_menu_item_visibility(%fx_preset_id[4], $PERC_FX_PRESETS + %kit_A_vin_num_perc_user_presets[0] + 1, 0)
						save_array(!kit_A_vin_perc_user_preset_names,1)
						save_array(%kit_A_vin_perc_user_presets,1)
					end if
					save_array(%kit_A_vin_num_perc_user_presets,1)
					@fx_preset_name := @empty_preset_text
					!fx_preset_name_list[$c_pointer2] := @empty_preset_text
					set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
					$c_pointer3 := 3
					while($c_pointer3 < 9)
						if(%generic_inst_id[$c_pointer3 - 3] >= $PERC1_ID)
							if(%fx_preset_save_array[$c_pointer3] = $fx_preset_perc)
								%fx_preset_flags[$c_pointer3] := 1
								%fx_preset_save_array[$c_pointer3] := 0
							else
								if(%fx_preset_save_array[$c_pointer3] > $fx_preset_perc)
									dec(%fx_preset_save_array[$c_pointer3])
								end if
							end if
						end if
						inc($c_pointer3)
					end while
					$fx_preset_perc := 0
				end if
			end if
		case 9 to 12
			$c_pointer2 := $cur_selection
			if($fx_preset_oh > $OH_FX_PRESETS)
				if($fx_preset_oh = $OH_FX_PRESETS + %kit_A_vin_num_oh_user_presets[0])
					dec(%kit_A_vin_num_oh_user_presets[0])
					if(%kit_A_vin_num_oh_user_presets[0] = 0)
						set_menu_item_visibility(%fx_preset_id[5], $OH_FX_PRESETS, 0)
					else
						set_menu_item_visibility(%fx_preset_id[5], $OH_FX_PRESETS, 1)	
					end if
					set_menu_item_visibility(%fx_preset_id[5], $fx_preset_oh, 0)
				else
					dec(%kit_A_vin_num_oh_user_presets[0])
					if(%kit_A_vin_num_oh_user_presets[0] = 0)
						set_menu_item_visibility(%fx_preset_id[5], $OH_FX_PRESETS, 0)
					else
						set_menu_item_visibility(%fx_preset_id[5], $OH_FX_PRESETS, 1)	
					end if
					
					$preset_helper := $fx_preset_oh - $OH_FX_PRESETS - 1
					while($preset_helper < %kit_A_vin_num_oh_user_presets[0])
						$count2 := 0
						while($count2 < 36)
							%kit_A_vin_oh_user_presets[($preset_helper*36) + $count2] := %kit_A_vin_oh_user_presets[(($preset_helper + 1)*36) + $count2]
							inc($count2)
							wait($LOAD_WAIT)
						end while
						!kit_A_vin_oh_user_preset_names[$preset_helper] := !kit_A_vin_oh_user_preset_names[$preset_helper+1]
						set_menu_item_str(%fx_preset_id[5],$preset_helper + $OH_FX_PRESETS + 1, !kit_A_vin_oh_user_preset_names[$preset_helper])
						inc($preset_helper)
						wait($LOAD_WAIT)
					end while
					set_menu_item_visibility(%fx_preset_id[5], $OH_FX_PRESETS + %kit_A_vin_num_oh_user_presets[0] + 1, 0)
					save_array(!kit_A_vin_oh_user_preset_names,1)
					save_array(%kit_A_vin_oh_user_presets,1)
				end if
				save_array(%kit_A_vin_num_oh_user_presets,1)
				@fx_preset_name := @empty_preset_text
				!fx_preset_name_list[$c_pointer2] := @empty_preset_text
				set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
				$c_pointer3 := 9
				while($c_pointer3 < 12)
					if(%fx_preset_save_array[$c_pointer3] = $fx_preset_oh)
						%fx_preset_flags[$c_pointer3] := 1
						%fx_preset_save_array[$c_pointer3] := 0
					else
						if(%fx_preset_save_array[$c_pointer3] > $fx_preset_oh)
							dec(%fx_preset_save_array[$c_pointer3])
						end if
					end if
					inc($c_pointer3)
				end while
				$fx_preset_oh := 0
			end if
		case 14
			if($fx_preset_master > $MASTER_FX_PRESETS)
				if($fx_preset_master = $MASTER_FX_PRESETS + %kit_A_vin_num_master_user_presets[0])
					dec(%kit_A_vin_num_master_user_presets[0])
					if(%kit_A_vin_num_master_user_presets[0] = 0)
						set_menu_item_visibility(%fx_preset_id[6], $MASTER_FX_PRESETS, 0)
					else
						set_menu_item_visibility(%fx_preset_id[6], $MASTER_FX_PRESETS, 1)	
					end if
					set_menu_item_visibility(%fx_preset_id[6], $fx_preset_master, 0)
				else
					dec(%kit_A_vin_num_master_user_presets[0])
					if(%kit_A_vin_num_master_user_presets[0] = 0)
						set_menu_item_visibility(%fx_preset_id[6], $MASTER_FX_PRESETS, 0)
					else
						set_menu_item_visibility(%fx_preset_id[6], $MASTER_FX_PRESETS, 1)	
					end if
					
					$preset_helper := $fx_preset_master - $MASTER_FX_PRESETS - 1
					while($preset_helper < %kit_A_vin_num_master_user_presets[0])
						$count2 := 0
						while($count2 < 36)
							%kit_A_vin_master_user_presets[($preset_helper*36) + $count2] := %kit_A_vin_master_user_presets[(($preset_helper + 1)*36) + $count2]
							inc($count2)
							wait($LOAD_WAIT)
						end while
						!kit_A_vin_master_user_preset_names[$preset_helper] := !kit_A_vin_master_user_preset_names[$preset_helper+1]
						set_menu_item_str(%fx_preset_id[6],$preset_helper + $MASTER_FX_PRESETS + 1, !kit_A_vin_master_user_preset_names[$preset_helper])
						inc($preset_helper)
						wait($LOAD_WAIT)
					end while
					set_menu_item_visibility(%fx_preset_id[6], $MASTER_FX_PRESETS + %kit_A_vin_num_master_user_presets[0] + 1, 0)
					save_array(!kit_A_vin_master_user_preset_names,1)
					save_array(%kit_A_vin_master_user_presets,1)
				end if
				save_array(%kit_A_vin_num_master_user_presets,1)
				@fx_preset_name := @empty_preset_text
				!fx_preset_name_list[14] := @empty_preset_text
				%fx_preset_flags[14] := 1
				%fx_preset_save_array[14] := 0
				$fx_preset_master := 0
				set_control_par_str(%fx_preset_id[10],$CONTROL_PAR_PICTURE,"NID_mixer_btn_fxdelete-inactive")
			end if
	end select
end on

on ui_control(@fx_preset_name)
	%fxpreset_change_flag[$cur_selection] := 1
end on

on ui_control($fx_preset_kick)
	if($fx_preset_kick = $KICK_FX_PRESETS)
		$fx_preset_kick := %fx_preset_save_array[0]
	else
		call kickfxload
	end if
end on

on ui_control($fx_preset_snare)
	if($fx_preset_snare = $SNARE_FX_PRESETS)
		$fx_preset_snare := %fx_preset_save_array[1]
	else
		call snarefxload
	end if
end on

on ui_control($fx_preset_hihat)
	if($fx_preset_hihat = $HIHAT_FX_PRESETS)
		$fx_preset_hihat := %fx_preset_save_array[2]
	else
		call hihatfxload
	end if
end on

on ui_control($fx_preset_toms)
	$c_pointer2 := $cur_selection
	if($fx_preset_toms = $TOM_FX_PRESETS)
		$fx_preset_toms := %fx_preset_save_array[$c_pointer2]
	else
		call tomfxload
	end if
end on

on ui_control($fx_preset_perc)
	$c_pointer2 := $cur_selection
	if($fx_preset_perc = $PERC_FX_PRESETS)
		$fx_preset_perc := %fx_preset_save_array[$c_pointer2]
	else
		call percfxload
	end if
end on

on ui_control($fx_preset_oh)
	$c_pointer2 := $cur_selection
	if($fx_preset_oh = $OH_FX_PRESETS)
		$fx_preset_oh := %fx_preset_save_array[$c_pointer2]
	else
		call ohfxload
	end if
end on

on ui_control($fx_preset_master)
	if($fx_preset_master = $MASTER_FX_PRESETS)
		$fx_preset_master := %fx_preset_save_array[14]
	else
		call masterfxload
	end if
end on

{5 -- MIXER PRESETS FUNCTIONS & CALLBACKS}

{5.1 -- MIXER PRESETS - FUNCTIONS}

function reset_instrument
	$reset_flag := 1
	fade_out($ALL_EVENTS,5000,0)
	wait(5000)
	
	$count := 0
	while ($count < 15)
		select ($count)
			case 0 to 12
				{channel/kit mic}
				set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,0,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$count)
			case 13
				{reverb}
				set_engine_par($ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN,0,-1,$REVERB_SLOT,0)
			case 14
				{master}
				set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,0,-1,$SPREAD_SLOT,1)	
			end select
		inc($count)
	end while
	
	{fx}
		$count := 0
		while($count < 15)
			if($count = 14)
				$generic := 1
			else
				$generic := $NI_BUS_OFFSET + $count
			end if
			if($count # 13)
			{eq}
				if(get_engine_par($ENGINE_PAR_SEQ_LF_FREQ,-1,$EQ1_SLOT,$generic) # %eq_data[($count*13)])
					set_engine_par($ENGINE_PAR_SEQ_LF_FREQ,%eq_data[($count*13)],-1,$EQ1_SLOT,$generic)
					set_engine_par($ENGINE_PAR_SEQ_LF_FREQ,%eq_data[($count*13)],-1,$EQ2_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_SEQ_LF_GAIN,-1,$EQ1_SLOT,$generic) # %eq_data[($count*13) + 1])
					set_engine_par($ENGINE_PAR_SEQ_LF_GAIN,%eq_data[($count*13) + 1],-1,$EQ1_SLOT,$generic)
					set_engine_par($ENGINE_PAR_SEQ_LF_GAIN,%eq_data[($count*13) + 1],-1,$EQ2_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_SEQ_LMF_Q,-1,$EQ1_SLOT,$generic) # %eq_data[($count*13) + 2])
					set_engine_par($ENGINE_PAR_SEQ_LMF_Q,%eq_data[($count*13) + 2],-1,$EQ1_SLOT,$generic)
					set_engine_par($ENGINE_PAR_SEQ_LMF_Q,%eq_data[($count*13) + 2],-1,$EQ2_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_SEQ_LMF_GAIN,-1,$EQ1_SLOT,$generic) # %eq_data[($count*13) + 3])
					set_engine_par($ENGINE_PAR_SEQ_LMF_GAIN,%eq_data[($count*13) + 3],-1,$EQ1_SLOT,$generic)
					set_engine_par($ENGINE_PAR_SEQ_LMF_GAIN,%eq_data[($count*13) + 3],-1,$EQ2_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_SEQ_LMF_FREQ,-1,$EQ1_SLOT,$generic) # %eq_data[($count*13) + 4])
					set_engine_par($ENGINE_PAR_SEQ_LMF_FREQ,%eq_data[($count*13) + 4],-1,$EQ1_SLOT,$generic)
					set_engine_par($ENGINE_PAR_SEQ_LMF_FREQ,%eq_data[($count*13) + 4],-1,$EQ2_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_SEQ_HMF_Q,-1,$EQ1_SLOT,$generic) # %eq_data[($count*13) + 5])
					set_engine_par($ENGINE_PAR_SEQ_HMF_Q,%eq_data[($count*13) + 5],-1,$EQ1_SLOT,$generic)
					set_engine_par($ENGINE_PAR_SEQ_HMF_Q,%eq_data[($count*13) + 5],-1,$EQ2_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_SEQ_HMF_GAIN,-1,$EQ1_SLOT,$generic) # %eq_data[($count*13) + 6])
					set_engine_par($ENGINE_PAR_SEQ_HMF_GAIN,%eq_data[($count*13) + 6],-1,$EQ1_SLOT,$generic)
					set_engine_par($ENGINE_PAR_SEQ_HMF_GAIN,%eq_data[($count*13) + 6],-1,$EQ2_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_SEQ_HMF_FREQ,-1,$EQ1_SLOT,$generic) # %eq_data[($count*13) + 7])
					set_engine_par($ENGINE_PAR_SEQ_HMF_FREQ,%eq_data[($count*13) + 7],-1,$EQ1_SLOT,$generic)
					set_engine_par($ENGINE_PAR_SEQ_HMF_FREQ,%eq_data[($count*13) + 7],-1,$EQ2_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_SEQ_HF_GAIN,-1,$EQ1_SLOT,$generic) # %eq_data[($count*13) + 8])
					set_engine_par($ENGINE_PAR_SEQ_HF_GAIN,%eq_data[($count*13) + 8],-1,$EQ1_SLOT,$generic)
					set_engine_par($ENGINE_PAR_SEQ_HF_GAIN,%eq_data[($count*13) + 8],-1,$EQ2_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_SEQ_HF_FREQ,-1,$EQ1_SLOT,$generic) # %eq_data[($count*13) + 9])
					set_engine_par($ENGINE_PAR_SEQ_HF_FREQ,%eq_data[($count*13) + 9],-1,$EQ1_SLOT,$generic)
					set_engine_par($ENGINE_PAR_SEQ_HF_FREQ,%eq_data[($count*13) + 9],-1,$EQ2_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,-1,$EQ1_SLOT,$generic) # %eq_data[($count*13) + 10])
					set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%eq_data[($count*13) + 10],-1,$EQ1_SLOT,$generic)
					set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%eq_data[($count*13) + 10],-1,$EQ2_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_SEQ_LF_BELL,-1,$EQ1_SLOT,$generic) # %eq_data[($count*13) + 11])
					set_engine_par($ENGINE_PAR_SEQ_LF_BELL,%eq_data[($count*13) + 11],-1,$EQ1_SLOT,$generic)
					set_engine_par($ENGINE_PAR_SEQ_LF_BELL,%eq_data[($count*13) + 11],-1,$EQ2_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_SEQ_HF_BELL,-1,$EQ1_SLOT,$generic) # %eq_data[($count*13) + 12])
					set_engine_par($ENGINE_PAR_SEQ_HF_BELL,%eq_data[($count*13) + 12],-1,$EQ1_SLOT,$generic)
					set_engine_par($ENGINE_PAR_SEQ_HF_BELL,%eq_data[($count*13) + 12],-1,$EQ2_SLOT,$generic)
				end if
			{trans}
				if(get_engine_par($ENGINE_PAR_TR_INPUT,-1,$TRANS1_SLOT,$generic) # %trans_data[($count*4)])
					set_engine_par($ENGINE_PAR_TR_INPUT,%trans_data[($count*4)],-1,$TRANS1_SLOT,$generic)
					set_engine_par($ENGINE_PAR_TR_INPUT,%trans_data[($count*4)],-1,$TRANS2_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_TR_ATTACK,-1,$TRANS1_SLOT,$generic) # %trans_data[($count*4) + 1])
					set_engine_par($ENGINE_PAR_TR_ATTACK,%trans_data[($count*4) + 1],-1,$TRANS1_SLOT,$generic)
					set_engine_par($ENGINE_PAR_TR_ATTACK,%trans_data[($count*4) + 1],-1,$TRANS2_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_TR_SUSTAIN,-1,$TRANS1_SLOT,$generic) # %trans_data[($count*4) + 2])
					set_engine_par($ENGINE_PAR_TR_SUSTAIN,%trans_data[($count*4) + 2],-1,$TRANS1_SLOT,$generic)
					set_engine_par($ENGINE_PAR_TR_SUSTAIN,%trans_data[($count*4) + 2],-1,$TRANS2_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,-1,$TRANS1_SLOT,$generic) # %trans_data[($count*4) + 3])
					set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%trans_data[($count*4) + 3],-1,$TRANS1_SLOT,$generic)
					set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%trans_data[($count*4) + 3],-1,$TRANS2_SLOT,$generic)
				end if
			{comp}
				if(get_engine_par($ENGINE_PAR_SCOMP_THRESHOLD,-1,$COMP_SLOT,$generic) # %comp_data[($count*7)])
					set_engine_par($ENGINE_PAR_SCOMP_THRESHOLD,%comp_data[($count*7)],-1,$COMP_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_SCOMP_MAKEUP,-1,$COMP_SLOT,$generic) # %comp_data[($count*7) + 1])
					set_engine_par($ENGINE_PAR_SCOMP_MAKEUP,%comp_data[($count*7) + 1],-1,$COMP_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_SCOMP_RATIO,-1,$COMP_SLOT,$generic) # %comp_data[($count*7) + 2])
					set_engine_par($ENGINE_PAR_SCOMP_RATIO,%comp_data[($count*7) + 2],-1,$COMP_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_SCOMP_ATTACK,-1,$COMP_SLOT,$generic) # %comp_data[($count*7) + 3])
					set_engine_par($ENGINE_PAR_SCOMP_ATTACK,%comp_data[($count*7) + 3],-1,$COMP_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_SCOMP_RELEASE,-1,$COMP_SLOT,$generic) # %comp_data[($count*7) + 4])
					set_engine_par($ENGINE_PAR_SCOMP_RELEASE,%comp_data[($count*7) + 4],-1,$COMP_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_SCOMP_MIX,-1,$COMP_SLOT,$generic) # %comp_data[($count*7) + 5])
					set_engine_par($ENGINE_PAR_SCOMP_MIX,%comp_data[($count*7) + 5],-1,$COMP_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,-1,$COMP_SLOT,$generic) # %comp_data[($count*7) + 6])
					set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%comp_data[($count*7) + 6],-1,$COMP_SLOT,$generic)
				end if
			{tape}
				if(get_engine_par($ENGINE_PAR_TP_GAIN,-1,$TAPE_SLOT,$generic) # %tape_data[($count*4)])
					set_engine_par($ENGINE_PAR_TP_GAIN,%tape_data[($count*4)],-1,$TAPE_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_TP_WARMTH,-1,$TAPE_SLOT,$generic) # %tape_data[($count*4) + 1])
					set_engine_par($ENGINE_PAR_TP_WARMTH,%tape_data[($count*4) + 1],-1,$TAPE_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_TP_HF_ROLLOFF,-1,$TAPE_SLOT,$generic) # %tape_data[($count*4) + 2])
					set_engine_par($ENGINE_PAR_TP_HF_ROLLOFF,%tape_data[($count*4) + 2],-1,$TAPE_SLOT,$generic)
				end if
				if(get_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,-1,$TAPE_SLOT,$generic) # %tape_data[($count*4) + 3])
					set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%tape_data[($count*4) + 3],-1,$TAPE_SLOT,$generic)
				end if
			end if
			inc($count)
			wait($LOAD_WAIT)
		end while
		call update_values
	{kick & snare micbalance}
		$mic_pointer := 0
		while($mic_pointer < 6)
			call micbalance
			inc($mic_pointer)
			wait($LOAD_WAIT)
		end while
	{l/r swap}
		$count := 9
		while($count < 13)
			if(%oh_stereo[$count - 9] = 1)
				if(%oh_stereo[$count - 9] # -1)
					$pan_value := ($lr_swap+1) mod 2
					$count2 := %oh_groups[$count - 9]
					while($count2 < %oh_groups[$count - 8])
						set_engine_par($ENGINE_PAR_EFFECT_BYPASS,$pan_value,$count2,$INVERT_SLOT,-1)
						inc($count2)
						wait($LOAD_WAIT)
					end while
				end if
			end if
			wait($LOAD_WAIT)
			inc($count)
		end while
	{fx bypasses}
		$count := 0
		while($count < 15)
			if($count # 13)
				if($count = 14)
					$generic := 1
				else
					$generic := $NI_BUS_OFFSET + $count
				end if
				
				if(%onoff_arr[($count*4)] = 1)
					if(%routing_state[$count] < 2)
						set_engine_par($ENGINE_PAR_EFFECT_BYPASS,(%onoff_arr[($count*4)]+1) mod 2,-1,$EQ1_SLOT,$generic)
						set_engine_par($ENGINE_PAR_EFFECT_BYPASS,%onoff_arr[($count*4)],-1,$EQ2_SLOT,$generic)
					else
						set_engine_par($ENGINE_PAR_EFFECT_BYPASS,(%onoff_arr[($count*4)]+1) mod 2,-1,$EQ2_SLOT,$generic)
						set_engine_par($ENGINE_PAR_EFFECT_BYPASS,%onoff_arr[($count*4)],-1,$EQ1_SLOT,$generic)
					end if
				else
					set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,-1,$EQ2_SLOT,$generic)
					set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,-1,$EQ1_SLOT,$generic)
				end if
				
				if(%onoff_arr[($count*4) + 1] = 1)
					if(%routing_state[$count] mod 2 = 0)
						set_engine_par($ENGINE_PAR_EFFECT_BYPASS,(%onoff_arr[($count*4) + 1]+1) mod 2,-1,$TRANS1_SLOT,$generic)	
						set_engine_par($ENGINE_PAR_EFFECT_BYPASS,%onoff_arr[($count*4) + 1],-1,$TRANS2_SLOT,$generic)	
					else
						set_engine_par($ENGINE_PAR_EFFECT_BYPASS,(%onoff_arr[($count*4) + 1]+1) mod 2,-1,$TRANS2_SLOT,$generic)	
						set_engine_par($ENGINE_PAR_EFFECT_BYPASS,%onoff_arr[($count*4) + 1],-1,$TRANS1_SLOT,$generic)				
					end if
				else
					set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,-1,$TRANS2_SLOT,$generic)	
					set_engine_par($ENGINE_PAR_EFFECT_BYPASS,1,-1,$TRANS1_SLOT,$generic)	
				end if
				
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,(%onoff_arr[($count*4) + 2]+1) mod 2,-1,$COMP_SLOT,$generic)
				set_engine_par($ENGINE_PAR_EFFECT_BYPASS,(%onoff_arr[($count*4) + 3]+1) mod 2,-1,$TAPE_SLOT,$generic)
			end if
			wait($LOAD_WAIT)
			inc($count)
		end while
	{reverb}
		call reverbpicupdate
		call irload
	{smooooooth}
	{	fade_out($ALL_EVENTS,5000, 0)
		wait(5000)}
	{channel controls}
		$c_pointer := 0
		while($c_pointer < 15)
			$send_pointer := $c_pointer
			$pan_pointer := $c_pointer
			$mute_pointer := $c_pointer
			$solo_pointer := $c_pointer
			$vol_pointer := $c_pointer
			select($c_pointer)
				case 0 to 12
					call sendlevel
					call channelpan
					call mutechannel
					call solochannel
					call channelvolume
				case 13
					call mutechannel
					call solochannel
					call channelvolume
				case 14
					call sendlevel
					call channelpan
					call channelvolume
			end select
			inc($c_pointer)
			wait($LOAD_WAIT)
		end while
		$reset_flag := 0
		fade_in($ALL_EVENTS,5000)
end function

function load_mixerpreset
	
	fade_out($ALL_EVENTS,5000,0)
	wait(5000)	
	$mixer_preset_flag := 0
	$last_mixerpreset := $mixer_preset_menu
	@mixer_preset_name := get_menu_item_str(%preset_controls[0],$mixer_preset_menu)
	
	if($mixer_preset_menu < $FACTORY_PRESETS)
		set_control_par_str(%preset_controls[4],$CONTROL_PAR_PICTURE,"NID_header_btn_delete-inactive")
	else
		set_control_par_str(%preset_controls[4],$CONTROL_PAR_PICTURE,"NID_header_btn_delete")
	end if
	
	$count := 0
	while($count < 15)
		!fx_preset_name_list[$count] := @mixer_preset_name
		%fx_preset_save_array[$count] := 0
		inc($count)
	end while

	$count := 0
	while($count < 3)
		set_control_par(%fx_preset_id[$count],$CONTROL_PAR_VALUE,%fx_preset_save_array[$count])
		inc($count)
	end while
	set_control_par(%fx_preset_id[6],$CONTROL_PAR_VALUE,%fx_preset_save_array[14])
	
	@fx_preset_name := !fx_preset_name_list[$cur_selection]
		
	if($mixer_preset_menu < $FACTORY_PRESETS)
		$preset_helper := $mixer_preset_menu
		
		$count := 0
		while($count < 15)
			set_control_par(%volfader_id[$count],$CONTROL_PAR_VALUE,%fact_mixerpreset_vol[($preset_helper*15) + $count])
			if($count # 13)
				set_control_par(%send_id[$count],$CONTROL_PAR_VALUE,%fact_mixerpreset_sends[($preset_helper*15) + $count]) 
				set_control_par(%pan_id[$count],$CONTROL_PAR_VALUE,%fact_mixerpreset_pan[($preset_helper*15) + $count]) 
				$count2 := 0
				while($count2 < 13)
					%eq_data[($count*13) + $count2] := %fact_mixerpreset_eq[($preset_helper*15*13) + ($count*13) + $count2]
					wait($LOAD_WAIT)
					inc($count2)
				end while
				$count2 := 0
				while($count2 < 4)
					%trans_data[($count*4) + $count2] := %fact_mixerpreset_trans[($preset_helper*15*4) + ($count*4) + $count2]
					wait($LOAD_WAIT)
					inc($count2)
				end while
				$count2 := 0
				while($count2 < 7)
					%comp_data[($count*7) + $count2] := %fact_mixerpreset_comp[($preset_helper*15*7) + ($count*7) + $count2]
					wait($LOAD_WAIT)
					inc($count2)
				end while
				$count2 := 0
				while($count2 < 4)
					%tape_data[($count*4) + $count2] := %fact_mixerpreset_tape[($preset_helper*15*4) + ($count*4) + $count2]
					wait($LOAD_WAIT)
					inc($count2)
				end while
				$count2 := 0
				while($count2 < 4)
					%onoff_arr[($count*4) + $count2] := %fact_mixerpreset_onoff[($preset_helper*15*4) + ($count*4) + $count2]
					wait($LOAD_WAIT)
					inc($count2)
				end while
				%routing_state[$count] := %fact_mixerpreset_settings[($preset_helper*15*4) + ($count*4) + 3]
			end if
			if($count # 14)
				set_control_par(%mute_id[$count],$CONTROL_PAR_VALUE,%fact_mixerpreset_mute[($preset_helper*15) + $count])
				set_control_par(%solo_id[$count],$CONTROL_PAR_VALUE,%fact_mixerpreset_solo[($preset_helper*15) + $count])
			else
				$lr_swap := %fact_mixerpreset_mute[($preset_helper*15) + 14]
			end if
			if($count < 2)
				$count2 := 0
				while($count2 < 3)
					set_control_par(%micbalance_id[($count*3) + $count2],$CONTROL_PAR_VALUE,%fact_mixerpreset_settings[($preset_helper*15*4) + ($count*4) + $count2])
					inc($count2)
					wait($LOAD_WAIT)
				end while
			end if
			wait($LOAD_WAIT)
			inc($count)
		end while
		$ir_category := %fact_mixerpreset_reverb[($preset_helper*2)]
		set_control_par(%reverb_controls[$ir_category],$CONTROL_PAR_VALUE,%fact_mixerpreset_reverb[($preset_helper*2) + 1])
	else
		$preset_helper := $mixer_preset_menu - $FACTORY_PRESETS - 1
		
		$count := 0
		while($count < 15)
			set_control_par(%volfader_id[$count],$CONTROL_PAR_VALUE,%vin_kit_A_mixerpreset_vol[($preset_helper*15) + $count])
			if($count # 13)
				set_control_par(%send_id[$count],$CONTROL_PAR_VALUE,%vin_kit_A_mixerpreset_sends[($preset_helper*15) + $count]) 
				set_control_par(%pan_id[$count],$CONTROL_PAR_VALUE,%vin_kit_A_mixerpreset_pan[($preset_helper*15) + $count]) 
				$count2 := 0
				while($count2 < 13)
					%eq_data[($count*13) + $count2] := %vin_kit_A_mixerpreset_eq[($preset_helper*15*13) + ($count*13) + $count2]
					wait($LOAD_WAIT)
					inc($count2)
				end while
				$count2 := 0
				while($count2 < 4)
					%trans_data[($count*4) + $count2] := %vin_kit_A_mixerpreset_trans[($preset_helper*15*4) + ($count*4) + $count2]
					wait($LOAD_WAIT)
					inc($count2)
				end while
				$count2 := 0
				while($count2 < 7)
					%comp_data[($count*7) + $count2] := %vin_kit_A_mixerpreset_comp[($preset_helper*15*7) + ($count*7) + $count2]
					wait($LOAD_WAIT)
					inc($count2)
				end while
				$count2 := 0
				while($count2 < 4)
					%tape_data[($count*4) + $count2] := %vin_kit_A_mixerpreset_tape[($preset_helper*15*4) + ($count*4) + $count2]
					wait($LOAD_WAIT)
					inc($count2)
				end while
				$count2 := 0
				while($count2 < 4)
					%onoff_arr[($count*4) + $count2] := %vin_kit_A_mixerpreset_onoff[($preset_helper*15*4) + ($count*4) + $count2]
					wait($LOAD_WAIT)
					inc($count2)
				end while
				%routing_state[$count] := %vin_kit_A_mixerpreset_settings[($preset_helper*15*4) + ($count*4) + 3]
			end if
			if($count # 14)
				set_control_par(%mute_id[$count],$CONTROL_PAR_VALUE,%vin_kit_A_mixerpreset_mute[($preset_helper*15) + $count])
				set_control_par(%solo_id[$count],$CONTROL_PAR_VALUE,%vin_kit_A_mixerpreset_solo[($preset_helper*15) + $count])
			else
				$lr_swap := %vin_kit_A_mixerpreset_mute[($preset_helper*15) + 14]
			end if
			if($count < 2)
				$count2 := 0
				while($count2 < 3)
					set_control_par(%micbalance_id[($count*3) + $count2],$CONTROL_PAR_VALUE,%vin_kit_A_mixerpreset_settings[($preset_helper*15*4) + ($count*4) + $count2])
					inc($count2)
					wait($LOAD_WAIT)
				end while
			end if
			wait($LOAD_WAIT)
			inc($count)
		end while
		$ir_category := %vin_kit_A_mixerpreset_reverb[($preset_helper*2)]
		set_control_par(%reverb_controls[$ir_category],$CONTROL_PAR_VALUE,%vin_kit_A_mixerpreset_reverb[($preset_helper*2) + 1])
	end if
		
	call reset_instrument
	
	fade_in($ALL_EVENTS,2500)
	
end function

function save_mixerpreset

	if($mixer_preset_menu < $FACTORY_PRESETS or $preset_change_flag = 1)
		$preset_helper := %vin_kit_A_mixer_userpresets[0]
		if($preset_helper  = $USER_PRESETS)
			message("OUT OF PRESET SLOTS")
			wait(1000000)
			message("")
			exit
		end if
		inc(%vin_kit_A_mixer_userpresets[0])
		!vin_kit_A_mixerpreset_names[$preset_helper] := @mixer_preset_name
		set_menu_item_str(%preset_controls[0],$preset_helper + $FACTORY_PRESETS + 1,!vin_kit_A_mixerpreset_names[$preset_helper])
		set_menu_item_visibility(%preset_controls[0],$preset_helper + $FACTORY_PRESETS + 1,1)
		$mixer_preset_menu := $preset_helper + $FACTORY_PRESETS + 1
	else
		$preset_helper := $mixer_preset_menu - $FACTORY_PRESETS - 1
	end if
	
	fade_out($ALL_EVENTS,5000,0)
	wait(5000)   
	
	$count := 0
	while($count < 15)
		%vin_kit_A_mixerpreset_vol[($preset_helper*15) + $count] := get_control_par(%volfader_id[$count],$CONTROL_PAR_VALUE)
		if($count # 13)
			%vin_kit_A_mixerpreset_sends[($preset_helper*15) + $count] := get_control_par(%send_id[$count],$CONTROL_PAR_VALUE) 
			%vin_kit_A_mixerpreset_pan[($preset_helper*15) + $count] := get_control_par(%pan_id[$count],$CONTROL_PAR_VALUE) 
			$count2 := 0
			while($count2 < 13)
				%vin_kit_A_mixerpreset_eq[($preset_helper*15*13) + ($count*13) + $count2] := %eq_data[($count*13) + $count2]
				inc($count2)
				wait($LOAD_WAIT)
			end while
			$count2 := 0
			while($count2 < 4)
				%vin_kit_A_mixerpreset_trans[($preset_helper*15*4) + ($count*4) + $count2] := %trans_data[($count*4) + $count2]
				inc($count2)
				wait($LOAD_WAIT)
			end while
			$count2 := 0
			while($count2 < 7)
				%vin_kit_A_mixerpreset_comp[($preset_helper*15*7) + ($count*7) + $count2] := %comp_data[($count*7) + $count2]
				inc($count2)
				wait($LOAD_WAIT)
			end while
			$count2 := 0
			while($count2 < 4)
				%vin_kit_A_mixerpreset_tape[($preset_helper*15*4) + ($count*4) + $count2] := %tape_data[($count*4) + $count2]
				inc($count2)
				wait($LOAD_WAIT)
			end while
			$count2 := 0
			while($count2 < 4)
				%vin_kit_A_mixerpreset_onoff[($preset_helper*15*4) + ($count*4) + $count2] := %onoff_arr[($count*4) + $count2]
				inc($count2)
				wait($LOAD_WAIT)
			end while
			%vin_kit_A_mixerpreset_settings[($preset_helper*15*4) + ($count*4) + 3] := %routing_state[$count]
		end if
		if($count # 14)
			%vin_kit_A_mixerpreset_mute[($preset_helper*15) + $count] := get_control_par(%mute_id[$count],$CONTROL_PAR_VALUE)
			%vin_kit_A_mixerpreset_solo[($preset_helper*15) + $count] := get_control_par(%solo_id[$count],$CONTROL_PAR_VALUE)
		else
			%vin_kit_A_mixerpreset_mute[($preset_helper*15) + 14] := $lr_swap
		end if
		if($count < 2)
			$count2 := 0
			while($count2 < 3)
				%vin_kit_A_mixerpreset_settings[($preset_helper*15*4) + ($count*4) + $count2] := get_control_par(%micbalance_id[($count*3) + $count2],$CONTROL_PAR_VALUE)
				inc($count2)
				wait($LOAD_WAIT)
			end while
		end if
		inc($count)
		wait($LOAD_WAIT)
	end while
	%vin_kit_A_mixerpreset_reverb[($preset_helper*2)] := $ir_category
	%vin_kit_A_mixerpreset_reverb[($preset_helper*2) + 1] := get_control_par(%reverb_controls[$ir_category],$CONTROL_PAR_VALUE)
	
	$last_mixerpreset := $mixer_preset_menu
	
	fade_in($ALL_EVENTS,5000)
end function

{5.2 -- MIXER PRESETS - CALLBACKS}

on ui_control ($mixer_preset_menu)
	if($safety3 = 1)
		$safety3 := 0
		if($mixer_preset_menu = $FACTORY_PRESETS)
			$mixer_preset_menu := $last_mixerpreset
		else
			call load_mixerpreset
			$preset_change_flag := 0
			pgs_set_key_val(ACTION_TYPE,0, -1)
			pgs_set_key_val(MIXER_DATA, 0, 0)
			pgs_set_key_val(MIXER_DATA, 1, $mixer_preset_flag)
			pgs_set_key_val(MIXER_DATA, 2, $mixer_preset_menu)
			pgs_set_key_val(MIXER_DATA, 3, 0)
			pgs_set_key_val(MIXER_DATA, 4, 0)
			pgs_set_key_val(ACTION_TYPE,0, 1)
		end if
		$safety3 := 1
	else
		$mixer_preset_menu := $last_mixerpreset
	end if
end on

on ui_control ($mixer_preset_next)
	if($safety3 = 1)
		$safety3 := 0
		if($mixer_preset_menu = $FACTORY_PRESETS - 1 and %vin_kit_A_mixer_userpresets[0] = 0)
			$mixer_preset_menu := 0
		else
			if($mixer_preset_menu = $FACTORY_PRESETS + %vin_kit_A_mixer_userpresets[0])
				$mixer_preset_menu := 0
			else
				inc($mixer_preset_menu)
				if($mixer_preset_menu = $FACTORY_PRESETS)
					inc($mixer_preset_menu)
				end if
			end if
		end if
		call load_mixerpreset
		$preset_change_flag := 0
		pgs_set_key_val(ACTION_TYPE,0, -1)
		pgs_set_key_val(MIXER_DATA, 0, 0)
		pgs_set_key_val(MIXER_DATA, 1, $mixer_preset_flag)
		pgs_set_key_val(MIXER_DATA, 2, $mixer_preset_menu)
		pgs_set_key_val(MIXER_DATA, 3, 0)
		pgs_set_key_val(MIXER_DATA, 4, 0)
		pgs_set_key_val(ACTION_TYPE,0, 1)
		$safety3 := 1
	end if
end on

on ui_control ($mixer_preset_prev)
	if($safety3 = 1)
		$safety3 := 0
		if($mixer_preset_menu = 0)
			if(%vin_kit_A_mixer_userpresets[0] = 0)
				$mixer_preset_menu := $FACTORY_PRESETS - 1
			else
				$mixer_preset_menu := $FACTORY_PRESETS + %vin_kit_A_mixer_userpresets[0]
			end if
		else
			dec($mixer_preset_menu)
			if($mixer_preset_menu = $FACTORY_PRESETS)
				dec($mixer_preset_menu)
			end if
		end if
		call load_mixerpreset
		$preset_change_flag := 0
		pgs_set_key_val(ACTION_TYPE,0, -1)
		pgs_set_key_val(MIXER_DATA, 0, 0)
		pgs_set_key_val(MIXER_DATA, 1, $mixer_preset_flag)
		pgs_set_key_val(MIXER_DATA, 2, $mixer_preset_menu)
		pgs_set_key_val(MIXER_DATA, 3, 0)
		pgs_set_key_val(MIXER_DATA, 4, 0)
		pgs_set_key_val(ACTION_TYPE,0, 1)
		$safety3 := 1
	end if
end on

on ui_control (@mixer_preset_name)
	$preset_change_flag := 1
end on

on ui_control ($mixer_preset_save)
	if ($mixer_preset_save = 1)
		$mixer_preset_save := 0
		wait(150)
		$mixer_preset_save := 1
		wait(100)
		$mixer_preset_save := 0
	end if

	if($safety2 = 1)
		$safety2 := 0
		
		call save_mixerpreset
		
		%mixer_async_id[0] := save_array(%vin_kit_A_mixerpreset_sends,1)
		%mixer_async_id[1] := save_array(%vin_kit_A_mixerpreset_pan,1)
		%mixer_async_id[2] := save_array(%vin_kit_A_mixerpreset_solo,1)
		%mixer_async_id[3] := save_array(%vin_kit_A_mixerpreset_mute,1)
		%mixer_async_id[4] := save_array(%vin_kit_A_mixerpreset_vol,1)
		%mixer_async_id[5] := save_array(%vin_kit_A_mixerpreset_eq,1)
		%mixer_async_id[6] := save_array(%vin_kit_A_mixerpreset_trans,1)
		%mixer_async_id[7] := save_array(%vin_kit_A_mixerpreset_comp,1)
		%mixer_async_id[8] := save_array(%vin_kit_A_mixerpreset_tape,1)
		%mixer_async_id[9] := save_array(%vin_kit_A_mixerpreset_settings,1)
		%mixer_async_id[10] := save_array(%vin_kit_A_mixerpreset_onoff,1)
		%mixer_async_id[11] := save_array(%vin_kit_A_mixerpreset_reverb,1)
		%mixer_async_id[12] := save_array(%vin_kit_A_mixer_userpresets,1)
		%mixer_async_id[13] := save_array(!vin_kit_A_mixerpreset_names,1)
		
		$preset_change_flag := 0
		
		while(%mixer_async_id[0] # -1 or %mixer_async_id[1] # -1 or %mixer_async_id[2] # -1 or %mixer_async_id[3] # -1 or ...
				%mixer_async_id[4] # -1 or %mixer_async_id[5] # -1 or %mixer_async_id[6] # -1 or %mixer_async_id[7] # -1 or ...
					%mixer_async_id[8] # -1 or %mixer_async_id[9] # -1 or %mixer_async_id[10] # -1 or %mixer_async_id[11] # -1 or ...
						%mixer_async_id[12] # -1 or %mixer_async_id[13] # -1)
			wait(150)
		end while
		
		$mixer_preset_flag := 0
		
		if(%vin_kit_A_mixer_userpresets[0] # 0)
			set_menu_item_visibility(%preset_controls[0], $FACTORY_PRESETS, 1)	
		end if
		
		set_control_par_str(%preset_controls[4],$CONTROL_PAR_PICTURE,"NID_header_btn_delete")
		
		pgs_set_key_val(ACTION_TYPE,0, -1)
		pgs_set_key_val(MIXER_DATA, 0, 0)
		pgs_set_key_val(MIXER_DATA, 1, $mixer_preset_flag)
		pgs_set_key_val(MIXER_DATA, 2, $mixer_preset_menu)
		pgs_set_key_val(MIXER_DATA, 3, 0)
		pgs_set_key_val(MIXER_DATA, 4, 1)
		pgs_set_key_val(ACTION_TYPE,0, 1)
		
		$safety2 := 1
	end if
end on


on ui_control ($mixer_preset_delete)
	if ($mixer_preset_delete = 1)
		$mixer_preset_delete := 0
	end if

	if($mixer_preset_menu <= $FACTORY_PRESETS)
		exit
	else
		if($safety1 = 1)
			$safety1 := 0
			fade_out($ALL_EVENTS,5000,0)
			wait(5000)   
			if($mixer_preset_menu = $FACTORY_PRESETS + %vin_kit_A_mixer_userpresets[0])
				dec(%vin_kit_A_mixer_userpresets[0])
				if(%vin_kit_A_mixer_userpresets[0] = 0)
					set_menu_item_visibility(%preset_controls[0], $FACTORY_PRESETS, 0)
				end if
				%mixer_async_id[12] := save_array(%vin_kit_A_mixer_userpresets,1)
				set_menu_item_visibility(%preset_controls[0], $mixer_preset_menu, 0)
			else
				dec(%vin_kit_A_mixer_userpresets[0])
				if(%vin_kit_A_mixer_userpresets[0] = 0)
					set_menu_item_visibility(%preset_controls[0], $FACTORY_PRESETS, 0)
				end if
				
				$preset_helper := $mixer_preset_menu - $FACTORY_PRESETS - 1
				while($preset_helper < %vin_kit_A_mixer_userpresets[0])
					$count := 0
					while($count < 15)
						%vin_kit_A_mixerpreset_sends[($preset_helper*15) + $count] := %vin_kit_A_mixerpreset_sends[(($preset_helper+1)*15) + $count]
						%vin_kit_A_mixerpreset_pan[($preset_helper*15) + $count] := %vin_kit_A_mixerpreset_pan[(($preset_helper+1)*15) + $count]
						%vin_kit_A_mixerpreset_solo[($preset_helper*15) + $count] := %vin_kit_A_mixerpreset_solo[(($preset_helper+1)*15) + $count]
						%vin_kit_A_mixerpreset_mute[($preset_helper*15) + $count] := %vin_kit_A_mixerpreset_mute[(($preset_helper+1)*15) + $count]
						%vin_kit_A_mixerpreset_vol[($preset_helper*15) + $count] := %vin_kit_A_mixerpreset_vol[(($preset_helper+1)*15) + $count]
						$count2 := 0
						while($count2 < 13)
							%vin_kit_A_mixerpreset_eq[($preset_helper*15*13) + ($count*13) + $count2] := %vin_kit_A_mixerpreset_eq[(($preset_helper + 1)*15*13) + ($count*13) + $count2]
							inc($count2)
							wait($LOAD_WAIT)
						end while
						$count2 := 0
						while($count2 < 4)
							%vin_kit_A_mixerpreset_trans[($preset_helper*15*4) + ($count*4) + $count2] := %vin_kit_A_mixerpreset_trans[(($preset_helper + 1)*15*4) + ($count*4) + $count2]
							%vin_kit_A_mixerpreset_tape[($preset_helper*15*4) + ($count*4) + $count2] := %vin_kit_A_mixerpreset_tape[(($preset_helper + 1)*15*4) + ($count*4) + $count2]
							%vin_kit_A_mixerpreset_settings[($preset_helper*15*4) + ($count*4) + $count2] := %vin_kit_A_mixerpreset_settings[(($preset_helper + 1)*15*4) + ($count*4) + $count2]
							%vin_kit_A_mixerpreset_onoff[($preset_helper*15*4) + ($count*4) + $count2] := %vin_kit_A_mixerpreset_onoff[(($preset_helper + 1)*15*4) + ($count*4) + $count2]
							inc($count2)
							wait($LOAD_WAIT)
						end while
						$count2 := 0
						while($count2 < 7)
							%vin_kit_A_mixerpreset_comp[($preset_helper*15*7) + ($count*7) + $count2] := %vin_kit_A_mixerpreset_comp[(($preset_helper + 1)*15*7) + ($count*7) + $count2]
							inc($count2)
							wait($LOAD_WAIT)
						end while
						inc($count)
						wait($LOAD_WAIT)
					end while
					$count := 0
					while($count < 2)
						%vin_kit_A_mixerpreset_reverb[($preset_helper*2) + $count] := %vin_kit_A_mixerpreset_reverb[(($preset_helper+1)*2) + $count] 
						inc($count)
						wait($LOAD_WAIT)
					end while
					!vin_kit_A_mixerpreset_names[$preset_helper] := !vin_kit_A_mixerpreset_names[$preset_helper+1]
					set_menu_item_str(%preset_controls[0],$preset_helper + $FACTORY_PRESETS + 1, !vin_kit_A_mixerpreset_names[$preset_helper])
					inc($preset_helper)
					wait($LOAD_WAIT)
				end while
				%mixer_async_id[0] := save_array(%vin_kit_A_mixerpreset_sends,1)
				%mixer_async_id[1] := save_array(%vin_kit_A_mixerpreset_pan,1)
				%mixer_async_id[2] := save_array(%vin_kit_A_mixerpreset_solo,1)
				%mixer_async_id[3] := save_array(%vin_kit_A_mixerpreset_mute,1)
				%mixer_async_id[4] := save_array(%vin_kit_A_mixerpreset_vol,1)
				%mixer_async_id[5] := save_array(%vin_kit_A_mixerpreset_eq,1)
				%mixer_async_id[6] := save_array(%vin_kit_A_mixerpreset_trans,1)
				%mixer_async_id[7] := save_array(%vin_kit_A_mixerpreset_comp,1)
				%mixer_async_id[8] := save_array(%vin_kit_A_mixerpreset_tape,1)
				%mixer_async_id[9] := save_array(%vin_kit_A_mixerpreset_settings,1)
				%mixer_async_id[10] := save_array(%vin_kit_A_mixerpreset_onoff,1)
				%mixer_async_id[11] := save_array(%vin_kit_A_mixerpreset_reverb,1)
				%mixer_async_id[12] := save_array(%vin_kit_A_mixer_userpresets,1)
				%mixer_async_id[13] := save_array(!vin_kit_A_mixerpreset_names,1)
				while(%mixer_async_id[0] # -1 or %mixer_async_id[1] # -1 or %mixer_async_id[2] # -1 or %mixer_async_id[3] # -1 or ...
						%mixer_async_id[4] # -1 or %mixer_async_id[5] # -1 or %mixer_async_id[6] # -1 or %mixer_async_id[7] # -1 or ...
							%mixer_async_id[8] # -1 or %mixer_async_id[9] # -1 or %mixer_async_id[10] # -1 or %mixer_async_id[11] # -1 or ...
								%mixer_async_id[12] # -1 or %mixer_async_id[13] # -1)
					wait(150)
				end while
				set_menu_item_visibility(%preset_controls[0], $FACTORY_PRESETS + %vin_kit_A_mixer_userpresets[0] + 1, 0)
			end if
			$mixer_preset_flag := 1
			$mixer_preset_menu := 0
			@mixer_preset_name := @empty_preset_text
			pgs_set_key_val(ACTION_TYPE,0, -1)
			pgs_set_key_val(MIXER_DATA, 0, 0)
			pgs_set_key_val(MIXER_DATA, 1, $mixer_preset_flag)
			pgs_set_key_val(MIXER_DATA, 2, $mixer_preset_menu)
			pgs_set_key_val(MIXER_DATA, 3, 0)
			pgs_set_key_val(MIXER_DATA, 4, 1)
			pgs_set_key_val(ACTION_TYPE,0, 1)
			set_control_par_str(%preset_controls[4],$CONTROL_PAR_PICTURE,"NID_header_btn_delete-inactive")
			fade_in($ALL_EVENTS,5000)
			$safety1 := 1
		end if
	end if
end on

{6 -- GROOVE REMOTE}

on ui_control ($play)
	pgs_set_key_val(ACTION_TYPE, 0, -1)
	pgs_set_key_val(GROOVE_DATA, 0, $play)
	pgs_set_key_val(GROOVE_DATA, 1, 0)
	pgs_set_key_val(GROOVE_DATA, 2, 0)
	pgs_set_key_val(GROOVE_DATA, 3, 0)
	pgs_set_key_val(ACTION_TYPE, 0, 2)
	if ($play = 0)
		$n_counter := 0
		while ($n_counter < 127)
			set_key_pressed($n_counter, 0)
			note_off($ALL_EVENTS)
			wait(1000)   
			inc($n_counter)
		end while
	end if
end on

on ui_control ($prev_groove)
	pgs_set_key_val(ACTION_TYPE, 0, -1)
	pgs_set_key_val(GROOVE_DATA, 0, -1)
	pgs_set_key_val(GROOVE_DATA, 1, 1)
	pgs_set_key_val(GROOVE_DATA, 2, 0)
	pgs_set_key_val(ACTION_TYPE, 0, 2)
	$prev_groove := 0
end on

on ui_control ($next_groove)
	pgs_set_key_val(ACTION_TYPE, 0, -1)
	pgs_set_key_val(GROOVE_DATA, 0, -1)
	pgs_set_key_val(GROOVE_DATA, 1, 0)
	pgs_set_key_val(GROOVE_DATA, 2, 1)
	pgs_set_key_val(GROOVE_DATA, 3, 0)
	pgs_set_key_val(ACTION_TYPE, 0, 2)
	$next_groove := 0
end on
	
{7 -- GLOBAL: ASYNC & PGS}
{A-Sync}
on async_complete
	if ($NI_ASYNC_ID = $load_ir_id)
		$load_ir_id := -1
	end if
	if ($NI_ASYNC_ID = %mixer_async_id[0])
		%mixer_async_id[0] := -1
	end if
	if ($NI_ASYNC_ID = %mixer_async_id[1])
		%mixer_async_id[1] := -1
	end if
	if ($NI_ASYNC_ID = %mixer_async_id[2])
		%mixer_async_id[2] := -1
	end if
	if ($NI_ASYNC_ID = %mixer_async_id[3])
		%mixer_async_id[3] := -1
	end if
	if ($NI_ASYNC_ID = %mixer_async_id[4])
		%mixer_async_id[4] := -1
	end if
	if ($NI_ASYNC_ID = %mixer_async_id[5])
		%mixer_async_id[5] := -1
	end if
	if ($NI_ASYNC_ID = %mixer_async_id[6])
		%mixer_async_id[6] := -1
	end if
	if ($NI_ASYNC_ID = %mixer_async_id[7])
		%mixer_async_id[7] := -1
	end if
	if ($NI_ASYNC_ID = %mixer_async_id[8])
		%mixer_async_id[8] := -1
	end if
	if ($NI_ASYNC_ID = %mixer_async_id[9])
		%mixer_async_id[9] := -1
	end if
	if ($NI_ASYNC_ID = %mixer_async_id[10])
		%mixer_async_id[10] := -1
	end if
	if ($NI_ASYNC_ID = %mixer_async_id[11])
		%mixer_async_id[11] := -1
	end if
	if ($NI_ASYNC_ID = %mixer_async_id[12])
		%mixer_async_id[12] := -1
	end if
	if ($NI_ASYNC_ID = %mixer_async_id[13])
		%mixer_async_id[13] := -1
	end if
	if ($NI_ASYNC_ID = %check_id[0])
		if($NI_ASYNC_EXIT_STATUS # 1)
			while($init_flag = 1)
				wait(75)
			end while
			%kit_A_vin_num_kick_user_presets[0] := 0
			$count := $KICK_FX_PRESETS
			while($count < $KICK_FX_PRESETS + 1 + $USER_FX_PRESETS)
				set_menu_item_visibility(%fx_preset_id[0], $count, 0)
				inc($count)
			end while
			if(%fx_preset_save_array[0] > $KICK_FX_PRESETS)
				%fx_preset_save_array[0] := 0
				set_control_par(%fx_preset_id[0],$CONTROL_PAR_VALUE,%fx_preset_save_array[0])
			end if
			if($cur_selection = 0)
				@fx_preset_name := get_menu_item_str(%fx_preset_id[$cur_selection],%fx_preset_save_array[$cur_selection])
			end if
		end if
	end if
	if ($NI_ASYNC_ID = %check_id[1])
		if($NI_ASYNC_EXIT_STATUS # 1)
			while($init_flag = 1)
				wait(75)
			end while
			%kit_A_vin_num_snare_user_presets[0] := 0
			$count := $SNARE_FX_PRESETS
			while($count < $SNARE_FX_PRESETS + 1 + $USER_FX_PRESETS)
				set_menu_item_visibility(%fx_preset_id[1], $count, 0)
				inc($count)
			end while
			if(%fx_preset_save_array[1] > $SNARE_FX_PRESETS)
				%fx_preset_save_array[1] := 0
				set_control_par(%fx_preset_id[1],$CONTROL_PAR_VALUE,%fx_preset_save_array[1])
			end if
			if($cur_selection = 1)
				@fx_preset_name := get_menu_item_str(%fx_preset_id[$cur_selection],%fx_preset_save_array[$cur_selection])
			end if
		end if
	end if
	if ($NI_ASYNC_ID = %check_id[2])
		if($NI_ASYNC_EXIT_STATUS # 1)
			while($init_flag = 1)
				wait(75)
			end while
			%kit_A_vin_num_hihat_user_presets[0] := 0
			$count := $HIHAT_FX_PRESETS
			while($count < $HIHAT_FX_PRESETS + 1 + $USER_FX_PRESETS)
				set_menu_item_visibility(%fx_preset_id[2], $count, 0)
				inc($count)
			end while
			if(%fx_preset_save_array[2] > $HIHAT_FX_PRESETS)
				%fx_preset_save_array[2] := 0
				set_control_par(%fx_preset_id[2],$CONTROL_PAR_VALUE,%fx_preset_save_array[2])
			end if
			if($cur_selection = 2)
				@fx_preset_name := get_menu_item_str(%fx_preset_id[$cur_selection],%fx_preset_save_array[$cur_selection])
			end if
		end if
	end if
	if ($NI_ASYNC_ID = %check_id[3])
		if($NI_ASYNC_EXIT_STATUS # 1)
			while($init_flag = 1)
				wait(75)
			end while
			%kit_A_vin_num_tom_user_presets[0] := 0
			$count := $TOM_FX_PRESETS
			while($count < $TOM_FX_PRESETS + 1 + $USER_FX_PRESETS)
				set_menu_item_visibility(%fx_preset_id[3], $count, 0)
				inc($count)
			end while
			$count := 3
			while($count < 9)
				if(%generic_inst_id[$count - 3] < $PERC1_ID)
					if(%fx_preset_save_array[$count] > $TOM_FX_PRESETS)
						%fx_preset_save_array[$count] := 0
					end if
				end if
				inc($count)
			end while
			if(in_range($cur_selection,3,8))
				if(%generic_inst_id[$cur_selection - 3] < $PERC1_ID)
					set_control_par(%fx_preset_id[3],$CONTROL_PAR_VALUE,%fx_preset_save_array[$cur_selection])
					@fx_preset_name := get_menu_item_str(%fx_preset_id[$cur_selection],%fx_preset_save_array[$cur_selection])
				end if				
			end if
		end if
	end if
	if ($NI_ASYNC_ID = %check_id[4])
		if($NI_ASYNC_EXIT_STATUS # 1)
			while($init_flag = 1)
				wait(75)
			end while
			%kit_A_vin_num_perc_user_presets[0] := 0
			$count := $PERC_FX_PRESETS
			while($count < $PERC_FX_PRESETS + 1 + $USER_FX_PRESETS)
				set_menu_item_visibility(%fx_preset_id[4], $count, 0)
				inc($count)
			end while
			$count := 3
			while($count < 9)
				if(%generic_inst_id[$count - 3] >= $PERC1_ID)
					if(%fx_preset_save_array[$count] > $PERC_FX_PRESETS)
						%fx_preset_save_array[$count] := 0
					end if
				end if
				inc($count)
			end while
			if(in_range($cur_selection,3,8))
				if(%generic_inst_id[$cur_selection - 3] >= $PERC1_ID)
					set_control_par(%fx_preset_id[4],$CONTROL_PAR_VALUE,%fx_preset_save_array[$cur_selection])
					@fx_preset_name := get_menu_item_str(%fx_preset_id[4],%fx_preset_save_array[$cur_selection])
				end if				
			end if
		end if
	end if
	if ($NI_ASYNC_ID = %check_id[5])
		if($NI_ASYNC_EXIT_STATUS # 1)
			while($init_flag = 1)
				wait(75)
			end while
			%kit_A_vin_num_oh_user_presets[0] := 0
			$count := $OH_FX_PRESETS
			while($count < $OH_FX_PRESETS + 1 + $USER_FX_PRESETS)
				set_menu_item_visibility(%fx_preset_id[5], $count, 0)
				inc($count)
			end while
			$count := 9
			while($count < 13)
				if(%fx_preset_save_array[$count] > $OH_FX_PRESETS)
					%fx_preset_save_array[$count] := 0
				end if
				inc($count)
			end while
			if(in_range($cur_selection,9,12))
				set_control_par(%fx_preset_id[5],$CONTROL_PAR_VALUE,%fx_preset_save_array[$cur_selection])
				@fx_preset_name := get_menu_item_str(%fx_preset_id[5],%fx_preset_save_array[$cur_selection])
			end if
		end if
	end if
	if ($NI_ASYNC_ID = %check_id[6])
		if($NI_ASYNC_EXIT_STATUS # 1)
			while($init_flag = 1)
				wait(75)
			end while
			%kit_A_vin_num_master_user_presets[0] := 0
			$count := $MASTER_FX_PRESETS
			while($count < $MASTER_FX_PRESETS + 1 + $USER_FX_PRESETS)
				set_menu_item_visibility(%fx_preset_id[6], $count, 0)
				inc($count)
			end while
			if(%fx_preset_save_array[14] > $SNARE_FX_PRESETS)
				%fx_preset_save_array[14] := 0
				set_control_par(%fx_preset_id[6],$CONTROL_PAR_VALUE,%fx_preset_save_array[14])
			end if
			if($cur_selection = 14)
				@fx_preset_name := get_menu_item_str(%fx_preset_id[6],%fx_preset_save_array[$cur_selection])
			end if
		end if
	end if
	if ($NI_ASYNC_ID = %check_id[7])
		if($NI_ASYNC_EXIT_STATUS # 1)
			%vin_kit_A_mixer_userpresets[0] := 0
			$count := $FACTORY_PRESETS
			while($count < $FACTORY_PRESETS + 1 + $USER_PRESETS)
				set_menu_item_visibility(%preset_controls[0], $count, 0)
				inc($count)
			end while
			if($mixer_preset_menu > $FACTORY_PRESETS)
				$mixer_preset_menu := 0
				@mixer_preset_name := get_menu_item_str(%preset_controls[0],$mixer_preset_menu)
				$last_mixerpreset := $mixer_preset_menu
			end if
		end if
	end if
end on

on note
	if ($reset_flag = 1 or $rvb_reset_flag = 1)
		ignore_event($EVENT_ID)
	end if
end on

{PGS}

on pgs_changed
	select (pgs_get_key_val(ACTION_TYPE, 0))
		case 1
			if (pgs_get_key_val(MIXER_DATA, 1) # $mixer_preset_flag)
				$mixer_preset_flag := pgs_get_key_val(MIXER_DATA, 1)
			end if
			if (pgs_get_key_val(MIXER_DATA, 2) # -1)
				$mixer_preset_menu := pgs_get_key_val(MIXER_DATA, 2)
				$last_mixerpreset := $mixer_preset_menu
			end if
			if(pgs_get_key_val(MIXER_DATA, 0) = 1) {load}
				if($safety3 = 1)
					$safety3 := 0
					call load_mixerpreset
					$preset_change_flag := 0
					$safety3 := 1
				end if
			end if
		case 2
			if (pgs_get_key_val(GROOVE_DATA, 0) # -1)
				$play := pgs_get_key_val(GROOVE_DATA, 0)
			end if
			set_text($groove_display, pgs_get_str_key_val(GROOVE_NAME))
	end select
end on

on persistence_changed
	wait(1)   

	if($safety3 = 1)
		$safety3 := 0
		if($mixer_preset_menu = $FACTORY_PRESETS)
			$mixer_preset_menu := $last_mixerpreset
		else
			$preset_change_flag := 0
			pgs_set_key_val(ACTION_TYPE,0, -1)
			pgs_set_key_val(MIXER_DATA, 0, 0)
			pgs_set_key_val(MIXER_DATA, 1, $mixer_preset_flag)
			pgs_set_key_val(MIXER_DATA, 2, $mixer_preset_menu)
			pgs_set_key_val(MIXER_DATA, 3, 0)
			pgs_set_key_val(MIXER_DATA, 4, 0)
			pgs_set_key_val(ACTION_TYPE,0, 1)
		end if
		$safety3 := 1
	else
		$mixer_preset_menu := $last_mixerpreset
	end if

	if($mixer_preset_menu < $FACTORY_PRESETS)
		set_control_par_str(%preset_controls[4],$CONTROL_PAR_PICTURE,"NID_header_btn_delete-inactive")
	end if
	
	if($mixer_preset_flag = 0)
		@mixer_preset_name := get_menu_item_str(%preset_controls[0],$mixer_preset_menu)
	else
		@mixer_preset_name := @empty_preset_text
	end if

	set_menu_item_str(%preset_controls[0],$preset_helper + $FACTORY_PRESETS + 1,@mixer_preset_name)
	
	$count := 0
	while($count < 15)
		select($count)
			case 0 to 2
				!fx_preset_name_list[$count] := get_menu_item_str(%fx_preset_id[$count],%fx_preset_save_array[$count])
			case 3 to 8
				if(%generic_inst_id[$count - 3] < $PERC1_ID)
					!fx_preset_name_list[$count] := get_menu_item_str(%fx_preset_id[3],%fx_preset_save_array[$count])
				else
					!fx_preset_name_list[$count] := get_menu_item_str(%fx_preset_id[4],%fx_preset_save_array[$count])
				end if
			case 9 to 12
				!fx_preset_name_list[$count] := get_menu_item_str(%fx_preset_id[5],%fx_preset_save_array[$count])
			case 14
				!fx_preset_name_list[$count] := get_menu_item_str(%fx_preset_id[6],%fx_preset_save_array[$count])
		end select
		inc($count)
	end while
	
	@fx_preset_name := !fx_preset_name_list[$cur_selection]

	$preset_change_flag := 0
	pgs_set_key_val(ACTION_TYPE,0, -1)
	pgs_set_key_val(MIXER_DATA, 0, 0)
	pgs_set_key_val(MIXER_DATA, 1, $mixer_preset_flag)
	pgs_set_key_val(MIXER_DATA, 2, $mixer_preset_menu)
	pgs_set_key_val(MIXER_DATA, 3, 0)
	pgs_set_key_val(MIXER_DATA, 4, 0)
	pgs_set_key_val(ACTION_TYPE,0, 1)

	call displayfx

	$last_selection := $cur_selection
	call channelselect

	pgs_set_key_val(ACTION_TYPE,0,-1)
	$count := 0
	while ($count < 6)
		pgs_set_key_val(MICBALANCE_STATE, $count, %mic_balance_state[$count])	
		inc($count)
	end while

	pgs_set_key_val(ACTION_TYPE,0,-1)
	$count := 0
	while ($count < 13)
		pgs_set_key_val(CHANNEL_MUTE_STATE, $count, %mute_state[$count])
		inc($count)
	end while

	pgs_set_key_val(ACTION_TYPE,0,-1)
	$count := 0
	while ($count < 13)
		pgs_set_key_val(CHANNEL_PURGE_STATE, $count, %purge_state[$count])
		inc($count)
	end while

	$count := 0
	while($count < 13)
		set_engine_par($ENGINE_PAR_OUTPUT_CHANNEL,%channel_output[$count],-1,-1,$NI_BUS_OFFSET+$count)
		inc($count)
	end while

	$d_pointer := 0
	while($d_pointer < 15)
		$send_pointer := $d_pointer
		$pan_pointer := $d_pointer
		$mute_pointer := $d_pointer
		$solo_pointer := $d_pointer
		$vol_pointer := $d_pointer
		select($d_pointer)
			case 0 to 8

				{sendlevel}
				set_control_par_str(%send_id[$send_pointer],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_SENDLEVEL_0,-1,$SEND_SLOT,$NI_BUS_OFFSET+$send_pointer) & " dB")
				
				{channelpan}
				set_control_par_str(%pan_id[$pan_pointer],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_STEREO_PAN,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$pan_pointer))
				{channelvolume}
				set_control_par_str(%volfader_id[$vol_pointer],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$vol_pointer) & " dB")
			
			case 9 to 12

				{sendlevel}
				set_control_par_str(%send_id[$send_pointer],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_SENDLEVEL_0,-1,$SEND_SLOT,$NI_BUS_OFFSET+$send_pointer) & " dB")
				
				{channelpan}
				{kit mic}
				if(%oh_stereo[$pan_pointer - 9] # -1)
					if(%oh_stereo[$pan_pointer - 9] = 1)
						{width}
						set_control_par_str(%pan_id[$pan_pointer],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_STEREO,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$pan_pointer))
						if ( get_control_par(%pan_id[$pan_pointer],$CONTROL_PAR_VALUE) = 1000000 )
							set_control_par_str(%pan_id[$pan_pointer],$CONTROL_PAR_LABEL, "Stereo")
						end if
					else
						{pan}
						set_control_par_str(%pan_id[$pan_pointer],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_STEREO_PAN,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$pan_pointer))
					end if
				end if

				{channelvolume}
				set_control_par_str(%volfader_id[$vol_pointer],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,-1,$SPREAD_SLOT,$NI_BUS_OFFSET+$vol_pointer) & " dB")
			
			case 13

				{channelvolume}
				set_control_par_str(%volfader_id[$vol_pointer],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN,-1,$REVERB_SLOT,0) & " dB")
			
			case 14
				{sendlevel}
				set_control_par_str(%send_id[$send_pointer],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_SENDLEVEL_0,-1,$SEND_SLOT,1) & " dB")

				{channelpan}
				set_control_par_str(%pan_id[$pan_pointer],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_STEREO,-1,$SPREAD_SLOT,1))
				if ( get_control_par(%pan_id[$pan_pointer],$CONTROL_PAR_VALUE) = 1000000 )
					set_control_par_str(%pan_id[$pan_pointer],$CONTROL_PAR_LABEL, "Stereo")
				end if
				
				{channelvolume}
				set_control_par_str(%volfader_id[$vol_pointer],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,-1,$SPREAD_SLOT,1) & " dB")		
		
		end select
		
		inc($d_pointer)
	end while
	
end on
