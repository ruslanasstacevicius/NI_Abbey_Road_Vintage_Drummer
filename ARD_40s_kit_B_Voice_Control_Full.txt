{***********************************************
Abbey Road Vintage Drummer Kit B -Ivory-
Voice Control
Author: Native Instruments
Written by: Dinos Vallianatos, Thanos Kazakos
Modified: Nov 16th, 2012

Important Abbreviations:

dr1: direct 1 microphone
dr2: direct 2 microphone
dr3: direct 3 microphone
kt1: mono overhead
kt2: mono room
kt3: stereo overhead set
kt4: stereo room set
bld: bleed

key: MIDI note
grp: group, i.e. mute group

close: mute group for the dr1, dr2, dr3 & bld mics
far: mute group for the kt1, kt2, kt3 & kt4 mics
*************************************************}

on init
	message("")
	set_script_title("Voice Control")

	declare const $ZONE_LIMIT_LITE := 11000

	declare $played_note

	declare $event_cursor
	declare $temp
	declare $choke_flag
	declare $choke_time
	declare $choke_edge
	declare $message_time
	declare $cur_note
	declare $cur_velo
	declare $new_velo
	declare $count
	declare $x1
	declare $y1
	declare $x2
	declare $y2
	declare $b
	declare $articulation_offset

	{helper variables}
	declare $count_1
	declare $count_2
	declare $count_3
	declare $count_4
	declare $debug
	{/helper variables}

	{debug}
	declare ui_label $debug_monitor (1,16)
	set_text($debug_monitor,"")
	set_control_par(get_ui_id($debug_monitor),$CONTROL_PAR_WIDTH,240)
	set_control_par(get_ui_id($debug_monitor),$CONTROL_PAR_HEIGHT,208)
	set_control_par(get_ui_id($debug_monitor),$CONTROL_PAR_POS_X,345)
	set_control_par(get_ui_id($debug_monitor),$CONTROL_PAR_POS_Y,1)
	{/debug}

	{Velocity Curves
	--------------------------
	The number of the row is the Note Number,

	meaning of columns:
	#1: Point 1 Input Value
	#2: Point 1 Output Value
	#3: Point 2 Input Value
	#4: Point 2 Output Value
	#5: Point 3 Input Value
	#6: Point 4 Output Value

	to adjust the velocity curves, use the testing version of this script - latest v0.024}
	declare %note_curve[160 * 6] := (...
					   {X1   Y1   X2   Y2    X3   Y3}...
	{kick}		{0}		23,  32,  79,  78,  103,  95,...
				{1}		23,  32,  79,  78,  103,  95,...
				{2}		20,  32,  61,  64,  106,  96,...
				{3}		53,  32,  91,  64,  114,  96,...
	{Snare1}	{4}		37,  32,  75,  64,  107,  96,...
				{5}		53,  32,  91,  64,  114,  96,...
				{6}		53,  32,  91,  64,  114,  96,...
				{7}		29,  32,  65,  64,  100,  96,...
				{8}		53,  32,  91,  64,  114,  96,...
				{9}		53,  32,  91,  64,  114,  96,...
				{10}	53,  32, 110,  64,  120,  77,...
				{11}	50,  32,  86,  64,  111,  96,...
				{12}	53,  32,  91,  64,  114,  96,...
				{13}	53,  32,  91,  64,  114,  96,...
				{14}	53,  32,  91,  64,  114,  96,...
				{15}	53,  32,  91,  64,  114,  96,...
				{16}	53,  32,  91,  64,  114,  96,...
				{17}	37,  32,  78,  64,  106,  96,...
				{18}	53,  32,  91,  64,  114,  96,...
				{19}	53,  32,  91,  64,  114,  96,...
	{HiHat}		{20}	53,  32,  91,  64,  114,  96,...
				{21}	53,  32,  91,  64,  114,  96,...
				{22}	53,  32,  91,  64,  114,  96,...
				{23}	53,  32,  91,  64,  114,  96,...
				{24}	53,  32,  91,  64,  114,  96,...
				{25}	53,  32,  91,  64,  114,  96,...
				{26}	53,  32,  91,  64,  114,  96,...
				{27}	53,  32,  91,  64,  114,  96,...
				{28}	53,  32,  91,  64,  114,  96,...
				{29}	53,  32,  91,  64,  114,  96,...
				{30}	53,  32,  91,  64,  114,  96,...
				{31}	53,  32,  91,  64,  122,  96,...
				{32}	53,  32,  91,  64,  114,  96,...
				{33}	53,  30,  82,  56,  109,  96,...
				{34}	53,  30,  91,  56,  114,  96,...
				{35}	53,  32,  91,  64,  114,  96,...
				{36}	53,  32,  91,  64,  114,  96,...
				{37}	53,  32,  91,  64,  114,  96,...
				{38}	53,  32,  91,  64,  114,  96,...
				{39}	53,  32,  91,  64,  114,  96,...
	{Tom 1}		{40}	53,  32,  95,  64,  117,  94,...
				{41}	53,  32,  91,  64,  114,  96,...
				{42}	53,  32,  91,  64,  114,  96,...
				{43}	53,  32,  91,  64,  114,  96,...
				{44}	53,  32,  91,  64,  114,  96,...
				{45}	53,  32,  91,  64,  114,  96,...
				{46}	62,  32,  98,  64,  116,  96,...
	{Tom 2}		{47}	53,  32,  96,  64,  113,  88,...
				{48}	53,  32,  91,  64,  114,  96,...
				{49}	53,  37,  91,  53,  114,  85,...
				{50}	32,  11,  91,  64,  114,  84,...
				{51}	53,  32,  91,  64,  114,  96,...
				{52}	53,  32,  91,  64,  114,  96,...
				{53}	44,  32,  91,  64,  114,  96,...
	{Tom 3}		{54}	53,  32,  91,  64,  114,  96,...
				{55}	53,  32,  91,  64,  114,  96,...
				{56}	53,  32,  91,  64,  114,  96,...
				{57}	53,  32,  94,  64,  117,  96,...
				{58}	53,  32,  94,  64,  117,  96,...
				{59}	53,  32,  94,  64,  117,  96,...
				{60}	53,  32,  96,  64,  115,  96,...
	{Tom 4}		{61}	53,  32,  91,  64,  114,  96,...
				{62}	53,  32,  91,  64,  114,  96,...
				{63}	53,  32,  91,  64,  114,  96,...
				{64}	53,  32,  91,  64,  114,  96,...
				{65}	53,  32,  91,  64,  114,  96,...
				{66}	53,  32,  91,  64,  114,  96,...
				{67}	53,  32,  91,  64,  114,  96,...
	{Tom 5}		{68}	53,  32,  91,  64,  114,  96,...
				{69}	53,  32,  91,  64,  114,  96,...
				{70}	53,  32,  91,  64,  114,  96,...
				{71}	56,  32,  81,  64,  111,  96,...
				{72}	52,  32,  86,  64,  111,  96,...
				{73}	49,  32,  83,  64,  106,  96,...
				{74}	32,  32,  64,  64,  96,   96,...
	{Cymbal 1}	{75}	47,  32,  88,  64,  112,  96,...
				{76}	47,  32,  82,  64,  109,  96,...
				{77}	54,  32,  87,  64,  111,  96,...
				{78}	32,  47,  82,  64,  109,  96,...
				{79}	48,  32,  83,  64,  113,  96,...
	{Cymbal 2}	{80}	48,  32,  80,  64,  106,  96,...
				{81}	48,  32,  86,  64,  112,  96,...
				{82}	32,  32,  64,  64,  96,   96,...
				{83}	48,  32,  86,  64,  112,  96,...
				{84}	47,  32,  82,  64,  109,  96,...
	{Cymbal 3}	{85}	53,  32,  91,  64,  114,  96,...
				{86}	32,  32,  64,  64,  96,   96,...
				{87}	60,  32,  92,  64,  114,  96,...
				{88}	53,  32,  91,  64,  114,  96,...
				{89}	53,  32,  91,  64,  114,  96,...
				{90}	32,  32,  64,  64,  96,   96,...
	{Cymbal 4}	{91}	53,  32,  91,  64,  114,  96,...
				{92}	53,  32,  91,  64,  114,  96,...
				{93}	53,  32,  91,  64,  114,  96,...
				{94}	53,  32,  91,  64,  114,  96,...
	{Cymbal 5}	{95}	53,  32,  91,  64,  114,  96,...
				{96}	53,  32,  91,  64,  114,  96,...
				{97}	53,  32,  91,  64,  114,  96,...
				{98}	53,  32,  91,  64,  114,  96,...
	{Cymbal 6}	{99}	53,  32,  91,  64,  114,  96,...
				{100}	71,  32,  99,  64,  118,  96,...
				{101}	71,  32,  99,  64,  118,  96,...
				{102}	32,  32,  64,  64,  96,   96,...
	{Cymbal 7}	{103}	32,  32,  64,  64,  96,   96,...
				{104}	53,  32,  91,  64,  114,  96,...
				{105}	53,  32,  91,  64,  114,  96,...
				{106}	53,  32,  91,  64,  114,  96,...
	{Perc 1}	{107}	53,  32,  91,  64,  114,  96,...
	{Perc 2}	{108}	53,  32,  91,  64,  114,  96,...
				{109}	53,  32,  91,  64,  114,  96,...
	{Perc 3}	{110}	53,  32,  91,  64,  114,  96,...
				{111}	53,  32,  91,  64,  114,  96,...
	{Perc 4}	{112}	53,  32,  91,  64,  114,  96,...
				{113}	53,  32,  91,  64,  114,  96,...
				{114}	53,  32,  91,  64,  114,  96,...
				{115}	53,  32,  91,  64,  114,  96,...
	{Perc 5}	{116}	53,  32,  91,  64,  114,  96,...
				{117}	32,  32,  64,  64,  96,   96,...
				{118}	32,  32,  64,  64,  96,   96,...
				{119}	43,  32,  77,  64,  107,  96,...
				{120}	32,  32,  64,  64,  96,   96,...
				{121}	53,  32,  91,  64,  114,  96,...
				{122}	53,  32,  91,  64,  114,  96,...
				{123}	53,  32,  91,  64,  114,  96,...
				{124}	53,  32,  91,  64,  114,  96,...
				{125}	53,  32,  91,  64,  114,  96,...
				{126}	53,  32,  91,  64,  114,  96,...
				{127}	53,  32,  91,  64,  114,  96,...
	{SNARE 2}	{128}	37,  32,  75,  64,  107,  96,...
				{129}	53,  32,  91,  64,  114,  96,...
				{130}	53,  32,  91,  64,  114,  96,...
				{131}	29,  32,  65,  64,  100,  96,...
				{132}	53,  32,  91,  64,  114,  96,...
				{133}	53,  32,  91,  64,  114,  96,...
				{134}	53,  32, 110,  64,  120,  77,...
				{135}	50,  32,  86,  64,  111,  96,...
				{136}	53,  32,  91,  64,  114,  96,...
				{137}	53,  32,  91,  64,  114,  96,...
				{138}	53,  32,  91,  64,  114,  96,...
				{139}	53,  32,  91,  64,  114,  96,...
				{140}	53,  32,  91,  64,  114,  96,...
				{141}	37,  32,  78,  64,  106,  96,...
				{142}	53,  32,  91,  64,  114,  96,...
				{143}	53,  32,  91,  64,  114,  96,...
	{SNARE 3}	{144}	37,  32,  75,  64,  107,  96,...
				{145}	53,  32,  91,  64,  114,  96,...
				{146}	53,  32,  91,  64,  114,  96,...
				{147}	29,  32,  65,  64,  100,  96,...
				{148}	53,  32,  91,  64,  114,  96,...
				{149}	53,  32,  91,  64,  114,  96,...
				{150}	53,  32, 110,  64,  120,  77,...
				{151}	50,  32,  86,  64,  111,  96,...
				{152}	53,  32,  91,  64,  114,  96,...
				{153}	53,  32,  91,  64,  114,  96,...
				{154}	53,  32,  91,  64,  114,  96,...
				{155}	53,  32,  91,  64,  114,  96,...
				{156}	53,  32,  91,  64,  114,  96,...
				{157}	37,  32,  78,  64,  106,  96,...
				{158}	53,  32,  91,  64,  114,  96,...
				{159}	53,  32,  91,  64,  114,  96)
	{/Velocity Curves}

	{!!!START TESTING PART1!!!}
		set_ui_height_px(250)

		declare ui_knob $point_1_in (1, 127, 1)
		declare ui_knob $point_1_out (1, 127, 1)
		declare ui_knob $point_2_in (1, 127, 1)
		declare ui_knob $point_2_out (1, 127, 1)
		declare ui_knob $point_3_in (1, 127, 1)
		declare ui_knob $point_3_out (1, 127, 1)

		set_text($point_1_in, "X 1")
		set_text($point_1_out, "Y 1")
		set_text($point_2_in, "X 2")
		set_text($point_2_out, "Y 2")
		set_text($point_3_in, "X 3")
		set_text($point_3_out, "Y 3")

		move_control_px($point_1_in, 70, 72)
		move_control_px($point_1_out, 70, 31)
		move_control_px($point_2_in, 161, 72)
		move_control_px($point_2_out, 161, 31)
		move_control_px($point_3_in, 253, 72)
		move_control_px($point_3_out, 253, 31)

		declare ui_switch $Reset
		move_control_px($Reset, 161, 215)

		declare ui_table %table[128] (1,3,127)
		set_control_par(get_ui_id(%table), $CONTROL_PAR_WIDTH, 271)
		set_control_par(get_ui_id(%table), $CONTROL_PAR_HEIGHT, 96)
		move_control_px(%table, 70, 113)

		declare ui_value_edit $note (0, 127, $VALUE_EDIT_MODE_NOTE_NAMES)
		move_control_px($note, 70, 215)

		{make_persistent(%note_curve)}

		declare %sd_controls_ui_id[9]
		%sd_controls_ui_id[0] := get_ui_id($point_1_in)
		%sd_controls_ui_id[1] := get_ui_id($point_1_out)
		%sd_controls_ui_id[2] := get_ui_id($point_2_in)
		%sd_controls_ui_id[3] := get_ui_id($point_2_out)
		%sd_controls_ui_id[4] := get_ui_id($point_3_in)
		%sd_controls_ui_id[5] := get_ui_id($point_3_out)
		%sd_controls_ui_id[6] := get_ui_id($Reset)
		%sd_controls_ui_id[7] := get_ui_id(%table)
		%sd_controls_ui_id[8] := get_ui_id($note)

		{$count_1 := 0
		while ($count_1 < 9)
			set_control_par(%sd_controls_ui_id[$count_1], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			inc($count_1)
		end while}
	{!!!END TESTING PART1!!!}


	{shared across Options, Kit & Voice Control scripts}
	declare const $NUM_INSTRUMENTS := 20
	declare const $MAX_NUM_TOTAL_ART := 126

	declare const $KICK_ID := 0
	declare const $SNARE_ID := 1
	declare const $HH_ID := 2
	declare const $TOM1_ID := 3
	declare const $TOM2_ID := 4
	declare const $TOM3_ID := 5
	declare const $TOM4_ID := 6
	declare const $TOM5_ID := 7
	declare const $CYMB1_ID := 8
	declare const $CYMB2_ID := 9
	declare const $CYMB3_ID := 10
	declare const $CYMB4_ID := 11
	declare const $CYMB5_ID := 12
	declare const $CYMB6_ID := 13
	declare const $CYMB7_ID := 14
	declare const $PERC1_ID := 15
	declare const $PERC2_ID := 16
	declare const $PERC3_ID := 17
	declare const $PERC4_ID := 18
	declare const $PERC5_ID := 19
	declare const $END_ID := 20

	declare !INSTRUMENT_NAMES[20]
	!INSTRUMENT_NAMES[$KICK_ID]  := "KICK"
	!INSTRUMENT_NAMES[$SNARE_ID] := "SNARE"
	!INSTRUMENT_NAMES[$HH_ID]    := "HIHAT"
	!INSTRUMENT_NAMES[$TOM1_ID]  := "TOM 1"
	!INSTRUMENT_NAMES[$TOM2_ID]  := "TOM 2"
	!INSTRUMENT_NAMES[$TOM3_ID]  := ""
	!INSTRUMENT_NAMES[$TOM4_ID]  := ""
	!INSTRUMENT_NAMES[$TOM5_ID]  := ""
	!INSTRUMENT_NAMES[$CYMB1_ID] := "CRASH 1"
	!INSTRUMENT_NAMES[$CYMB2_ID] := "CRASH 2"
	!INSTRUMENT_NAMES[$CYMB3_ID] := "RIDE"
	!INSTRUMENT_NAMES[$CYMB4_ID] := ""
	!INSTRUMENT_NAMES[$CYMB5_ID] := ""
	!INSTRUMENT_NAMES[$CYMB6_ID] := ""
	!INSTRUMENT_NAMES[$CYMB7_ID] := ""
	!INSTRUMENT_NAMES[$PERC1_ID] := "STICKS"
	!INSTRUMENT_NAMES[$PERC2_ID] := "FINGER"
	!INSTRUMENT_NAMES[$PERC3_ID] := "TAMBOURINE"
	!INSTRUMENT_NAMES[$PERC4_ID] := "WOODBLOCK"
	!INSTRUMENT_NAMES[$PERC5_ID] := "SPOONS"

	{constants that are to be set per kit}
	declare %KEY_USED[128] := (1)			{which notes are used for this kit: 0 -> note is not used
																			    1 -> note is used}
	%KEY_USED[3] := 0
	%KEY_USED[54] := 0
	%KEY_USED[55] := 0
	%KEY_USED[56] := 0
	%KEY_USED[57] := 0
	%KEY_USED[58] := 0
	%KEY_USED[59] := 0
	%KEY_USED[60] := 0
	%KEY_USED[61] := 0
	%KEY_USED[62] := 0
	%KEY_USED[63] := 0
	%KEY_USED[64] := 0
	%KEY_USED[65] := 0
	%KEY_USED[66] := 0
	%KEY_USED[67] := 0
	%KEY_USED[68] := 0
	%KEY_USED[69] := 0
	%KEY_USED[70] := 0
	%KEY_USED[71] := 0
	%KEY_USED[72] := 0
	%KEY_USED[73] := 0
	%KEY_USED[74] := 0
	%KEY_USED[91] := 0
	%KEY_USED[92] := 0
	%KEY_USED[93] := 0
	%KEY_USED[94] := 0
	%KEY_USED[95] := 0
	%KEY_USED[96] := 0
	%KEY_USED[97] := 0
	%KEY_USED[98] := 0
	%KEY_USED[99] := 0
	%KEY_USED[100] := 0
	%KEY_USED[101] := 0
	%KEY_USED[102] := 0
	%KEY_USED[103] := 0
	%KEY_USED[104] := 0
	%KEY_USED[105] := 0
	%KEY_USED[106] := 0
	%KEY_USED[114] := 0
	%KEY_USED[115] := 0
	%KEY_USED[118] := 0
	%KEY_USED[119] := 0
	%KEY_USED[120] := 0
	%KEY_USED[121] := 0
	%KEY_USED[122] := 0
	%KEY_USED[123] := 0
	%KEY_USED[124] := 0
	%KEY_USED[125] := 0
	%KEY_USED[126] := 0
	%KEY_USED[127] := 0

    {max value}
	declare const $NUM_KIT_MICS := 4			{4}
	declare const $NUM_SNARE_INSTRUMENTS := 3	{3}

	declare %NUM_DIR_MICS[$NUM_INSTRUMENTS]
	%NUM_DIR_MICS[$KICK_ID]  :=  3				{3}
	%NUM_DIR_MICS[$SNARE_ID] :=  2				{2}
	%NUM_DIR_MICS[$HH_ID]    :=  1				{1}
	%NUM_DIR_MICS[$TOM1_ID]  :=  1				{1}
	%NUM_DIR_MICS[$TOM2_ID]  :=  1				{1}
	%NUM_DIR_MICS[$TOM3_ID]  := -1				{1}
	%NUM_DIR_MICS[$TOM4_ID]  := -1				{1}
	%NUM_DIR_MICS[$TOM5_ID]  := -1				{1}
	%NUM_DIR_MICS[$CYMB1_ID] :=  0				{0}
	%NUM_DIR_MICS[$CYMB2_ID] :=  0				{0}
	%NUM_DIR_MICS[$CYMB3_ID] :=  0				{0}
	%NUM_DIR_MICS[$CYMB4_ID] := -1				{0}
	%NUM_DIR_MICS[$CYMB5_ID] := -1				{0}
	%NUM_DIR_MICS[$CYMB6_ID] := -1				{0}
	%NUM_DIR_MICS[$CYMB7_ID] := -1				{0}
	%NUM_DIR_MICS[$PERC1_ID] :=  0				{1}
	%NUM_DIR_MICS[$PERC2_ID] :=  1				{1}
	%NUM_DIR_MICS[$PERC3_ID] :=  1				{1}
	%NUM_DIR_MICS[$PERC4_ID] :=  1				{1}
	%NUM_DIR_MICS[$PERC5_ID] :=  0				{1}

	declare %NUM_ART[$NUM_INSTRUMENTS]
	%NUM_ART[$KICK_ID]  := 3					{4}
	%NUM_ART[$SNARE_ID] := 16					{15}
	%NUM_ART[$HH_ID]    := 20					{17}
	%NUM_ART[$TOM1_ID]  := 7					{6}
	%NUM_ART[$TOM2_ID]  := 7					{6}
	%NUM_ART[$TOM3_ID]  := 7					{6}
	%NUM_ART[$TOM4_ID]  := 0					{6}
	%NUM_ART[$TOM5_ID]  := 0					{6}
	%NUM_ART[$CYMB1_ID] := 5					{4}
	%NUM_ART[$CYMB2_ID] := 5					{4}
	%NUM_ART[$CYMB3_ID] := 6					{4}
	%NUM_ART[$CYMB4_ID] := 0					{4}
	%NUM_ART[$CYMB5_ID] := 0					{4}
	%NUM_ART[$CYMB6_ID] := 0					{4}
	%NUM_ART[$CYMB7_ID] := 0					{4}
	%NUM_ART[$PERC1_ID] := 1					{3}
	%NUM_ART[$PERC2_ID] := 2					{3}
	%NUM_ART[$PERC3_ID] := 2					{3}
	%NUM_ART[$PERC4_ID] := 2					{3}		{}
	%NUM_ART[$PERC5_ID] := 1					{3}
	{/constants that are to be set per kit}

	{the MIDI note the first articulation each one of the instruments is mapped to - according to the technical mapping}
	declare %INSTRUMENT_OFFSET[$NUM_INSTRUMENTS + 1] := (-1)
	%INSTRUMENT_OFFSET[$KICK_ID]  := 0
	%INSTRUMENT_OFFSET[$SNARE_ID] := 4
	%INSTRUMENT_OFFSET[$HH_ID]    := 20
	%INSTRUMENT_OFFSET[$TOM1_ID]  := 40
	%INSTRUMENT_OFFSET[$TOM2_ID]  := 47
	%INSTRUMENT_OFFSET[$TOM3_ID]  := 54
	%INSTRUMENT_OFFSET[$TOM4_ID]  := 61
	%INSTRUMENT_OFFSET[$TOM5_ID]  := 68
	%INSTRUMENT_OFFSET[$CYMB1_ID] := 75
	%INSTRUMENT_OFFSET[$CYMB2_ID] := 80
	%INSTRUMENT_OFFSET[$CYMB3_ID] := 85
	%INSTRUMENT_OFFSET[$CYMB4_ID] := 91
	%INSTRUMENT_OFFSET[$CYMB5_ID] := 95
	%INSTRUMENT_OFFSET[$CYMB6_ID] := 99
	%INSTRUMENT_OFFSET[$CYMB7_ID] := 103
	%INSTRUMENT_OFFSET[$PERC1_ID] := 107

	{constants that are to be set per kit}
	%INSTRUMENT_OFFSET[$PERC2_ID] := 108
	%INSTRUMENT_OFFSET[$PERC3_ID] := 110
	%INSTRUMENT_OFFSET[$PERC4_ID] := 112
	%INSTRUMENT_OFFSET[$PERC5_ID] := 116
	%INSTRUMENT_OFFSET[$END_ID] := 125
	{/constants that are to be set per kit}

	{Group Lists per Articulation
	-----------------------------
	The number of the row is the note number the articulation is assigned to (refer to the technical mapping document).

	meaning of columns:
	#1: Group index of the 1st Direct mic of the articulation
	#2: Group index of the 2nd Direct mic of the articulation
	#3: Group index of the 3rd Direct mic of the articulation
	#4: Group index of the Snare Bleed of the articulation
	#5: Group index of the 1st Kit mic of the articulation
	#6: Group index of the 2nd Kit mic of the articulation
	#7: Group index of the 3rd Kit mic of the articulation
	#8: Group index of the 4th Kit mic of the articulation

	Note: 	If a certain mic type is not available (eg, Snare Bleed for the snare hits),
			-1 is going	to be used in the respective column.}

	declare %GROUP_DATA[$MAX_NUM_TOTAL_ART * 8] := (...
			{KICK}		{0}	   	0, 10, 14, 15, 18, 33, 48, 63,...
						{1}	   	0, 10, 14, 15, 18, 33, 48, 63,...
						{2}	    0, 10, 14, 15, 18, 33, 48, 63,...
						{3}	   -1, -1, -1, -1, -1, -1, -1, -1,...
			{SNARE 1}	{4}		1, 11, -1, -1, 19, 34, 49, 64,...
						{5}		1, 11, -1, -1, 19, 34, 49, 64,...
						{6}		1, 11, -1, -1, 19, 34, 49, 64,...
						{7}		1, 11, -1, -1, 19, 34, 49, 64,...
						{8}		1, 11, -1, -1, 19, 34, 49, 64,...
						{9}		1, 11, -1, -1, 19, 34, 49, 64,...
						{10}	1, 11, -1, -1, 19, 34, 49, 64,...
						{11}	1, 11, -1, -1, 19, 34, 49, 64,...
						{12}	1, 11, -1, -1, 19, 34, 49, 64,...
						{13}	1, 11, -1, -1, 19, 34, 49, 64,...
						{14}	1, 11, -1, -1, 19, 34, 49, 64,...
						{15}	1, 11, -1, -1, 19, 34, 49, 64,...
						{16}    1, 11, -1, -1, 19, 34, 49, 64,...
						{17}    1, 11, -1, -1, 19, 34, 49, 64,...
						{18}    1, 11, -1, -1, 19, 34, 49, 64,...
						{19}	1, 11, -1, -1, 19, 34, 49, 64,...
			{HI-HAT}	{20}	4, -1, -1, -1, 22, 37, 52, 67,...
						{21}	4, -1, -1, -1, 22, 37, 52, 67,...
						{22}	4, -1, -1, -1, 22, 37, 52, 67,...
						{23}	4, -1, -1, -1, 22, 37, 52, 67,...
						{24}	4, -1, -1, -1, 22, 37, 52, 67,...
						{25}	4, -1, -1, -1, 22, 37, 52, 67,...
						{26}	4, -1, -1, -1, 22, 37, 52, 67,...
						{17}	4, -1, -1, -1, 22, 37, 52, 67,...
						{28}	4, -1, -1, -1, 22, 37, 52, 67,...
						{29}	4, -1, -1, -1, 22, 37, 52, 67,...
						{30}	4, -1, -1, -1, 22, 37, 52, 67,...
						{31}	4, -1, -1, -1, 22, 37, 52, 67,...
						{32}	4, -1, -1, -1, 22, 37, 52, 67,...
						{33}	4, -1, -1, -1, 22, 37, 52, 67,...
						{34}	4, -1, -1, -1, 22, 37, 52, 67,...
						{35}	4, -1, -1, -1, 22, 37, 52, 67,...
						{36}	4, -1, -1, -1, 22, 37, 52, 67,...
						{37}	4, -1, -1, -1, 22, 37, 52, 67,...
						{38}	4, -1, -1, -1, 22, 37, 52, 67,...
						{39}	4, -1, -1, -1, 22, 37, 52, 67,...
			{TOM 1}		{40}	5, -1, -1, 16, 23, 38, 53, 68,...
						{41}    5, -1, -1, 16, 23, 38, 53, 68,...
						{42}    5, -1, -1, 16, 23, 38, 53, 68,...
						{43}	5, -1, -1, 16, 23, 38, 53, 68,...
						{44}	5, -1, -1, 16, 23, 38, 53, 68,...
						{45}	5, -1, -1, 16, 23, 38, 53, 68,...
						{46}	5, -1, -1, 16, 23, 38, 53, 68,...
			{TOM 2}		{47}	6, -1, -1, 17, 24, 39, 54, 69,...
						{48}    6, -1, -1, 17, 24, 39, 54, 69,...
						{49}    6, -1, -1, 17, 24, 39, 54, 69,...
						{50}    6, -1, -1, 17, 24, 39, 54, 69,...
						{51}    6, -1, -1, 17, 24, 39, 54, 69,...
						{52}    6, -1, -1, 17, 24, 39, 54, 69,...
						{53}    6, -1, -1, 17, 24, 39, 54, 69,...
			{TOM 3}		{54}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{55}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{56}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{57}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{58}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{59}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{60}   -1, -1, -1, -1, -1, -1, -1, -1,...
			{TOM 4}		{61}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{62}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{63}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{64}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{65}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{66}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{67}   -1, -1, -1, -1, -1, -1, -1, -1,...
			{TOM 5}		{68}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{69}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{70}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{71}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{72}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{73}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{74}   -1, -1, -1, -1, -1, -1, -1, -1,...
			{CYMBAL 1}	{75}   -1, -1, -1, -1, 25, 40, 55, 70,...
						{76}   -1, -1, -1, -1, 25, 40, 55, 70,...
						{77}   -1, -1, -1, -1, 25, 40, 55, 70,...
						{78}   -1, -1, -1, -1, 25, 40, 55, 70,...
						{79}   -1, -1, -1, -1, 25, 40, 55, 70,...
			{CYMBAL 2}	{80}   -1, -1, -1, -1, 26, 41, 56, 71,...
						{81}   -1, -1, -1, -1, 26, 41, 56, 71,...
						{82}   -1, -1, -1, -1, 26, 41, 56, 71,...
						{83}   -1, -1, -1, -1, 26, 41, 56, 71,...
						{84}   -1, -1, -1, -1, 26, 41, 56, 71,...
			{CYMBAL 3}	{85}   -1, -1, -1, -1, 27, 42, 57, 72,...
						{86}   -1, -1, -1, -1, 27, 42, 57, 72,...
						{87}   -1, -1, -1, -1, 27, 42, 57, 72,...
						{88}   -1, -1, -1, -1, 27, 42, 57, 72,...
						{89}   -1, -1, -1, -1, 27, 42, 57, 72,...
						{90}   -1, -1, -1, -1, 27, 42, 57, 72,...
			{CYMBAL 4}	{91}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{92}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{93}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{94}   -1, -1, -1, -1, -1, -1, -1, -1,...
			{CYMBAL 5}	{95}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{96}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{97}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{98}   -1, -1, -1, -1, -1, -1, -1, -1,...
			{CYMBAL 6}	{99}   -1, -1, -1, -1, -1, -1, -1, -1,...
						{100}  -1, -1, -1, -1, -1, -1, -1, -1,...
						{101}  -1, -1, -1, -1, -1, -1, -1, -1,...
						{102}  -1, -1, -1, -1, -1, -1, -1, -1,...
			{CYMBAL 7}	{103}  -1, -1, -1, -1, -1, -1, -1, -1,...
						{104}  -1, -1, -1, -1, -1, -1, -1, -1,...
						{105}  -1, -1, -1, -1, -1, -1, -1, -1,...
						{106}  -1, -1, -1, -1, -1, -1, -1, -1,...
			{PERC 1}	{107}  -1, -1, -1, -1, 28, 43, 58, 73,...
			{PERC 2}	{108}   7, -1, -1, -1, 29, 44, 59, 74,...
						{109}   7, -1, -1, -1, 29, 44, 59, 74,...
			{PERC 3}	{110}   8, -1, -1, -1, 30, 45, 60, 75,...
						{111}   8, -1, -1, -1, 30, 45, 60, 75,...
			{PERC 4}	{112}   9, -1, -1, -1, 31, 46, 61, 76,...
						{113}   9, -1, -1, -1, 31, 46, 61, 76,...
						{114}  -1, -1, -1, -1, -1, -1, -1, -1,...
						{115}  -1, -1, -1, -1, -1, -1, -1, -1,...
			{PERC 5}	{116}  -1, -1, -1, -1, 32, 47, 62, 77,...
						{117}  -1, -1, -1, -1, 32, 47, 62, 77,...
						{118}  -1, -1, -1, -1, -1, -1, -1, -1,...
						{119}  -1, -1, -1, -1, -1, -1, -1, -1,...
						{120}  -1, -1, -1, -1, -1, -1, -1, -1,...
						{121}  -1, -1, -1, -1, -1, -1, -1, -1,...
						{122}  -1, -1, -1, -1, -1, -1, -1, -1,...
						{123}  -1, -1, -1, -1, -1, -1, -1, -1,...
						{124}  -1, -1, -1, -1, -1, -1, -1, -1,...
						{125}  -1, -1, -1, -1, -1, -1, -1, -1)

	declare %SNARE_ROLL_SWISH_GROUPS[8] := (...
							   78, 81, -1, -1, 84, 87, 90, 93)


	{Mapping}
	declare %inverse_mapping_data[128]
	make_persistent(%inverse_mapping_data)


	{CHOKE KEYS - if these notes are played, all events of their associated group will be faded}
	declare const $CYMB1_CHOKE := 78
	declare const $CYMB2_CHOKE := 83
	declare const $CYMB3_CHOKE := 88
	declare const $CYMB4_CHOKE := 78
	declare const $CYMB5_CHOKE := 94
	declare const $CYMB6_CHOKE := 98
	declare const $CYMB7_CHOKE := 102

	{SNARE ROLL Release Rule - After a certain time do not play a note on release}
	declare const $SNARE_ROLL := 13
	declare const $SNARE_ROLL_RELEASE_TIME := 5000000

	declare $snare_roll_played_note

	declare const $SNARE_SWISH := 18

	{Instruments per note}
	declare %note_instruments[128] := (-1) {which key belongs to which instrument}
	$count_1 := 0
	$count_2 := 0
	while ($count_1 < %INSTRUMENT_OFFSET[$END_ID])
		if ($count_1 >= %INSTRUMENT_OFFSET[$count_2 + 1])
			inc($count_2)
		end if
		%note_instruments[$count_1] := $count_2
		inc($count_1)
	end while
	{/shared across Options, Kit & Voice Control scripts}

	declare const $OP_HH_ID := $NUM_INSTRUMENTS		{as the only instrument that should be separated in two voice groups is the hh,
													a new ID is introduced for this script}

	{special case for the open hihats}
	$count_1 := 30
	while ($count_1 < 38)
		%note_instruments[$count_1] := $OP_HH_ID
		inc($count_1)
	end while
	{/Instruments per note}

	{Instrument Mixer Channels
	The direct channels of each one of the instruments, according to the CHANNEL_PURGE_STATE PGS key created in the mixer page
	to be set per kit}
	declare %instr_channel[$NUM_INSTRUMENTS + 1]
	%instr_channel[$KICK_ID] := 0
	%instr_channel[$SNARE_ID] := 1
	%instr_channel[$HH_ID] := 2
	%instr_channel[$OP_HH_ID] := 2
	%instr_channel[$TOM1_ID] := 3
	%instr_channel[$TOM2_ID] := 4
	%instr_channel[$TOM3_ID] := -1
	%instr_channel[$TOM4_ID] := -1
	%instr_channel[$TOM5_ID] := -1
	%instr_channel[$CYMB1_ID] := -1
	%instr_channel[$CYMB2_ID] := -1
	%instr_channel[$CYMB3_ID] := -1
	%instr_channel[$CYMB4_ID] := -1
	%instr_channel[$CYMB5_ID] := -1
	%instr_channel[$CYMB6_ID] := -1
	%instr_channel[$CYMB7_ID] := -1
	%instr_channel[$PERC1_ID] := -1
	%instr_channel[$PERC2_ID] := 5
	%instr_channel[$PERC3_ID] := 6
	%instr_channel[$PERC4_ID] := 7
	%instr_channel[$PERC5_ID] := -1
	{/Instrument Mixer Channels}

    {START CONFIGURATION}

    {Speed Alternation time in milliseconds}
    declare const $SPEED_ALT_TIME := 160

    {OPEN HIHAT CHOKING FADE TIMES}
    declare const $FAR_OHH_FADE_TIME := 100
    declare const $CLOSE_OHH_FADE_TIME := 50

    {HIHAT CONTROLLER}
    declare const $HIHAT_1ST_CC := 1 {Mod Wheel}	{Also used for Snare Swish and Snare Roll Volume Ramp Up}
    declare const $HIHAT_2ND_CC := 4 {Hihat Pedal Controller}
    declare const $HIHAT_NOTE := 31
    declare $hihat_state := 0
    declare $last_mw_value
    make_persistent($last_mw_value)
    read_persistent_var($last_mw_value)
    set_controller($HIHAT_1ST_CC, $last_mw_value)


    {SNARE POSITION SENSING}
    declare const $SNARE_CC := 16
    declare const $SNARE_NOTE := 4 {Bb1}

    {VOICE CONTROL IMPLEMENTATION}
    {Note: all fadetimes are in milliseconds!}

    {*****KEY*****}
    {loud -> soft: determines the threshold of the velocity difference before the fading kicks in, i.e. only velocity differencec below this number will be faded}
    declare %note_key_threshold[128] := (...
											{C-2} 30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,...
											{C-1} 30,  126, 30,  40,  30,  30,  30,  30,  40,  40,  40,  40,...
											{C0}  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,...
											{C1}  40,  40,  40,  40,  30,  30,  30,  30,  40,  30,  30,  30,...
											{C2}  30,  30,  30,  40,  30,  30,  30,  30,  30,  30,  40,  30,...
											{C3}  30,  30,  30,  30,  30,  40,  30,  30,  30,  30,  30,  30,...
											{C4}  40,  30,  30,  30,  30,  30, 126,  30,  30,  30, 126,  30,...
											{C5}  30,  30, 126,  30,  30,  30, 126,  30,  30,  30, 126,  30,...
											{C6}  30,  30, 126,  30,  30,  30, 126,  30,  30,  30, 126,  30,...
											{C7}  30,  30,  30,  30,  30,  30,  40,  40,  40,  30,  30,  30,...
											{C8}  30,  30,  30,  30,  30,  30,  30,  30) {Ab   A    Bb   B}
											     {C    Db   D    Eb   E    F    Gb  G}{√}

    declare %note_grp_threshold[$NUM_INSTRUMENTS + 1] := (...
                                                          {0}   30,  30,...
                                                          {2}   40,  30,...
                                                          {4}   30,  30,...
                                                          {6}   30,  30,...
                                                          {8}   30,  30,...
                                                          {10}  30,  30,...
                                                          {12}  30,  30,...
                                                          {14}  30,  30,...
                                                          {16}  30,  30,...
                                                          {18}  30,  30,...
                                                          {20}  40){√}

    declare %close_key_min_fadetimes[128] := (...
                                            {C-2} 10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,...
                                            {C-1} 10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,...
                                            {C0}  10,  10,  10,  10,  10,  10, 100,  50,  10,  10,  10,  10,...
                                            {C1}  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,...
                                            {C2}  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,...
                                            {C3}  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,...
                                            {C4}  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,...
                                            {C5}  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,...
                                            {C6}  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,...
                                            {C7}  50,  50,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,...
                                            {C8}  10,  10,  10,  10,  10,  10,  10,  10)  {G#}{A}  {A#} {B}
												 {C}  {C#}  {D}  {D#} {E}  {F}  {F#} {G}

    declare %close_key_max_fadetimes[128] := (...
                                              {C-2}  500,  500,  500, 1000,  350,  350,  350,  350,  350,  350,  500,  500,...
                                              {C-1}  500,  350,  350,  350,  500,  500,  500,  500,  200,  200,  200,  200,...
                                              {C0}   200,  200,  200,  200,  200,  350,  400,  400,  400,  400,  400,  400,...
                                              {C1}   400,  400,  400,  400,  550,  550,  550,  550,  350, 1000, 1000,  550,...
                                              {C2}   550,  550,  550,  350, 1000, 1000,  550,  350,  550,  550,  350, 1000,...
                                              {C3}  1000,  550,  350,  350,  550,  350, 1000, 1000, 1000, 1000, 1000, 1000,...
                                              {C4}  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,...
                                              {C5}  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,...
                                              {C6}  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  350,...
                                              {C7}   700,  700,  500,  500, 1000, 1000, 1000, 1000,  500,  500,  500, 1000,...
                                              {C8}  1000, 1000, 1000, 1000, 1000,  500,  500,  500)    {Ab}   {A}    {Bb}  {B}
												    {C}   {Db}  {D}    {Eb}  {E}   {F}   {Gb}  {G}{√}

    declare %far_key_min_fadetimes[128] := (...
                                            {C-2}  50,   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,...
                                            {C-1}  50,   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,...
                                            {C0}   50,   50,   50,   50,   50,  150,  100,   50,   50,   50,   50,   50,...
                                            {C1}   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,...
                                            {C2}   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,...
                                            {C3}   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,...
                                            {C4}   50,   50,   50,  100,  100,  100,  100,  100,  100,  100,  100,  100,...
                                            {C5}  100,  100,  100,  100,  100,  100,  100,  100,  100,   50,  100,  100,...
                                            {C6}   50,   50,  100,   50,   50,   50,   50,   50,   50,   50,   50,   50,...
                                            {C7}  100,  100,   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,...
                                            {C8}   50,   50,   50,   50,   50,   50,   50,   50)  {Ab}  {A}   {Bb}   {B}
												  {C}  {Db}  {D}   {Eb}  {E}  {F}    {Gb}  {G}{√}

    declare %far_key_max_fadetimes[128] := (...
                                            {C-2}  800,   800,   800,  1000,   700,   700,   700,   700,   700,   700,   800,   800,...
                                            {C-1}  800,   700,   700,   700,   800,   800,   800,   600,   600,   600,   600,   600,...
                                            {C0}   600,   600,   600,   600,   600,   700,   650,   650,   650,   650,   650,   650,...
                                            {C1}   650,   700,   700,   700,   700,   700,   700,   750,   700,  1000,  1000,   700,...
                                            {C2}   700,   700,   700,   700,  1000,  1000,   700,   700,   700,   700,   700,  1000,...
                                            {C3}  1000,   700,   700,   700,   700,   700,  1000,  1000,  1000,  1000,  1000,  1000,...
                                            {C4}  1000,  1000,  1000,  2000,  3000,  3000,  1000,  3000,  2000,  3000,  3000,  1000,...
                                            {C5}  3000,  3000,  4000,  4000,  1000,  4000,  3000,  4000,  3000,  1000,  1000,  4000,...
                                            {C6}  1000,  1000,  1000,  1000,  1000,  1000,  1000,  1000,  1000,  1000,  1000,   600,...
                                            {C7}  700,    700,   800,   800,  1000,  1000,  1000,  1000,   800,   800,   800,  1000,...
                                            {C8}  1000,  1000,  1000,  1000,  1000,   800,   800,   800)  {Ab}    {A}   {Bb}    {B}
												  {C}    {Db}   {D}    {Eb}    {E}    {F}    {Gb}   {G}  {√}

    declare %close_grp_min_fadetimes[$NUM_INSTRUMENTS + 1] := (...
                                                               {0}  10, 100,...
                                                               {2} 100,  50,...
                                                               {4}  50,  50,...
                                                               {6}  50,  50,...
                                                               {8}  10,  10,...
                                                               {10} 10,  10,...
                                                               {12} 10,  10,...
                                                               {14} 10,  50,...
                                                               {16} 50,  50,...
                                                               {18} 50,  50,...
                                                               {20} 100){√}

    declare %close_grp_max_fadetimes[$NUM_INSTRUMENTS + 1] := (...
                                                               {0}  500, 800,...
                                                               {2}  350,1500,...
                                                               {4} 1500,1500,...
                                                               {6} 1500,1500,...
                                                               {8} 1000,1000,...
                                                               {10}1000,1000,...
                                                               {12}1000,1000,...
                                                               {14}1000, 350,...
                                                               {16} 700, 700,...
                                                               {18} 700, 700,...
                                                               {20} 400){√}

    declare %far_grp_min_fadetimes[$NUM_INSTRUMENTS + 1] := (...
                                                             {0}   50, 150,...
                                                             {2}  150, 100,...
                                                             {4}  100, 100,...
                                                             {6}  100, 100,...
                                                             {8}  100, 100,...
                                                             {10} 100, 100,...
                                                             {12} 100, 100,...
                                                             {14} 100, 100,...
                                                             {16} 100, 100,...
                                                             {18} 100, 100,...
                                                             {20} 150){√}

    declare %far_grp_max_fadetimes[$NUM_INSTRUMENTS + 1] := (...
                                                             {0}  800,1500,...
                                                             {2}  700,1000,...
                                                             {4} 2000,2000,...
                                                             {6} 2000,2000,...
                                                             {8} 2000,3000,...
                                                             {10}3000,3000,...
                                                             {12}3000,3000,...
                                                             {14}3000,3000,...
                                                             {16}1000,1000,...
                                                             {18}1000,1000,...
                                                             {20}1000)
    {END VOICE CONTROL}

    declare const $MAX_NOTES := 384
    declare %all_notes[$MAX_NOTES]
    {array that keeps all sounding notes}

    {CYMBAL EDGE KEYS - those are never faded by other articulations of the same instrument}
    declare const $CYMB1_EDGE := 75
    declare const $CYMB2_EDGE := 80
    declare const $CYMB3_EDGE := 85
    declare const $CYMB4_EDGE := 83
    declare const $CYMB5_EDGE := 87
    declare const $CYMB6_EDGE := 91
    declare const $CYMB7_EDGE := 95

    {RIM ONLY KEYS - those keys never fade any other keys}
    declare const $SNARE_RIM := 15
    declare const $TOM1_RIM := 44
    declare const $TOM2_RIM := 51
    declare const $TOM3_RIM := 54
    declare const $TOM4_RIM := 61
    declare const $TOM5_RIM := 68

    declare %close_mutegroups[$NUM_INSTRUMENTS + 1]
    %close_mutegroups[$KICK_ID] := 0
    %close_mutegroups[$SNARE_ID] := 1
    %close_mutegroups[$HH_ID] := 2
    %close_mutegroups[$OP_HH_ID] := 3
    %close_mutegroups[$TOM1_ID] := 4
    %close_mutegroups[$TOM2_ID] := 5
    %close_mutegroups[$TOM3_ID] := 6
    %close_mutegroups[$TOM4_ID] := 7
    %close_mutegroups[$TOM5_ID] := 8
    %close_mutegroups[$CYMB1_ID] := 9
    %close_mutegroups[$CYMB2_ID] := 10
    %close_mutegroups[$CYMB3_ID] := 11
    %close_mutegroups[$CYMB4_ID] := 12
    %close_mutegroups[$CYMB5_ID] := 13
    %close_mutegroups[$CYMB6_ID] := 14
    %close_mutegroups[$CYMB7_ID] := 15
    %close_mutegroups[$PERC1_ID] := 16
    %close_mutegroups[$PERC2_ID] := 17
    %close_mutegroups[$PERC3_ID] := 18
    %close_mutegroups[$PERC4_ID] := 19
    %close_mutegroups[$PERC5_ID] := 20

    declare %far_mutegroups[$NUM_INSTRUMENTS + 1]
    %far_mutegroups[$KICK_ID] := 21
    %far_mutegroups[$SNARE_ID] := 22
    %far_mutegroups[$HH_ID] := 23
    %far_mutegroups[$OP_HH_ID] := 24
    %far_mutegroups[$TOM1_ID] := 25
    %far_mutegroups[$TOM2_ID] := 26
    %far_mutegroups[$TOM3_ID] := 27
    %far_mutegroups[$TOM4_ID] := 28
    %far_mutegroups[$TOM5_ID] := 29
    %far_mutegroups[$CYMB1_ID] := 30
    %far_mutegroups[$CYMB2_ID] := 31
    %far_mutegroups[$CYMB3_ID] := 32
    %far_mutegroups[$CYMB4_ID] := 33
    %far_mutegroups[$CYMB5_ID] := 34
    %far_mutegroups[$CYMB6_ID] := 35
    %far_mutegroups[$CYMB7_ID] := 36
    %far_mutegroups[$PERC1_ID] := 37
    %far_mutegroups[$PERC2_ID] := 38
    %far_mutegroups[$PERC3_ID] := 39
    %far_mutegroups[$PERC4_ID] := 40
    %far_mutegroups[$PERC5_ID] := 41

    declare %close_flex_mutegroups[$NUM_INSTRUMENTS + 1]
    %close_flex_mutegroups[$KICK_ID] := 42
    %close_flex_mutegroups[$SNARE_ID] := 43
    %close_flex_mutegroups[$HH_ID] := 44
    %close_flex_mutegroups[$OP_HH_ID] := 45
    %close_flex_mutegroups[$TOM1_ID] := 46
    %close_flex_mutegroups[$TOM2_ID] := 47
    %close_flex_mutegroups[$TOM3_ID] := 48
    %close_flex_mutegroups[$TOM4_ID] := 49
    %close_flex_mutegroups[$TOM5_ID] := 50
    %close_flex_mutegroups[$CYMB1_ID] := 51
    %close_flex_mutegroups[$CYMB2_ID] := 52
    %close_flex_mutegroups[$CYMB3_ID] := 53
    %close_flex_mutegroups[$CYMB4_ID] := 54
    %close_flex_mutegroups[$CYMB5_ID] := 55
    %close_flex_mutegroups[$CYMB6_ID] := 56
    %close_flex_mutegroups[$CYMB7_ID] := 57
    %close_flex_mutegroups[$PERC1_ID] := 58
    %close_flex_mutegroups[$PERC2_ID] := 59
    %close_flex_mutegroups[$PERC3_ID] := 60
    %close_flex_mutegroups[$PERC4_ID] := 61
    %close_flex_mutegroups[$PERC5_ID] := 62

    declare %far_flex_mutegroups[$NUM_INSTRUMENTS + 1]
    %far_flex_mutegroups[$KICK_ID] := 63
    %far_flex_mutegroups[$SNARE_ID] := 64
    %far_flex_mutegroups[$HH_ID] := 65
    %far_flex_mutegroups[$OP_HH_ID] := 66
    %far_flex_mutegroups[$TOM1_ID] := 67
    %far_flex_mutegroups[$TOM2_ID] := 68
    %far_flex_mutegroups[$TOM3_ID] := 69
    %far_flex_mutegroups[$TOM4_ID] := 70
    %far_flex_mutegroups[$TOM5_ID] := 71
    %far_flex_mutegroups[$CYMB1_ID] := 72
    %far_flex_mutegroups[$CYMB2_ID] := 73
    %far_flex_mutegroups[$CYMB3_ID] := 74
    %far_flex_mutegroups[$CYMB4_ID] := 75
    %far_flex_mutegroups[$CYMB5_ID] := 76
    %far_flex_mutegroups[$CYMB6_ID] := 77
    %far_flex_mutegroups[$CYMB7_ID] := 78
    %far_flex_mutegroups[$PERC1_ID] := 79
    %far_flex_mutegroups[$PERC2_ID] := 80
    %far_flex_mutegroups[$PERC3_ID] := 81
    %far_flex_mutegroups[$PERC4_ID] := 82
    %far_flex_mutegroups[$PERC5_ID] := 83


    {Amount of variations per note}
    declare %note_variations[128] := (...
                                      {C-2} 4,  4,  4,  1,  3,  3,  3,  3,  3,  3,  3,  3,...
                                      {C-1} 3,  2,  3,  3,  3,  3,  2,  3,  3,  3,  3,  3,...
                                      {C0}  3,  3,  3,  3,  3,  3,  2,  3,  3,  3,  3,  3,...
                                      {C1}  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,...
                                      {C2}  3,  3,  3,  3,  3,  3,  3,  1,  1,  1,  1,  1,...
                                      {C3}  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,...
                                      {C4}  1,  1,  1,  3,  2,  2,  2,  3,  3,  2,  2,  2,...
                                      {C5}  3,  2,  3,  2,  2,  3,  2,  1,  1,  1,  1,  1,...
                                      {C6}  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  3,...
                                      {C7}  4,  1,  2,  2,  3,  3,  1,  1,  3,  1,  1,  1,...
                                      {C8}  1,  1,  1,  1,  1,  1,  1,  1){G#   A  A#   B}
    									   {C  C#   D   D#  E   F   F#  G}

    {which notes are affected by left/right alternation}
    declare %note_alternate[128]
    %note_alternate[4] := 1  {e.g. D1 will trigger left/right}
    %note_alternate[7] := 1
    %note_alternate[20] := 1
    %note_alternate[23] := 1
    %note_alternate[26] := 1
    %note_alternate[40] := 1
    %note_alternate[47] := 1
    %note_alternate[54] := 1
    %note_alternate[61] := 1
    %note_alternate[68] := 1

    {END CONFIGURATION}

	declare ui_label $label (3, 1)
	set_text($label, "Abbey Road Vintage Drummer Voice Control Engine")

	{id variables}
	declare $dr1_note_id
	declare $dr2_note_id
	declare $dr3_note_id
	declare $bld_note_id
	declare $kt1_note_id
	declare $kt2_note_id
	declare $kt3_note_id
	declare $kt4_note_id

	declare $dr1_grp_id
	declare $dr2_grp_id
	declare $dr3_grp_id
	declare $bld_grp_id
	declare $kt1_grp_id
	declare $kt2_grp_id
	declare $kt3_grp_id
	declare $kt4_grp_id

	declare %dr1_note_ids[128] {stores the id per key}
	declare %dr2_note_ids[128]
	declare %dr3_note_ids[128]
	declare %bld_note_ids[128]
	declare %kt1_note_ids[128]
	declare %kt2_note_ids[128]
	declare %kt3_note_ids[128]
	declare %kt4_note_ids[128]

	{various variables}
	declare %random_count_1er[128]
	declare %last_random_count_1er[128]
	declare $actual_inst {the instrument ID of the current callback}
	declare %last_velo[128] {the last received velocity of the key}
	declare %last_velo_inst[128]  {the last received velocity of the instrument/mute group}
	declare $velo_diff
	declare $fade_time
	declare %alt_last_time[128]
	declare %alt_count_1[128]
	declare $play_alternate {1 if other hand should be played. Note: also used for HiHat}

	{Randomization Amounts}
	declare $pitch_rand_amt

	declare const $DIRECT_MIC_RATIO := 20	{percent}

	declare %RAND_AMT[$NUM_INSTRUMENTS + 1]
	%RAND_AMT[$KICK_ID] := 1000
	%RAND_AMT[$SNARE_ID] := 1000
	%RAND_AMT[$HH_ID] := 800
	%RAND_AMT[$OP_HH_ID] := 500
	%RAND_AMT[$TOM1_ID] := 800
	%RAND_AMT[$TOM2_ID] := 800
	%RAND_AMT[$TOM3_ID] := 800
	%RAND_AMT[$TOM4_ID] := 800
	%RAND_AMT[$TOM5_ID] := -800
	%RAND_AMT[$CYMB1_ID] := 300
	%RAND_AMT[$CYMB2_ID] := 300
	%RAND_AMT[$CYMB3_ID] := 200
	%RAND_AMT[$CYMB4_ID] := 200
	%RAND_AMT[$CYMB5_ID] := 200
	%RAND_AMT[$CYMB6_ID] := 200
	%RAND_AMT[$CYMB7_ID] := 200
	%RAND_AMT[$PERC1_ID] := 500
	%RAND_AMT[$PERC2_ID] := 700
	%RAND_AMT[$PERC3_ID] := 400
	%RAND_AMT[$PERC4_ID] := 400
	%RAND_AMT[$PERC5_ID] := 400
	{/Randomization Amounts}
end on

on note
		{if ($message_time < $ENGINE_UPTIME - 3000)
	    message("")
	end if}

	ignore_event($EVENT_ID)
	disallow_group($ALL_GROUPS)

	if (%note_instruments[$EVENT_NOTE] = -1)
	    exit
	end if

	$actual_inst := %note_instruments[$EVENT_NOTE]

	{VELOCITY CURVES}
	if ($actual_inst = $SNARE_ID and pgs_get_key_val(ACTIVE_SNARE, 0) # 0)
	    select (pgs_get_key_val(ACTIVE_SNARE, 0))
	        case 1
	            $cur_note := 128 + $EVENT_NOTE - 4
	        case 2
	            $cur_note := 144 + $EVENT_NOTE - 4
	    end select
	else
	    $cur_note := $EVENT_NOTE
	end if
	$cur_velo := $EVENT_VELOCITY
	if ($EVENT_VELOCITY < %note_curve[$cur_note * 6])
	    $x1 := 1
	    $y1 := 1
	    $x2 := %note_curve[$cur_note * 6]
	    $y2 := %note_curve[$cur_note * 6 + 1]
	else
	    if ($EVENT_VELOCITY < %note_curve[$cur_note * 6 + 2])
	        $x1 := %note_curve[$cur_note * 6]
	        $y1 := %note_curve[$cur_note * 6 + 1]
	        $x2 := %note_curve[$cur_note * 6 + 2]
	        $y2 := %note_curve[$cur_note * 6 + 3]
	    else
	        if ($EVENT_VELOCITY < %note_curve[$cur_note * 6 + 4])
	            $x1 := %note_curve[$cur_note * 6 + 2]
	            $y1 := %note_curve[$cur_note * 6 + 3]
	            $x2 := %note_curve[$cur_note * 6 + 4]
	            $y2 := %note_curve[$cur_note * 6 + 5]
	        else
	            $x1 := %note_curve[$cur_note * 6 + 4]
	            $y1 := %note_curve[$cur_note * 6 + 5]
	            $x2 := 127
	            $y2 := 127
	        end if
	    end if
	end if

	$new_velo := ($y2 - $y1) * ($cur_velo - $x2) / ($x2 - $x1) + $y2
	if ($new_velo > 127)
	    $new_velo := 127
	else
	    if ($new_velo < 1)
	        $new_velo := 1
	    end if
	end if
	change_velo($EVENT_ID, $new_velo)
	{/VELOCITY CURVES}


	{!!!START TESTING PART 2!!!}
		set_text($debug_monitor, "cur_note:" & $cur_note)
		$note := $EVENT_NOTE
		$point_1_in  := %note_curve[$cur_note * 6]
		$point_1_out := %note_curve[$cur_note * 6 + 1]
		$point_2_in  := %note_curve[$cur_note * 6 + 2]
		$point_2_out := %note_curve[$cur_note * 6 + 3]
		$point_3_in  := %note_curve[$cur_note * 6 + 4]
		$point_3_out := %note_curve[$cur_note * 6 + 5]

		$count := 0
		while ($count < 128)
			if ($count < %note_curve[$cur_note * 6])
				$x1 := 1
				$y1 := 1
				$x2 := %note_curve[$cur_note * 6]
				$y2 := %note_curve[$cur_note * 6 + 1]
			else
				if ($count < %note_curve[$cur_note * 6 + 2])
					$x1 := %note_curve[$cur_note * 6]
					$y1 := %note_curve[$cur_note * 6 + 1]
					$x2 := %note_curve[$cur_note * 6 + 2]
					$y2 := %note_curve[$cur_note * 6 + 3]
				else
					if ($count < %note_curve[$cur_note * 6 + 4])
						$x1 := %note_curve[$cur_note * 6 + 2]
						$y1 := %note_curve[$cur_note * 6 + 3]
						$x2 := %note_curve[$cur_note * 6 + 4]
						$y2 := %note_curve[$cur_note * 6 + 5]
					else
						$x1 := %note_curve[$cur_note * 6 + 4]
						$y1 := %note_curve[$cur_note * 6 + 5]
						$x2 := 127
						$y2 := 127
					end if
				end if
			end if

			$new_velo := ($y2 - $y1) * ($count - $x2) / ($x2 - $x1) + $y2
			if ($new_velo > 127)
				$new_velo := 127
			else
				if ($new_velo < 1)
					$new_velo := 1
				end if
			end if
			%table[$count] := $new_velo
			inc($count)
		end while
	{!!!END TESTING PART 2!!!}


	{SPEED ALTERNATE}
	if (%note_alternate[$EVENT_NOTE] = 1)
		if ($ENGINE_UPTIME - %alt_last_time[$EVENT_NOTE] < $SPEED_ALT_TIME and %alt_last_time[$EVENT_NOTE] # 0)

			{speed alternation active}
			if (%alt_count_1[$EVENT_NOTE] = 0)
				$play_alternate := 1 {Att: right note}
				%alt_count_1[$EVENT_NOTE] := 1
			else
				$play_alternate := 0 {left, i.e. normal note}
				%alt_count_1[$EVENT_NOTE] := 0
			end if

		else
			{speed alternation inactive}
			$play_alternate := 0 {left, i.e. normal note}
			%alt_count_1[$EVENT_NOTE] := 0
		end if

		if ($EVENT_NOTE = $SNARE_NOTE and %CC[$SNARE_CC] > 64)
			$play_alternate := $play_alternate + 2
		end if

		%alt_last_time[$EVENT_NOTE] := $ENGINE_UPTIME
	else
		{HIHAT}
		if ($EVENT_NOTE = $HIHAT_NOTE)
			$play_alternate := 4 - $hihat_state/26 {0 for open hihat, up to 4 for 1/4 closed}
		else
			$play_alternate := 0
		end if
	end if
	{END SPEED ALTERNATION}

	{!!!START TESTING PART2!!!}

	{!!!END TESTING PART2!!!}

	$dr1_grp_id := %GROUP_DATA[$EVENT_NOTE * 8 + 0]
	$dr2_grp_id := %GROUP_DATA[$EVENT_NOTE * 8 + 1]
	$dr3_grp_id := %GROUP_DATA[$EVENT_NOTE * 8 + 2]
	$bld_grp_id := %GROUP_DATA[$EVENT_NOTE * 8 + 3]
	$kt1_grp_id := %GROUP_DATA[$EVENT_NOTE * 8 + 4]
	$kt2_grp_id := %GROUP_DATA[$EVENT_NOTE * 8 + 5]
	$kt3_grp_id := %GROUP_DATA[$EVENT_NOTE * 8 + 6]
	$kt4_grp_id := %GROUP_DATA[$EVENT_NOTE * 8 + 7]

	if ($actual_inst = $SNARE_ID and pgs_get_key_val(ACTIVE_SNARE, 0) # 0)
		if ($dr1_grp_id > -1)
			$dr1_grp_id := $dr1_grp_id + pgs_get_key_val(ACTIVE_SNARE, 0)
		end if
		if ($dr2_grp_id > -1)
			$dr2_grp_id := $dr2_grp_id + pgs_get_key_val(ACTIVE_SNARE, 0)
		end if
		if ($dr3_grp_id > -1)
			$dr3_grp_id := $dr3_grp_id + pgs_get_key_val(ACTIVE_SNARE, 0)
		end if
		if ($bld_grp_id > -1)
			$bld_grp_id := $bld_grp_id + pgs_get_key_val(ACTIVE_SNARE, 0)
		end if
		if ($kt1_grp_id > -1)
			$kt1_grp_id := $kt1_grp_id + pgs_get_key_val(ACTIVE_SNARE, 0)
		end if
		if ($kt2_grp_id > -1)
			$kt2_grp_id := $kt2_grp_id + pgs_get_key_val(ACTIVE_SNARE, 0)
		end if
		if ($kt3_grp_id > -1)
			$kt3_grp_id := $kt3_grp_id + pgs_get_key_val(ACTIVE_SNARE, 0)
		end if
		if ($kt4_grp_id > -1)
			$kt4_grp_id := $kt4_grp_id + pgs_get_key_val(ACTIVE_SNARE, 0)
		end if
	end if

	if ($actual_inst = $SNARE_ID and ($EVENT_NOTE = $SNARE_ROLL or $EVENT_NOTE = $SNARE_SWISH))
		if ($dr1_grp_id > -1)
			$dr1_grp_id	:=  %SNARE_ROLL_SWISH_GROUPS[0] + pgs_get_key_val(ACTIVE_SNARE, 0)
		end if
		if ($dr2_grp_id > -1)
			$dr2_grp_id	:=  %SNARE_ROLL_SWISH_GROUPS[1] + pgs_get_key_val(ACTIVE_SNARE, 0)
		end if
		if ($dr3_grp_id > -1)
			$dr3_grp_id	:=  %SNARE_ROLL_SWISH_GROUPS[2] + pgs_get_key_val(ACTIVE_SNARE, 0)
		end if
		if ($bld_grp_id > -1)
			$bld_grp_id	:=  %SNARE_ROLL_SWISH_GROUPS[3] + pgs_get_key_val(ACTIVE_SNARE, 0)
		end if
		if ($kt1_grp_id > -1)
			$kt1_grp_id	:=  %SNARE_ROLL_SWISH_GROUPS[4] + pgs_get_key_val(ACTIVE_SNARE, 0)
		end if
		if ($kt2_grp_id > -1)
			$kt2_grp_id	:=  %SNARE_ROLL_SWISH_GROUPS[5] + pgs_get_key_val(ACTIVE_SNARE, 0)
		end if
		if ($kt3_grp_id > -1)
			$kt3_grp_id	:=  %SNARE_ROLL_SWISH_GROUPS[6] + pgs_get_key_val(ACTIVE_SNARE, 0)
		end if
		if ($kt4_grp_id > -1)
			$kt4_grp_id :=  %SNARE_ROLL_SWISH_GROUPS[7] + pgs_get_key_val(ACTIVE_SNARE, 0)
		end if
	end if

	{message($dr1_grp_id & " | " & $dr2_grp_id & " | " & $dr3_grp_id & " | " & $bld_grp_id & " | " & ...
			    $kt1_grp_id & " | " & $kt2_grp_id & " | " & $kt3_grp_id & " | " & $kt4_grp_id)}

	{Note Variation}
	if ($NUM_ZONES > $ZONE_LIMIT_LITE)
		if (%note_variations[$EVENT_NOTE] > 1)
			while (%random_count_1er[$EVENT_NOTE] = %last_random_count_1er[$EVENT_NOTE])
				%random_count_1er[$EVENT_NOTE] := random(0,%note_variations[$EVENT_NOTE]-1)
			end while
		else
			%random_count_1er[$EVENT_NOTE] := 0
		end if
	end if

	{Optimization Articulation Offset Hack}
	if (%note_instruments[$EVENT_NOTE] = $OP_HH_ID)
		$count_1 := 20
		$articulation_offset := 20
	else
		$count_1 := %INSTRUMENT_OFFSET[%note_instruments[$EVENT_NOTE]]
		$articulation_offset := %INSTRUMENT_OFFSET[%note_instruments[$EVENT_NOTE]]
	end if
	while ($count_1 < $EVENT_NOTE)
		if ($count_1 = $HIHAT_NOTE)
			$articulation_offset := $articulation_offset + 5 * %note_variations[$count_1] * %KEY_USED[$count_1]
		else
			$articulation_offset := $articulation_offset + %note_variations[$count_1] * (%note_alternate[$count_1] + 1) * %KEY_USED[$count_1]
			if ($count_1 = $SNARE_NOTE)
				$articulation_offset := $articulation_offset + %note_variations[$count_1] * (%note_alternate[$count_1] + 1) * %KEY_USED[$count_1]
			end if
		end if
		inc($count_1)
	end while

	{%all_notes array sorting}
	$b := $event_cursor
	$count_1 := 0
	$event_cursor := 0
	while ($count_1 < $b)
		if (event_status(%all_notes[$count_1]) = 1)
			%all_notes[$event_cursor] := %all_notes[$count_1]
			inc($event_cursor)
		end if
		inc($count_1)
	end while

	{if the %all_notes array is close to full - flush it and give a warning}
	if ($event_cursor >= $MAX_NOTES - 10)
		$b := $event_cursor
		$count_1 := 0
		$event_cursor := 0
		while ($count_1 < $b)
			if($count_1 < 10)
				fade_out(%all_notes[$count_1], 10000, 1)
			else
				%all_notes[$event_cursor] := %all_notes[$count_1]
				inc($event_cursor)
			end if
			inc($count_1)
		end while
		{message("Voice Overflow - All Voices Killed")}  {the message should be deleted after a while e.g. 3 seconds}
		$message_time := $ENGINE_UPTIME
	end if


	{VOICE CONTROL START}

	$count_1 := 0
	while ($count_1 < 128)
		if (%note_instruments[$count_1] = $actual_inst) {find the note numbers of the same instrument}

			{START DR1}
			if (event_status(%dr1_note_ids[$count_1]) = $EVENT_STATUS_NOTE_QUEUE)
				{*** the same note: KEY}
				if ($count_1 = $EVENT_NOTE)
					$velo_diff := $EVENT_VELOCITY - %last_velo[$EVENT_NOTE]
					if (not ($EVENT_VELOCITY < %last_velo[$EVENT_NOTE] and -$velo_diff > %note_key_threshold[$EVENT_NOTE]))
						$fade_time := (127 - $velo_diff) * (%close_key_max_fadetimes[$EVENT_NOTE] - %close_key_min_fadetimes[$EVENT_NOTE]) / 254 + %close_key_min_fadetimes[$EVENT_NOTE]
						fade_out(%dr1_note_ids[$EVENT_NOTE],$fade_time*1000,1)
					else
						if (-$velo_diff > %note_grp_threshold[$actual_inst])
							set_event_par(%dr1_note_ids[$count_1], $EVENT_PAR_0, %close_flex_mutegroups[$actual_inst])
						end if
					end if
				{*** different note: GRP}
				else
					if ($EVENT_NOTE # $SNARE_RIM and...
						$EVENT_NOTE # $TOM1_RIM and...
						$EVENT_NOTE # $TOM2_RIM and...
						$EVENT_NOTE # $TOM3_RIM and...
						$EVENT_NOTE # $TOM4_RIM and...
						$EVENT_NOTE # $TOM5_RIM)
							$velo_diff := $EVENT_VELOCITY - %last_velo_inst[$actual_inst]
							if (not ($EVENT_VELOCITY < %last_velo_inst[$actual_inst] and -$velo_diff > %note_grp_threshold[$actual_inst]))
								$fade_time := (127 - $velo_diff) * (%close_grp_max_fadetimes[$actual_inst] - %close_grp_min_fadetimes[$actual_inst]) / 254 + %close_grp_min_fadetimes[$actual_inst]
								$count_2 := 0
								while ($count_2 < $event_cursor)
									if (get_event_par(%all_notes[$count_2], $EVENT_PAR_0) = %close_mutegroups[$actual_inst])
										fade_out(%all_notes[$count_2], $fade_time*1000,1)
										set_event_par(%all_notes[$count_2], $EVENT_PAR_0, %close_flex_mutegroups[$actual_inst])
									end if
									inc($count_2)
								end while
							else
								set_event_par(%dr1_note_ids[$count_1], $EVENT_PAR_0, %close_flex_mutegroups[$actual_inst])
							end if
					end if
				end if
			end if
			{END DR1}

			{START DR2}
			if (event_status(%dr2_note_ids[$count_1]) = $EVENT_STATUS_NOTE_QUEUE)
				{*** the same note: KEY}
				if ($count_1 = $EVENT_NOTE)
					$velo_diff := $EVENT_VELOCITY - %last_velo[$EVENT_NOTE]
					if (not ($EVENT_VELOCITY < %last_velo[$EVENT_NOTE] and -$velo_diff > %note_key_threshold[$EVENT_NOTE]))
						$fade_time := (127 - $velo_diff) * (%close_key_max_fadetimes[$EVENT_NOTE] - %close_key_min_fadetimes[$EVENT_NOTE]) / 254 + %close_key_min_fadetimes[$EVENT_NOTE]
						fade_out(%dr2_note_ids[$EVENT_NOTE],$fade_time*1000,1)
					else
						if (-$velo_diff > %note_grp_threshold[$actual_inst])
							set_event_par(%dr2_note_ids[$count_1], $EVENT_PAR_0, %close_flex_mutegroups[$actual_inst])
						end if
					end if
				{*** different note: GRP}
				else
					if ($EVENT_NOTE # $SNARE_RIM and...
						$EVENT_NOTE # $TOM1_RIM and...
						$EVENT_NOTE # $TOM2_RIM and...
						$EVENT_NOTE # $TOM3_RIM and...
						$EVENT_NOTE # $TOM4_RIM and...
						$EVENT_NOTE # $TOM5_RIM)
							$velo_diff := $EVENT_VELOCITY - %last_velo_inst[$actual_inst]
							if (not ($EVENT_VELOCITY < %last_velo_inst[$actual_inst] and -$velo_diff > %note_grp_threshold[$actual_inst]))
								$fade_time := (127 - $velo_diff) * (%close_grp_max_fadetimes[$actual_inst] - %close_grp_min_fadetimes[$actual_inst]) / 254 + %close_grp_min_fadetimes[$actual_inst]
								$count_2 := 0
								while ($count_2 < $event_cursor)
									if (get_event_par(%all_notes[$count_2], $EVENT_PAR_0) = %close_mutegroups[$actual_inst])
										fade_out(%all_notes[$count_2], $fade_time*1000,1)
										set_event_par(%all_notes[$count_2], $EVENT_PAR_0, %close_flex_mutegroups[$actual_inst])
									end if
									inc($count_2)
								end while
							else
								set_event_par(%dr2_note_ids[$count_1], $EVENT_PAR_0, %close_flex_mutegroups[$actual_inst])
							end if
					end if
				end if
			end if
			{END DR2}

			{START DR3}
			if (event_status(%dr3_note_ids[$count_1]) = $EVENT_STATUS_NOTE_QUEUE)
				{*** the same note: KEY}
				if ($count_1 = $EVENT_NOTE)
					$velo_diff := $EVENT_VELOCITY - %last_velo[$EVENT_NOTE]
					if (not ($EVENT_VELOCITY < %last_velo[$EVENT_NOTE] and -$velo_diff > %note_key_threshold[$EVENT_NOTE]))
						$fade_time := (127 - $velo_diff) * (%close_key_max_fadetimes[$EVENT_NOTE] - %close_key_min_fadetimes[$EVENT_NOTE]) / 254 + %close_key_min_fadetimes[$EVENT_NOTE]
						fade_out(%dr3_note_ids[$EVENT_NOTE],$fade_time*1000,1)
					else
						if (-$velo_diff > %note_grp_threshold[$actual_inst])
							set_event_par(%dr3_note_ids[$count_1], $EVENT_PAR_0, %close_flex_mutegroups[$actual_inst])
						end if
					end if
				{*** different note: GRP}
				else
					if ($EVENT_NOTE # $SNARE_RIM and...
						$EVENT_NOTE # $TOM1_RIM and...
						$EVENT_NOTE # $TOM2_RIM and...
						$EVENT_NOTE # $TOM3_RIM and...
						$EVENT_NOTE # $TOM4_RIM and...
						$EVENT_NOTE # $TOM5_RIM)
							$velo_diff := $EVENT_VELOCITY - %last_velo_inst[$actual_inst]
							if (not ($EVENT_VELOCITY < %last_velo_inst[$actual_inst] and -$velo_diff > %note_grp_threshold[$actual_inst]))
								$fade_time := (127 - $velo_diff) * (%close_grp_max_fadetimes[$actual_inst] - %close_grp_min_fadetimes[$actual_inst]) / 254 + %close_grp_min_fadetimes[$actual_inst]
								$count_2 := 0
								while ($count_2 < $event_cursor)
									if (get_event_par(%all_notes[$count_2], $EVENT_PAR_0) = %close_mutegroups[$actual_inst])
										fade_out(%all_notes[$count_2], $fade_time*1000,1)
										set_event_par(%all_notes[$count_2], $EVENT_PAR_0, %close_flex_mutegroups[$actual_inst])
									end if
									inc($count_2)
								end while
							else
								set_event_par(%dr3_note_ids[$count_1], $EVENT_PAR_0, %close_flex_mutegroups[$actual_inst])
							end if
					end if
				end if
			end if
			{END DR3}

			{START BLD}
			if (event_status(%bld_note_ids[$count_1]) = $EVENT_STATUS_NOTE_QUEUE)
				{*** the same note: KEY}
				if ($count_1 = $EVENT_NOTE)
					$velo_diff := $EVENT_VELOCITY - %last_velo[$EVENT_NOTE]
					if (not ($EVENT_VELOCITY < %last_velo[$EVENT_NOTE] and -$velo_diff > %note_key_threshold[$EVENT_NOTE]))
						$fade_time := (127 - $velo_diff) * (%close_key_max_fadetimes[$EVENT_NOTE] - %close_key_min_fadetimes[$EVENT_NOTE]) / 254 + %close_key_min_fadetimes[$EVENT_NOTE]
						fade_out(%bld_note_ids[$EVENT_NOTE],$fade_time*1000,1)
					else
						if (-$velo_diff > %note_grp_threshold[$actual_inst])
							set_event_par(%bld_note_ids[$count_1], $EVENT_PAR_0, %close_flex_mutegroups[$actual_inst])
						end if
					end if
				{*** different note: GRP}
				else
					if ($EVENT_NOTE # $SNARE_RIM and...
						$EVENT_NOTE # $TOM1_RIM and...
						$EVENT_NOTE # $TOM2_RIM and...
						$EVENT_NOTE # $TOM3_RIM and...
						$EVENT_NOTE # $TOM4_RIM and...
						$EVENT_NOTE # $TOM5_RIM)
						$velo_diff := $EVENT_VELOCITY - %last_velo_inst[$actual_inst]
						if (not ($EVENT_VELOCITY < %last_velo_inst[$actual_inst] and -$velo_diff > %note_grp_threshold[$actual_inst]))
							$fade_time := (127 - $velo_diff) * (%close_grp_max_fadetimes[$actual_inst] - %close_grp_min_fadetimes[$actual_inst]) / 254 + %close_grp_min_fadetimes[$actual_inst]
							$count_2 := 0
							while ($count_2 < $event_cursor)
								if (get_event_par(%all_notes[$count_2], $EVENT_PAR_0) = %close_mutegroups[$actual_inst])
									fade_out(%all_notes[$count_2], $fade_time*1000,1)
									set_event_par(%all_notes[$count_2], $EVENT_PAR_0, %close_flex_mutegroups[$actual_inst])
								end if
								inc($count_2)
							end while
						else
							set_event_par(%bld_note_ids[$count_1], $EVENT_PAR_0, %close_flex_mutegroups[$actual_inst])
						end if
					end if
				end if
			end if
			{END BLD}

			{START KT1}
			if (event_status(%kt1_note_ids[$count_1]) = $EVENT_STATUS_NOTE_QUEUE)
				{*** the same note: KEY}
				if ($count_1 = $EVENT_NOTE)
					$velo_diff := $EVENT_VELOCITY - %last_velo[$EVENT_NOTE]
					if (not ($EVENT_VELOCITY < %last_velo[$EVENT_NOTE] and -$velo_diff > %note_key_threshold[$EVENT_NOTE]))
						$fade_time := (127 - $velo_diff) * (%far_key_max_fadetimes[$EVENT_NOTE] - %far_key_min_fadetimes[$EVENT_NOTE]) / 254 + %far_key_min_fadetimes[$EVENT_NOTE]
						fade_out(%kt1_note_ids[$EVENT_NOTE],$fade_time*1000,1)
					else
						if (-$velo_diff > %note_grp_threshold[$actual_inst])
							set_event_par(%kt1_note_ids[$count_1], $EVENT_PAR_0, %far_flex_mutegroups[$actual_inst])
						end if
					end if
				{*** different note: GRP}
				else
					if ($EVENT_NOTE # $SNARE_RIM and...
						$EVENT_NOTE # $TOM1_RIM and...
						$EVENT_NOTE # $TOM2_RIM and...
						$EVENT_NOTE # $TOM3_RIM and...
						$EVENT_NOTE # $TOM4_RIM and...
						$EVENT_NOTE # $TOM5_RIM)
							$velo_diff := $EVENT_VELOCITY - %last_velo_inst[$actual_inst]
							if (not ($EVENT_VELOCITY < %last_velo_inst[$actual_inst] and -$velo_diff > %note_grp_threshold[$actual_inst]))
								$fade_time := (127 - $velo_diff) * (%far_grp_max_fadetimes[$actual_inst] - %far_grp_min_fadetimes[$actual_inst]) / 254 + %far_grp_min_fadetimes[$actual_inst]
								$count_2 := 0
								while ($count_2 < $event_cursor)
									if (get_event_par(%all_notes[$count_2], $EVENT_PAR_0) = %far_mutegroups[$actual_inst])
										fade_out(%all_notes[$count_2], $fade_time*1000,1)
										set_event_par(%all_notes[$count_2], $EVENT_PAR_0, %far_flex_mutegroups[$actual_inst])
									end if
									inc($count_2)
								end while
							else
								set_event_par(%kt1_note_ids[$count_1], $EVENT_PAR_0, %far_flex_mutegroups[$actual_inst])
							end if
					end if
				end if
			end if
			{END KT1}

			{START KT2}
			if (event_status(%kt2_note_ids[$count_1]) = $EVENT_STATUS_NOTE_QUEUE)
				{*** the same note: KEY}
				if ($count_1 = $EVENT_NOTE)
					$velo_diff := $EVENT_VELOCITY - %last_velo[$EVENT_NOTE]
					if (not ($EVENT_VELOCITY < %last_velo[$EVENT_NOTE] and -$velo_diff > %note_key_threshold[$EVENT_NOTE]))
						$fade_time := (127 - $velo_diff) * (%far_key_max_fadetimes[$EVENT_NOTE] - %far_key_min_fadetimes[$EVENT_NOTE]) / 254 + %far_key_min_fadetimes[$EVENT_NOTE]
						fade_out(%kt2_note_ids[$EVENT_NOTE],$fade_time*1000,1)
					else
						if (-$velo_diff > %note_grp_threshold[$actual_inst])
							set_event_par(%kt2_note_ids[$count_1], $EVENT_PAR_0, %far_flex_mutegroups[$actual_inst])
						end if
					end if
				{*** different note: GRP}
				else
					if ($EVENT_NOTE # $SNARE_RIM and...
						$EVENT_NOTE # $TOM1_RIM and...
						$EVENT_NOTE # $TOM2_RIM and...
						$EVENT_NOTE # $TOM3_RIM and...
						$EVENT_NOTE # $TOM4_RIM and...
						$EVENT_NOTE # $TOM5_RIM)
							$velo_diff := $EVENT_VELOCITY - %last_velo_inst[$actual_inst]
							if (not ($EVENT_VELOCITY < %last_velo_inst[$actual_inst] and -$velo_diff > %note_grp_threshold[$actual_inst]))
								$fade_time := (127 - $velo_diff) * (%far_grp_max_fadetimes[$actual_inst] - %far_grp_min_fadetimes[$actual_inst]) / 254 + %far_grp_min_fadetimes[$actual_inst]
								$count_2 := 0
								while ($count_2 < $event_cursor)
									if (get_event_par(%all_notes[$count_2], $EVENT_PAR_0) = %far_mutegroups[$actual_inst])
										fade_out(%all_notes[$count_2], $fade_time*1000,1)
										set_event_par(%all_notes[$count_2], $EVENT_PAR_0, %far_flex_mutegroups[$actual_inst])
									end if
									inc($count_2)
								end while
							else
								set_event_par(%kt2_note_ids[$count_1], $EVENT_PAR_0, %far_flex_mutegroups[$actual_inst])
							end if
					end if
				end if
			end if
			{END KT2}

			{START KT3}
			if (event_status(%kt3_note_ids[$count_1]) = $EVENT_STATUS_NOTE_QUEUE)
				{*** the same note: KEY}
				if ($count_1 = $EVENT_NOTE)
					$velo_diff := $EVENT_VELOCITY - %last_velo[$EVENT_NOTE]
					if (not ($EVENT_VELOCITY < %last_velo[$EVENT_NOTE] and -$velo_diff > %note_key_threshold[$EVENT_NOTE]))
						$fade_time := (127 - $velo_diff) * (%far_key_max_fadetimes[$EVENT_NOTE] - %far_key_min_fadetimes[$EVENT_NOTE]) / 254 + %far_key_min_fadetimes[$EVENT_NOTE]
						fade_out(%kt3_note_ids[$EVENT_NOTE],$fade_time*1000,1)
					else
						if (-$velo_diff > %note_grp_threshold[$actual_inst])
							set_event_par(%kt3_note_ids[$count_1], $EVENT_PAR_0, %far_flex_mutegroups[$actual_inst])
						end if
					end if
				{*** different note: GRP}
				else
					if ($EVENT_NOTE # $SNARE_RIM and...
						$EVENT_NOTE # $TOM1_RIM and...
						$EVENT_NOTE # $TOM2_RIM and...
						$EVENT_NOTE # $TOM3_RIM and...
						$EVENT_NOTE # $TOM4_RIM and...
						$EVENT_NOTE # $TOM5_RIM)
							$velo_diff := $EVENT_VELOCITY - %last_velo_inst[$actual_inst]
							if (not ($EVENT_VELOCITY < %last_velo_inst[$actual_inst] and -$velo_diff > %note_grp_threshold[$actual_inst]))
								$fade_time := (127 - $velo_diff) * (%far_grp_max_fadetimes[$actual_inst] - %far_grp_min_fadetimes[$actual_inst]) / 254 + %far_grp_min_fadetimes[$actual_inst]
								$count_2 := 0
								while ($count_2 < $event_cursor)
									if (get_event_par(%all_notes[$count_2], $EVENT_PAR_0) = %far_mutegroups[$actual_inst])
										fade_out(%all_notes[$count_2], $fade_time*1000,1)
										set_event_par(%all_notes[$count_2], $EVENT_PAR_0, %far_flex_mutegroups[$actual_inst])
									end if
									inc($count_2)
								end while
							else
								set_event_par(%kt3_note_ids[$count_1], $EVENT_PAR_0, %far_flex_mutegroups[$actual_inst])
							end if
					end if
				end if
			end if
			{END KT3}

			{START KT4}
			if (event_status(%kt4_note_ids[$count_1]) = $EVENT_STATUS_NOTE_QUEUE)
				{*** the same note: KEY}
				if ($count_1 = $EVENT_NOTE)
					$velo_diff := $EVENT_VELOCITY - %last_velo[$EVENT_NOTE]
					if (not ($EVENT_VELOCITY < %last_velo[$EVENT_NOTE] and -$velo_diff > %note_key_threshold[$EVENT_NOTE]))
						$fade_time := (127 - $velo_diff) * (%far_key_max_fadetimes[$EVENT_NOTE] - %far_key_min_fadetimes[$EVENT_NOTE]) / 254 + %far_key_min_fadetimes[$EVENT_NOTE]
						fade_out(%kt4_note_ids[$EVENT_NOTE],$fade_time*1000,1)
					else
						if (-$velo_diff > %note_grp_threshold[$actual_inst])
							set_event_par(%kt4_note_ids[$count_1], $EVENT_PAR_0, %far_flex_mutegroups[$actual_inst])
						end if
					end if
				{*** different note: GRP}
				else
					if ($EVENT_NOTE # $SNARE_RIM and...
						$EVENT_NOTE # $TOM1_RIM and...
						$EVENT_NOTE # $TOM2_RIM and...
						$EVENT_NOTE # $TOM3_RIM and...
						$EVENT_NOTE # $TOM4_RIM and...
						$EVENT_NOTE # $TOM5_RIM)
							$velo_diff := $EVENT_VELOCITY - %last_velo_inst[$actual_inst]
							if (not ($EVENT_VELOCITY < %last_velo_inst[$actual_inst] and -$velo_diff > %note_grp_threshold[$actual_inst]))
								$fade_time := (127 - $velo_diff) * (%far_grp_max_fadetimes[$actual_inst] - %far_grp_min_fadetimes[$actual_inst]) / 254 + %far_grp_min_fadetimes[$actual_inst]
								$count_2 := 0
								while ($count_2 < $event_cursor)
									if (get_event_par(%all_notes[$count_2], $EVENT_PAR_0) = %far_mutegroups[$actual_inst])
										fade_out(%all_notes[$count_2], $fade_time*1000,1)
										set_event_par(%all_notes[$count_2], $EVENT_PAR_0, %far_flex_mutegroups[$actual_inst])
									end if
									inc($count_2)
								end while
							else
								set_event_par(%kt4_note_ids[$count_1], $EVENT_PAR_0, %far_flex_mutegroups[$actual_inst])
							end if
					end if
				end if
			end if
			{END KT4}

		end if
		inc($count_1)
	end while

	$cur_velo := $EVENT_VELOCITY
	$choke_flag := 0
	$choke_edge := 2
	if ($actual_inst = $HH_ID)
		$count_2 := 0
		while ($count_2 < $event_cursor)
			if (get_event_par(%all_notes[$count_2], $EVENT_PAR_0) = %far_mutegroups[$OP_HH_ID] or...
				get_event_par(%all_notes[$count_2], $EVENT_PAR_0) = %far_flex_mutegroups[$OP_HH_ID])
				fade_out(%all_notes[$count_2], $FAR_OHH_FADE_TIME*1000,1)
				set_event_par(%all_notes[$count_2], $EVENT_PAR_0, %close_flex_mutegroups[$OP_HH_ID])
				$cur_velo := get_event_par(%all_notes[$count_2], $EVENT_PAR_VELOCITY)
				$choke_time := get_event_par(%all_notes[$count_2], $EVENT_PAR_2)
				$choke_flag := 1
			else
				if (get_event_par(%all_notes[$count_2], $EVENT_PAR_0) = %close_mutegroups[$OP_HH_ID] or...
					get_event_par(%all_notes[$count_2], $EVENT_PAR_0) = %close_flex_mutegroups[$OP_HH_ID])
					fade_out(%all_notes[$count_2], $CLOSE_OHH_FADE_TIME*1000,1)
					set_event_par(%all_notes[$count_2], $EVENT_PAR_0, %close_flex_mutegroups[$OP_HH_ID])
					$cur_velo := get_event_par(%all_notes[$count_2], $EVENT_PAR_VELOCITY)
					$choke_time := get_event_par(%all_notes[$count_2], $EVENT_PAR_2)
					$choke_flag := 1
				end if
			end if
			inc($count_2)
		end while
		$cur_velo := $cur_velo - ($ENGINE_UPTIME - $choke_time) / 14
		if ($cur_velo - $EVENT_VELOCITY > 35)
			if ($cur_velo < 1)
				$cur_velo := 1
			end if
		else
			$cur_velo := $EVENT_VELOCITY
		end if
	else
		if ($EVENT_NOTE = $CYMB1_CHOKE or ...
			$EVENT_NOTE = $CYMB2_CHOKE or...
			$EVENT_NOTE = $CYMB3_CHOKE or...
			$EVENT_NOTE = $CYMB4_CHOKE or...
			$EVENT_NOTE = $CYMB5_CHOKE or...
			$EVENT_NOTE = $CYMB6_CHOKE or...
			$EVENT_NOTE = $CYMB7_CHOKE)

			$fade_time := 100 + $EVENT_VELOCITY * 2
			$count_2 := 0
			while ($count_2 < $event_cursor)
				if (get_event_par(%all_notes[$count_2], $EVENT_PAR_0) = %far_mutegroups[$actual_inst] or...
					get_event_par(%all_notes[$count_2], $EVENT_PAR_0) = %close_mutegroups[$actual_inst] or...
					get_event_par(%all_notes[$count_2], $EVENT_PAR_0) = %far_flex_mutegroups[$actual_inst] or...
					get_event_par(%all_notes[$count_2], $EVENT_PAR_0) = %close_flex_mutegroups[$actual_inst])
					fade_out(%all_notes[$count_2], $fade_time*1000,1)
					set_event_par(%all_notes[$count_2], $EVENT_PAR_0, %close_flex_mutegroups[$actual_inst])
					$choke_flag := 1
					$cur_velo := get_event_par(%all_notes[$count_2], $EVENT_PAR_VELOCITY)
					$choke_time := get_event_par(%all_notes[$count_2], $EVENT_PAR_2)
					if (get_event_par(%all_notes[$count_2], $EVENT_PAR_3) = 1)
						$choke_edge := 1
					end if
				end if
				inc($count_2)
			end while
			if ($choke_flag = 0)
				exit
			end if
			$cur_velo := ($cur_velo - ($ENGINE_UPTIME - $choke_time) / 20) / $choke_edge
			if ($cur_velo < 1)
				$cur_velo := 1
			end if
		end if
	end if
	{END VOICE CONTROL}

	if (pgs_key_exists(CHANNEL_PURGE_STATE) or pgs_key_exists(CHANNEL_MUTE_STATE))

		$played_note := %random_count_1er[$EVENT_NOTE] + ($play_alternate * %note_variations[$EVENT_NOTE] + $articulation_offset)

		{Trigger Direct 1}
		if ($dr1_grp_id > -1 and pgs_get_key_val(CHANNEL_PURGE_STATE, %instr_channel[$actual_inst]) = 1 and pgs_get_key_val(CHANNEL_MUTE_STATE, %instr_channel[$actual_inst]) = 1)
			$dr1_note_id := play_note(%random_count_1er[$EVENT_NOTE] + ($play_alternate * %note_variations[$EVENT_NOTE] + $articulation_offset),$cur_velo,0,-1)
			if (%instr_channel[$actual_inst] = 0)	{kick in-mic}
				if (pgs_get_key_val(MICBALANCE_STATE, 0) = 0)
					set_event_par_arr($dr1_note_id,$EVENT_PAR_ALLOW_GROUP,0,$dr1_grp_id)
				else
					set_event_par_arr($dr1_note_id,$EVENT_PAR_ALLOW_GROUP,1,$dr1_grp_id){allow}
				end if
			end if
			if (%instr_channel[$actual_inst] = 1)	{snare top mic}
				if (pgs_get_key_val(MICBALANCE_STATE, 3) = 0)
					set_event_par_arr($dr1_note_id,$EVENT_PAR_ALLOW_GROUP,0,$dr1_grp_id)
				else
					set_event_par_arr($dr1_note_id,$EVENT_PAR_ALLOW_GROUP,1,$dr1_grp_id){allow}
				end if
			else
				if (%instr_channel[$actual_inst] # 0)
					set_event_par_arr($dr1_note_id,$EVENT_PAR_ALLOW_GROUP,1,$dr1_grp_id)
				end if
			end if
			if ($EVENT_NOTE = $SNARE_SWISH)		{special case for snare swish and Rolls - It should not get faded by other snare hits}
				set_event_mark($dr1_note_id,$MARK_1)
			else
				if ($EVENT_NOTE = $SNARE_ROLL)
					set_event_mark($dr1_note_id,$MARK_2)
					$snare_roll_played_note := %inverse_mapping_data[$EVENT_NOTE]
				else
					set_event_par($dr1_note_id, $EVENT_PAR_0, %close_mutegroups[$actual_inst])
					set_event_par($dr1_note_id, $EVENT_PAR_2, $ENGINE_UPTIME)
				end if
			end if
			%dr1_note_ids[$EVENT_NOTE] := $dr1_note_id
			%all_notes[$event_cursor] := $dr1_note_id
			if (pgs_get_key_val(RAND_ON_OFF, 0) = 1)
				$pitch_rand_amt := %RAND_AMT[$actual_inst]
				change_tune($dr1_note_id, random(-$pitch_rand_amt, $pitch_rand_amt) * pgs_get_key_val(RAND_TUNING, 0) * $DIRECT_MIC_RATIO / 100, 1)
				change_vol ($dr1_note_id, random(-60,60) * pgs_get_key_val(RAND_VOLUME, 0) * $DIRECT_MIC_RATIO / 100, 1)
			end if
			inc($event_cursor)
		end if
		{Trigger Direct 2}
		if ($dr2_grp_id > -1 and pgs_get_key_val(CHANNEL_PURGE_STATE, %instr_channel[$actual_inst]) = 1 and pgs_get_key_val(CHANNEL_MUTE_STATE, %instr_channel[$actual_inst]) = 1)
			$dr2_note_id := play_note(%random_count_1er[$EVENT_NOTE] + ($play_alternate * %note_variations[$EVENT_NOTE]) + $articulation_offset,$cur_velo,0,-1)
			if (%instr_channel[$actual_inst] = 0)	{kick out mic}
				if (pgs_get_key_val(MICBALANCE_STATE, 1) = 0)
					set_event_par_arr($dr2_note_id,$EVENT_PAR_ALLOW_GROUP,0,$dr2_grp_id)
				else
					set_event_par_arr($dr2_note_id,$EVENT_PAR_ALLOW_GROUP,1,$dr2_grp_id){allow}
				end if
			end if
			if (%instr_channel[$actual_inst] = 1)	{snare bottom mic}
				if (pgs_get_key_val(MICBALANCE_STATE, 4) = 0)
					set_event_par_arr($dr2_note_id,$EVENT_PAR_ALLOW_GROUP,0,$dr2_grp_id)
				else
					set_event_par_arr($dr2_note_id,$EVENT_PAR_ALLOW_GROUP,1,$dr2_grp_id){allow}
				end if
			end if
			if ($EVENT_NOTE = $SNARE_SWISH)		{special case for snare swish and Rolls - It should not get faded by other snare hits}
				set_event_mark($dr2_note_id,$MARK_1)
			else
				if ($EVENT_NOTE = $SNARE_ROLL)
					set_event_mark($dr2_note_id,$MARK_2)
					$snare_roll_played_note := %inverse_mapping_data[$EVENT_NOTE]
				else
					set_event_par($dr2_note_id, $EVENT_PAR_0, %close_mutegroups[$actual_inst])
					set_event_par($dr2_note_id, $EVENT_PAR_2, $ENGINE_UPTIME)
				end if
			end if
			%dr2_note_ids[$EVENT_NOTE] := $dr2_note_id
			%all_notes[$event_cursor] := $dr2_note_id
			if (pgs_get_key_val(RAND_ON_OFF, 0) = 1)
				$pitch_rand_amt := %RAND_AMT[$actual_inst]
				change_tune($dr2_note_id, random(-$pitch_rand_amt, $pitch_rand_amt) * pgs_get_key_val(RAND_TUNING, 0) * $DIRECT_MIC_RATIO / 100, 1)
				change_vol ($dr2_note_id, random(-60,60) * pgs_get_key_val(RAND_VOLUME, 0) * $DIRECT_MIC_RATIO / 100, 1)
			end if
			inc($event_cursor)
		end if
		{Trigger Direct 3}
		if ($dr3_grp_id > -1 and pgs_get_key_val(CHANNEL_PURGE_STATE, %instr_channel[$actual_inst]) = 1 and pgs_get_key_val(CHANNEL_MUTE_STATE, %instr_channel[$actual_inst]) = 1)
			$dr3_note_id := play_note(%random_count_1er[$EVENT_NOTE] + ($play_alternate * %note_variations[$EVENT_NOTE]) + $articulation_offset,$cur_velo,0,-1)
			if (pgs_get_key_val(MICBALANCE_STATE, 2) = 0 and %instr_channel[$actual_inst] = 0)	{Mic Balance Voice Control}
				set_event_par_arr($dr3_note_id,$EVENT_PAR_ALLOW_GROUP,0,$dr3_grp_id)	{disallow submic group}
			else
				set_event_par_arr($dr3_note_id,$EVENT_PAR_ALLOW_GROUP,1,$dr3_grp_id)
			end if
			if ($EVENT_NOTE = $SNARE_SWISH)		{special case for snare swish and Rolls - It should not get faded by other snare hits}
				set_event_mark($dr3_note_id,$MARK_1)
			else
				if ($EVENT_NOTE = $SNARE_ROLL)
					set_event_mark($dr3_note_id,$MARK_2)
					$snare_roll_played_note := %inverse_mapping_data[$EVENT_NOTE]
				else
					set_event_par($dr3_note_id, $EVENT_PAR_0, %close_mutegroups[$actual_inst])
					set_event_par($dr3_note_id, $EVENT_PAR_2, $ENGINE_UPTIME)
				end if
			end if
			%dr3_note_ids[$EVENT_NOTE] := $dr3_note_id
			%all_notes[$event_cursor] := $dr3_note_id
			if (pgs_get_key_val(RAND_ON_OFF, 0) = 1)
				$pitch_rand_amt := %RAND_AMT[$actual_inst]
				change_tune($dr3_note_id, random(-$pitch_rand_amt, $pitch_rand_amt) * pgs_get_key_val(RAND_TUNING, 0) * $DIRECT_MIC_RATIO / 100, 1)
				change_vol ($dr3_note_id, random(-60,60) * pgs_get_key_val(RAND_VOLUME, 0) * $DIRECT_MIC_RATIO / 100, 1)
			end if
			inc($event_cursor)
		end if
		{Trigger Bleed}
		if ($bld_grp_id > -1 and pgs_get_key_val(CHANNEL_PURGE_STATE, %instr_channel[$SNARE_ID]) = 1 and pgs_get_key_val(CHANNEL_MUTE_STATE, %instr_channel[$SNARE_ID]) = 1)
			$bld_note_id := play_note(%random_count_1er[$EVENT_NOTE] + ($play_alternate * %note_variations[$EVENT_NOTE]) + $articulation_offset,$cur_velo,0,-1)
			if (pgs_get_key_val(MICBALANCE_STATE, 5) = 0  and  (%instr_channel[$actual_inst] = 0 or ...
																%instr_channel[$actual_inst] = 3 or ...
																%instr_channel[$actual_inst] = 4 or ...
																%instr_channel[$actual_inst] = 5 or ...
																%instr_channel[$actual_inst] = 6))	{Mic Balance Voice Control}
				set_event_par_arr($bld_note_id,$EVENT_PAR_ALLOW_GROUP,0,$bld_grp_id)	{disallow bleed group for kick, and toms}
			else
				set_event_par_arr($bld_note_id,$EVENT_PAR_ALLOW_GROUP,1,$bld_grp_id)
			end if
			set_event_par($bld_note_id, $EVENT_PAR_0, %close_mutegroups[$actual_inst])
			set_event_par($bld_note_id, $EVENT_PAR_2, $ENGINE_UPTIME)
			%bld_note_ids[$EVENT_NOTE] := $bld_note_id
			%all_notes[$event_cursor] := $bld_note_id
			if (pgs_get_key_val(RAND_ON_OFF, 0) = 1)
				$pitch_rand_amt := %RAND_AMT[$actual_inst]
				change_tune($bld_note_id, random(-$pitch_rand_amt, $pitch_rand_amt) * pgs_get_key_val(RAND_TUNING, 0) * $DIRECT_MIC_RATIO / 100, 1)
				change_vol ($bld_note_id, random(-60,60) * pgs_get_key_val(RAND_VOLUME, 0) * $DIRECT_MIC_RATIO / 100, 1)
			end if
			inc($event_cursor)
		end if
		{Trigger Kit 1}
		if ($kt1_grp_id > -1 and pgs_get_key_val(CHANNEL_PURGE_STATE, 9) = 1 and pgs_get_key_val(CHANNEL_MUTE_STATE, 9) = 1)
			$kt1_note_id := play_note(%random_count_1er[$EVENT_NOTE] + ($play_alternate * %note_variations[$EVENT_NOTE]) + $articulation_offset,$cur_velo,0,-1)
			set_event_par_arr($kt1_note_id,$EVENT_PAR_ALLOW_GROUP,1,$kt1_grp_id)
			if ($EVENT_NOTE = $SNARE_SWISH)		{special case for snare swish and Rolls - It should not get faded by other snare hits}
				set_event_mark($kt1_note_id,$MARK_1)
			else
				if ($EVENT_NOTE = $SNARE_ROLL)
					set_event_mark($kt1_note_id,$MARK_2)
					$snare_roll_played_note := %inverse_mapping_data[$EVENT_NOTE]
				else
					set_event_par($kt1_note_id, $EVENT_PAR_0, %close_mutegroups[$actual_inst])
					set_event_par($kt1_note_id, $EVENT_PAR_2, $ENGINE_UPTIME)
				end if
			end if
			%kt1_note_ids[$EVENT_NOTE] := $kt1_note_id
			%all_notes[$event_cursor] := $kt1_note_id
			if (pgs_get_key_val(RAND_ON_OFF, 0) = 1)
				$pitch_rand_amt := %RAND_AMT[$actual_inst]
				change_tune($kt1_note_id, random(-$pitch_rand_amt, $pitch_rand_amt) * pgs_get_key_val(RAND_TUNING, 0), 1)
				change_vol ($kt1_note_id, random(-60,60) * pgs_get_key_val(RAND_VOLUME, 0), 1)
			end if
			inc($event_cursor)
		end if
		{Trigger Kit 2}
		if ($kt2_grp_id > -1 and pgs_get_key_val(CHANNEL_PURGE_STATE, 10) = 1 and pgs_get_key_val(CHANNEL_MUTE_STATE, 10) = 1)
			$kt2_note_id := play_note(%random_count_1er[$EVENT_NOTE] + ($play_alternate * %note_variations[$EVENT_NOTE]) + $articulation_offset,$cur_velo,0,-1)
			set_event_par_arr($kt2_note_id,$EVENT_PAR_ALLOW_GROUP,1,$kt2_grp_id)
			if ($EVENT_NOTE = $SNARE_SWISH)		{special case for snare swish and Rolls - It should not get faded by other snare hits}
				set_event_mark($kt2_note_id,$MARK_1)
			else
				if ($EVENT_NOTE = $SNARE_ROLL)
					set_event_mark($kt2_note_id,$MARK_2)
					$snare_roll_played_note := %inverse_mapping_data[$EVENT_NOTE]
				else
					set_event_par($kt2_note_id, $EVENT_PAR_0, %close_mutegroups[$actual_inst])
					set_event_par($kt2_note_id, $EVENT_PAR_2, $ENGINE_UPTIME)
				end if
			end if
			%kt2_note_ids[$EVENT_NOTE] := $kt2_note_id
			%all_notes[$event_cursor] := $kt2_note_id
			if (pgs_get_key_val(RAND_ON_OFF, 0) = 1)
				$pitch_rand_amt := %RAND_AMT[$actual_inst]
				change_tune($kt2_note_id, random(-$pitch_rand_amt, $pitch_rand_amt) * pgs_get_key_val(RAND_TUNING, 0), 1)
				change_vol ($kt2_note_id, random(-60,60) * pgs_get_key_val(RAND_VOLUME, 0), 1)
			end if
			inc($event_cursor)
		end if
		{Trigger Kit 3}
		if ($kt3_grp_id > -1 and pgs_get_key_val(CHANNEL_PURGE_STATE, 11) = 1 and pgs_get_key_val(CHANNEL_MUTE_STATE, 11) = 1)
			$kt3_note_id := play_note(%random_count_1er[$EVENT_NOTE] + ($play_alternate * %note_variations[$EVENT_NOTE]) + $articulation_offset,$cur_velo,0,-1)
			set_event_par_arr($kt3_note_id,$EVENT_PAR_ALLOW_GROUP,1,$kt3_grp_id)
			if ($EVENT_NOTE = $SNARE_SWISH)		{special case for snare swish and Rolls - It should not get faded by other snare hits}
				set_event_mark($kt3_note_id,$MARK_1)
			else
				if ($EVENT_NOTE = $SNARE_ROLL)
					set_event_mark($kt3_note_id,$MARK_2)
					$snare_roll_played_note := %inverse_mapping_data[$EVENT_NOTE]
				else
					set_event_par($kt3_note_id, $EVENT_PAR_0, %close_mutegroups[$actual_inst])
					set_event_par($kt3_note_id, $EVENT_PAR_2, $ENGINE_UPTIME)
				end if
			end if
			%kt3_note_ids[$EVENT_NOTE] := $kt3_note_id
			%all_notes[$event_cursor] := $kt3_note_id
			if (pgs_get_key_val(RAND_ON_OFF, 0) = 1)
				$pitch_rand_amt := %RAND_AMT[$actual_inst]
				change_tune($kt3_note_id, random(-$pitch_rand_amt, $pitch_rand_amt) * pgs_get_key_val(RAND_TUNING, 0), 1)
				change_vol ($kt3_note_id, random(-60,60) * pgs_get_key_val(RAND_VOLUME, 0), 1)
			end if
			inc($event_cursor)
		end if
		{Trigger Kit 4}
		if ($kt4_grp_id > -1 and pgs_get_key_val(CHANNEL_PURGE_STATE, 12) = 1 and pgs_get_key_val(CHANNEL_MUTE_STATE, 12) = 1)
			$kt4_note_id := play_note(%random_count_1er[$EVENT_NOTE] + ($play_alternate * %note_variations[$EVENT_NOTE]) + $articulation_offset,$cur_velo,0,-1)
			set_event_par_arr($kt4_note_id,$EVENT_PAR_ALLOW_GROUP,1,$kt4_grp_id)
			if ($EVENT_NOTE = $SNARE_SWISH)		{special case for snare swish and Rolls - It should not get faded by other snare hits}
				set_event_mark($kt4_note_id,$MARK_1)
			else
				if ($EVENT_NOTE = $SNARE_ROLL)
					set_event_mark($kt4_note_id,$MARK_2)
					$snare_roll_played_note := %inverse_mapping_data[$EVENT_NOTE]
				else
					set_event_par($kt4_note_id, $EVENT_PAR_0, %close_mutegroups[$actual_inst])
					set_event_par($kt4_note_id, $EVENT_PAR_2, $ENGINE_UPTIME)
				end if
			end if
			%kt4_note_ids[$EVENT_NOTE] := $kt4_note_id
			%all_notes[$event_cursor] := $kt4_note_id
			if (pgs_get_key_val(RAND_ON_OFF, 0) = 1)
				$pitch_rand_amt := %RAND_AMT[$actual_inst]
				change_tune($kt4_note_id, random(-$pitch_rand_amt, $pitch_rand_amt) * pgs_get_key_val(RAND_TUNING, 0), 1)
				change_vol ($kt4_note_id, random(-60,60) * pgs_get_key_val(RAND_VOLUME, 0), 1)
			end if
			inc($event_cursor)
		end if
	end if

	{FOR NEXT EVENT}
	%last_random_count_1er[$EVENT_NOTE] := %random_count_1er[$EVENT_NOTE]

	if ($EVENT_NOTE = $CYMB1_EDGE or ...
		$EVENT_NOTE = $CYMB2_EDGE or ...
		$EVENT_NOTE = $CYMB3_EDGE or ...
		$EVENT_NOTE = $CYMB4_EDGE or ...
		$EVENT_NOTE = $CYMB5_EDGE or ...
		$EVENT_NOTE = $CYMB6_EDGE or ...
		$EVENT_NOTE = $CYMB7_EDGE)
		if ($kt1_grp_id > -1)
			set_event_par($kt1_note_id, $EVENT_PAR_0, %far_flex_mutegroups[$actual_inst])
			set_event_par($kt1_note_id, $EVENT_PAR_3, 1)
		end if
		if ($kt2_grp_id > -1)
			set_event_par($kt2_note_id, $EVENT_PAR_0, %far_flex_mutegroups[$actual_inst])
			set_event_par($kt2_note_id, $EVENT_PAR_3, 1)
		end if
		if ($kt3_grp_id > -1)
			set_event_par($kt3_note_id, $EVENT_PAR_0, %far_flex_mutegroups[$actual_inst])
			set_event_par($kt3_note_id, $EVENT_PAR_3, 1)
		end if
		if ($kt4_grp_id > -1)
			set_event_par($kt4_note_id, $EVENT_PAR_0, %far_flex_mutegroups[$actual_inst])
			set_event_par($kt4_note_id, $EVENT_PAR_3, 1)
		end if
	end if

	%last_velo_inst[$actual_inst] := $EVENT_VELOCITY
 	%last_velo[$EVENT_NOTE] := $EVENT_VELOCITY

end on
{END ON NOTE CALLBACK}

on controller
	select ($CC_NUM)
		case ($HIHAT_1ST_CC)
			$hihat_state := %CC[$CC_NUM]
			$last_mw_value := %CC[$CC_NUM]
		case ($HIHAT_2ND_CC)
			$hihat_state := %CC[$CC_NUM] * 2
			if ($hihat_state > 127)
				$hihat_state := 127
			end if
	end select

	{pitch bend control of Snare Swish(MARK_1) and Snare ROLL(MARK_2)}
	if ($CC_NUM = $VCC_PITCH_BEND)
		ignore_controller
		if (%CC[$VCC_PITCH_BEND] >= 0)
			change_vol(by_marks($MARK_1),9000 + %CC[$VCC_PITCH_BEND] * 2, 0)
			change_vol(by_marks($MARK_2),2250 + %CC[$VCC_PITCH_BEND] * 1, 0)
		end if
		if (%CC[$VCC_PITCH_BEND] < 0)
			change_vol(by_marks($MARK_1),9000 + %CC[$VCC_PITCH_BEND] * 3, 0)
			change_vol(by_marks($MARK_2),4500 + %CC[$VCC_PITCH_BEND] * 4, 0)
		end if
	end if
end on

on pgs_changed
	select (pgs_get_key_val(ACTION_TYPE, 0))
		case 6
			$count_1 := 0
			while ($count_1 < 128)
				%inverse_mapping_data[$count_1] := pgs_get_key_val(MAPPING_DATA, $count_1)
				inc($count_1)
			end while
	end select
end on

{END OF SCRIPT}

{!!!START TESTING PART 3!!!}

on ui_control ($point_1_in)
	if ($point_1_in >= %note_curve[$cur_note * 6 + 2])
		$point_1_in := %note_curve[$cur_note * 6 + 2] - 1
	end if

	%note_curve[$cur_note * 6] := $point_1_in

	$count := 0
	while ($count < 128)
		if ($count < %note_curve[$cur_note * 6])
			$x1 := 1
			$y1 := 1
			$x2 := %note_curve[$cur_note * 6]
			$y2 := %note_curve[$cur_note * 6 + 1]
		else
			if ($count < %note_curve[$cur_note * 6 + 2])
				$x1 := %note_curve[$cur_note * 6]
				$y1 := %note_curve[$cur_note * 6 + 1]
				$x2 := %note_curve[$cur_note * 6 + 2]
				$y2 := %note_curve[$cur_note * 6 + 3]
			else
				if ($count < %note_curve[$cur_note * 6 + 4])
					$x1 := %note_curve[$cur_note * 6 + 2]
					$y1 := %note_curve[$cur_note * 6 + 3]
					$x2 := %note_curve[$cur_note * 6 + 4]
					$y2 := %note_curve[$cur_note * 6 + 5]
				else
					$x1 := %note_curve[$cur_note * 6 + 4]
					$y1 := %note_curve[$cur_note * 6 + 5]
					$x2 := 127
					$y2 := 127
				end if
			end if
		end if

		$new_velo := ($y2 - $y1) * ($count - $x2) / ($x2 - $x1) + $y2
		if ($new_velo > 127)
			$new_velo := 127
		else
			if ($new_velo < 1)
				$new_velo := 1
			end if
		end if

		%table[$count] := $new_velo
		inc($count)
	end while
end on

on ui_control ($point_1_out)
	%note_curve[$cur_note * 6 + 1] := $point_1_out

	$count := 0
	while ($count < 128)
		if ($count < %note_curve[$cur_note * 6])
			$x1 := 1
			$y1 := 1
			$x2 := %note_curve[$cur_note * 6]
			$y2 := %note_curve[$cur_note * 6 + 1]
		else
			if ($count < %note_curve[$cur_note * 6 + 2])
				$x1 := %note_curve[$cur_note * 6]
				$y1 := %note_curve[$cur_note * 6 + 1]
				$x2 := %note_curve[$cur_note * 6 + 2]
				$y2 := %note_curve[$cur_note * 6 + 3]
			else
				if ($count < %note_curve[$cur_note * 6 + 4])
					$x1 := %note_curve[$cur_note * 6 + 2]
					$y1 := %note_curve[$cur_note * 6 + 3]
					$x2 := %note_curve[$cur_note * 6 + 4]
					$y2 := %note_curve[$cur_note * 6 + 5]
				else
					$x1 := %note_curve[$cur_note * 6 + 4]
					$y1 := %note_curve[$cur_note * 6 + 5]
					$x2 := 127
					$y2 := 127
				end if
			end if
		end if

		$new_velo := ($y2 - $y1) * ($count - $x2) / ($x2 - $x1) + $y2
		if ($new_velo > 127)
			$new_velo := 127
		else
			if ($new_velo < 1)
				$new_velo := 1
			end if
		end if

		%table[$count] := $new_velo
		inc($count)
	end while
end on

on ui_control ($point_2_in)
	if ($point_2_in >= %note_curve[$cur_note * 6 + 4])
		$point_2_in := %note_curve[$cur_note * 6 + 4] - 1
	else
		if ($point_2_in <= %note_curve[$cur_note * 6])
			$point_2_in := %note_curve[$cur_note * 6] + 1
		end if
	end if

	%note_curve[$cur_note * 6 + 2] := $point_2_in

	$count := 0
	while ($count < 128)
		if ($count < %note_curve[$cur_note * 6])
			$x1 := 1
			$y1 := 1
			$x2 := %note_curve[$cur_note * 6]
			$y2 := %note_curve[$cur_note * 6 + 1]
		else
			if ($count < %note_curve[$cur_note * 6 + 2])
				$x1 := %note_curve[$cur_note * 6]
				$y1 := %note_curve[$cur_note * 6 + 1]
				$x2 := %note_curve[$cur_note * 6 + 2]
				$y2 := %note_curve[$cur_note * 6 + 3]
			else
				if ($count < %note_curve[$cur_note * 6 + 4])
					$x1 := %note_curve[$cur_note * 6 + 2]
					$y1 := %note_curve[$cur_note * 6 + 3]
					$x2 := %note_curve[$cur_note * 6 + 4]
					$y2 := %note_curve[$cur_note * 6 + 5]
				else
					$x1 := %note_curve[$cur_note * 6 + 4]
					$y1 := %note_curve[$cur_note * 6 + 5]
					$x2 := 127
					$y2 := 127
				end if
			end if
		end if

		$new_velo := ($y2 - $y1) * ($count - $x2) / ($x2 - $x1) + $y2
		if ($new_velo > 127)
			$new_velo := 127
		else
			if ($new_velo < 1)
				$new_velo := 1
			end if
		end if

		%table[$count] := $new_velo
		inc($count)
	end while
end on

on ui_control ($point_2_out)
	%note_curve[$cur_note * 6 + 3] := $point_2_out

	$count := 0
	while ($count < 128)
		if ($count < %note_curve[$cur_note * 6])
			$x1 := 1
			$y1 := 1
			$x2 := %note_curve[$cur_note * 6]
			$y2 := %note_curve[$cur_note * 6 + 1]
		else
			if ($count < %note_curve[$cur_note * 6 + 2])
				$x1 := %note_curve[$cur_note * 6]
				$y1 := %note_curve[$cur_note * 6 + 1]
				$x2 := %note_curve[$cur_note * 6 + 2]
				$y2 := %note_curve[$cur_note * 6 + 3]
			else
				if ($count < %note_curve[$cur_note * 6 + 4])
					$x1 := %note_curve[$cur_note * 6 + 2]
					$y1 := %note_curve[$cur_note * 6 + 3]
					$x2 := %note_curve[$cur_note * 6 + 4]
					$y2 := %note_curve[$cur_note * 6 + 5]
				else
					$x1 := %note_curve[$cur_note * 6 + 4]
					$y1 := %note_curve[$cur_note * 6 + 5]
					$x2 := 127
					$y2 := 127
				end if
			end if
		end if

		$new_velo := ($y2 - $y1) * ($count - $x2) / ($x2 - $x1) + $y2
		if ($new_velo > 127)
			$new_velo := 127
		else
			if ($new_velo < 1)
				$new_velo := 1
			end if
		end if

		%table[$count] := $new_velo
		inc($count)
	end while
end on

on ui_control ($point_3_in)
	if ($point_3_in <= %note_curve[$cur_note * 6 + 2])
		$point_3_in := %note_curve[$cur_note * 6 + 2] + 1
	end if

	%note_curve[$cur_note * 6 + 4] := $point_3_in

	$count := 0
	while ($count < 128)
		if ($count < %note_curve[$cur_note * 6])
			$x1 := 1
			$y1 := 1
			$x2 := %note_curve[$cur_note * 6]
			$y2 := %note_curve[$cur_note * 6 + 1]
		else
			if ($count < %note_curve[$cur_note * 6 + 2])
				$x1 := %note_curve[$cur_note * 6]
				$y1 := %note_curve[$cur_note * 6 + 1]
				$x2 := %note_curve[$cur_note * 6 + 2]
				$y2 := %note_curve[$cur_note * 6 + 3]
			else
				if ($count < %note_curve[$cur_note * 6 + 4])
					$x1 := %note_curve[$cur_note * 6 + 2]
					$y1 := %note_curve[$cur_note * 6 + 3]
					$x2 := %note_curve[$cur_note * 6 + 4]
					$y2 := %note_curve[$cur_note * 6 + 5]
				else
					$x1 := %note_curve[$cur_note * 6 + 4]
					$y1 := %note_curve[$cur_note * 6 + 5]
					$x2 := 127
					$y2 := 127
				end if
			end if
		end if

		$new_velo := ($y2 - $y1) * ($count - $x2) / ($x2 - $x1) + $y2
		if ($new_velo > 127)
			$new_velo := 127
		else
			if ($new_velo < 1)
				$new_velo := 1
			end if
		end if

		%table[$count] := $new_velo
		inc($count)
	end while
end on

on ui_control ($point_3_out)
	%note_curve[$cur_note * 6 + 5] := $point_3_out

	$count := 0
	while ($count < 128)
		if ($count < %note_curve[$cur_note * 6])
			$x1 := 1
			$y1 := 1
			$x2 := %note_curve[$cur_note * 6]
			$y2 := %note_curve[$cur_note * 6 + 1]
		else
			if ($count < %note_curve[$cur_note * 6 + 2])
				$x1 := %note_curve[$cur_note * 6]
				$y1 := %note_curve[$cur_note * 6 + 1]
				$x2 := %note_curve[$cur_note * 6 + 2]
				$y2 := %note_curve[$cur_note * 6 + 3]
			else
				if ($count < %note_curve[$cur_note * 6 + 4])
					$x1 := %note_curve[$cur_note * 6 + 2]
					$y1 := %note_curve[$cur_note * 6 + 3]
					$x2 := %note_curve[$cur_note * 6 + 4]
					$y2 := %note_curve[$cur_note * 6 + 5]
				else
					$x1 := %note_curve[$cur_note * 6 + 4]
					$y1 := %note_curve[$cur_note * 6 + 5]
					$x2 := 127
					$y2 := 127
				end if
			end if
		end if

		$new_velo := ($y2 - $y1) * ($count - $x2) / ($x2 - $x1) + $y2
		if ($new_velo > 127)
			$new_velo := 127
		else
			if ($new_velo < 1)
				$new_velo := 1
			end if
		end if

		%table[$count] := $new_velo
		inc($count)
	end while
end on


on ui_control ($note)
	$cur_note := $note

	$count := 0
	while ($count < 128)
		if ($count < %note_curve[$cur_note * 6])
			$x1 := 1
			$y1 := 1
			$x2 := %note_curve[$cur_note * 6]
			$y2 := %note_curve[$cur_note * 6 + 1]
		else
			if ($count < %note_curve[$cur_note * 6 + 2])
				$x1 := %note_curve[$cur_note * 6]
				$y1 := %note_curve[$cur_note * 6 + 1]
				$x2 := %note_curve[$cur_note * 6 + 2]
				$y2 := %note_curve[$cur_note * 6 + 3]
			else
				if ($count < %note_curve[$cur_note * 6 + 4])
					$x1 := %note_curve[$cur_note * 6 + 2]
					$y1 := %note_curve[$cur_note * 6 + 3]
					$x2 := %note_curve[$cur_note * 6 + 4]
					$y2 := %note_curve[$cur_note * 6 + 5]
				else
					$x1 := %note_curve[$cur_note * 6 + 4]
					$y1 := %note_curve[$cur_note * 6 + 5]
					$x2 := 127
					$y2 := 127
				end if
			end if
		end if

		$new_velo := ($y2 - $y1) * ($count - $x2) / ($x2 - $x1) + $y2
		if ($new_velo > 127)
			$new_velo := 127
		else
			if ($new_velo < 1)
				$new_velo := 1
			end if
		end if

		%table[$count] := $new_velo
		inc($count)
	end while
end on

on ui_control ($reset)
	$reset := 0

	%note_curve[$cur_note * 6] := 32
	%note_curve[$cur_note * 6 + 1] := 32
	%note_curve[$cur_note * 6 + 2] := 64
	%note_curve[$cur_note * 6 + 3] := 64
	%note_curve[$cur_note * 6 + 4] := 96
	%note_curve[$cur_note * 6 + 5] := 96

	$point_1_in  := %note_curve[$cur_note * 6]
	$point_1_out := %note_curve[$cur_note * 6 + 1]
	$point_2_in  := %note_curve[$cur_note * 6 + 2]
	$point_2_out := %note_curve[$cur_note * 6 + 3]
	$point_3_in  := %note_curve[$cur_note * 6 + 4]
	$point_3_out := %note_curve[$cur_note * 6 + 5]

	$count_1 := 0
	while ($count_1 < 128)
		if ($count_1 < %note_curve[$cur_note * 6])
			$x1 := 1
			$y1 := 1
			$x2 := %note_curve[$cur_note * 6]
			$y2 := %note_curve[$cur_note * 6 + 1]
		else
			if ($count_1 < %note_curve[$cur_note * 6 + 2])
				$x1 := %note_curve[$cur_note * 6]
				$y1 := %note_curve[$cur_note * 6 + 1]
				$x2 := %note_curve[$cur_note * 6 + 2]
				$y2 := %note_curve[$cur_note * 6 + 3]
			else
				if ($count_1 < %note_curve[$cur_note * 6 + 4])
					$x1 := %note_curve[$cur_note * 6 + 2]
					$y1 := %note_curve[$cur_note * 6 + 3]
					$x2 := %note_curve[$cur_note * 6 + 4]
					$y2 := %note_curve[$cur_note * 6 + 5]
				else
					$x1 := %note_curve[$cur_note * 6 + 4]
					$y1 := %note_curve[$cur_note * 6 + 5]
					$x2 := 127
					$y2 := 127
				end if
			end if
		end if

		$new_velo := ($y2 - $y1) * ($count_1 - $x2) / ($x2 - $x1) + $y2
		if ($new_velo > 127)
			$new_velo := 127
		else
			if ($new_velo < 1)
				$new_velo := 1
			end if
		end if

		%table[$count_1] := $new_velo
		inc($count_1)
	end while
end on
{!!!END TESTING PART 3!!!}


